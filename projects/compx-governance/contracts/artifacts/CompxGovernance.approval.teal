#pragma version 10
intcblock 1 0
bytecblock 0x 0x746f74616c5f70726f706f73616c73 0x6465706c6f7965725f61646472657373 0x5f70726f706f73616c73 0x0000000000000000 0x000a

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/CompxGovernance.algo.ts:18
	// this.total_proposals.value = 0
	bytec 1 //  "total_proposals"
	intc 1 // 0
	app_global_put

	// contracts/CompxGovernance.algo.ts:19
	// this.deployer_address.value = this.txn.sender
	bytec 2 //  "deployer_address"
	txn Sender
	app_global_put

	// contracts/CompxGovernance.algo.ts:20
	// this.total_proposals.value = 0
	bytec 1 //  "total_proposals"
	intc 1 // 0
	app_global_put
	retsub

// createNewProposal(string,string,string,uint64,pay)void
*abi_route_createNewProposal:
	// mbrTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrTxn) for createNewProposal must be a pay transaction
	assert

	// expiresIn: uint64
	txna ApplicationArgs 4
	btoi

	// proposalDescription: string
	txna ApplicationArgs 3
	extract 2 0

	// proposalTitle: string
	txna ApplicationArgs 2
	extract 2 0

	// proposalType: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createNewProposal(string,string,string,uint64,pay)void
	callsub createNewProposal
	intc 0 // 1
	return

// createNewProposal(proposalType: string, proposalTitle: string, proposalDescription: string, expiresIn: uint64, mbrTxn: PayTxn): void
//
// Create a new proposal
// @param proposalType Type of the proposal - can be reg or pool
// @param proposalTitle Title of the proposal
// @param proposalDescription Description of the proposal
// @param expiresIn Time in seconds for the proposal to expire
createNewProposal:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/CompxGovernance.algo.ts:38
	// proposerAddress: Address = this.txn.sender
	txn Sender
	frame_bury 0 // proposerAddress: Address

	// contracts/CompxGovernance.algo.ts:41
	// proposalNonce: uint64 = this.total_proposals.value + 1
	bytec 1 //  "total_proposals"
	app_global_get
	intc 0 // 1
	+
	frame_bury 1 // proposalNonce: uint64

	// contracts/CompxGovernance.algo.ts:42
	// currentTimestamp: uint64 = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 2 // currentTimestamp: uint64

	// contracts/CompxGovernance.algo.ts:45
	// expiryTimestamp: uint64 = currentTimestamp + expiresIn
	frame_dig 2 // currentTimestamp: uint64
	frame_dig -4 // expiresIn: uint64
	+
	frame_bury 3 // expiryTimestamp: uint64

	// contracts/CompxGovernance.algo.ts:48
	// assert(proposerAddress === this.deployer_address.value, 'Only the deployer can create proposals')
	frame_dig 0 // proposerAddress: Address
	bytec 2 //  "deployer_address"
	app_global_get
	==

	// Only the deployer can create proposals
	assert

	// contracts/CompxGovernance.algo.ts:49
	// assert(!this.proposals({ nonce: proposalNonce, proposalType: proposalType }).exists, 'Proposal already exists')
	bytec 3 //  "_proposals"
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 5 //  initial head offset
	frame_dig 1 // proposalNonce: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -1 // proposalType: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	box_len
	swap
	pop
	!

	// Proposal already exists
	assert

	// contracts/CompxGovernance.algo.ts:52
	// verifyPayTxn(mbrTxn, { amount: { greaterThanEqualTo: proposalMbr } })
	// verify amount
	frame_dig -5 // mbrTxn: PayTxn
	gtxns Amount
	pushint 2912
	>=

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=proposalMbr"}
	assert

	// contracts/CompxGovernance.algo.ts:55
	// this.proposals({ nonce: proposalNonce, proposalType: proposalType }).value = {
	//       proposalTitle: proposalTitle,
	//       proposalDescription: proposalDescription,
	//       ProposalTotalVotes: 0,
	//       ProposalYesVotes: 0,
	//       CreatedAtTimestamp: currentTimestamp,
	//       ExpiryTimestamp: expiryTimestamp,
	//     }
	bytec 3 //  "_proposals"
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 5 //  initial head offset
	frame_dig 1 // proposalNonce: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -1 // proposalType: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	dup
	box_del
	pop
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x0024 // initial head offset
	frame_dig -2 // proposalTitle: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // proposalDescription: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 4 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 4 // 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig 2 // currentTimestamp: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig 3 // expiryTimestamp: uint64
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put

	// contracts/CompxGovernance.algo.ts:64
	// this.total_proposals.value += 1
	bytec 1 //  "total_proposals"
	app_global_get
	intc 0 // 1
	+
	bytec 1 //  "total_proposals"
	swap
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3e5c15e6 // method "createNewProposal(string,string,string,uint64,pay)void"
	txna ApplicationArgs 0
	match *abi_route_createNewProposal

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub