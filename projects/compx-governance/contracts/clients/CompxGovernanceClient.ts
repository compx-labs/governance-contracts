/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CompxGovernance","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToApplication","desc":"OPT-IN to the application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]}},{"name":"createNewProposal","desc":"Create a new proposal","args":[{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"expiresIn","type":"uint64"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"makeProposalVote","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"proposalId","type":"(uint64)","desc":"The id of the proposal to be voted on","struct":"ProposalIdType"},{"name":"inFavor","type":"bool","desc":"If the vote is a yes or no vote"},{"name":"voterAddress","type":"address","desc":"The address for the voter - Meant for v1.0 while deployer \"server\" will be responsible to execute"},{"name":"votingPower","type":"uint64","desc":"The voting power of the voter"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"slashUserVotingPower","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"The address of the user to get its contribution slashed"},{"name":"amount","type":"uint64","desc":"The amount to be slashed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProposalsById","args":[{"name":"proposalId","type":"(uint64)","desc":"used to define state of proposals to return","struct":"ProposalIdType"}],"returns":{"type":"(string,string,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"ProposalDataType Returns the proposal by id","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ProposalDataType":[{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalTotalPower","type":"uint64"},{"name":"proposalYesPower","type":"uint64"},{"name":"createdAtTimestamp","type":"uint64"},{"name":"expiryTimestamp","type":"uint64"}],"ProposalIdType":[{"name":"nonce","type":"uint64"}],"ProposalVoteDataType":[{"name":"voteTimestamp","type":"uint64"}],"ProposalVoteIdType":[{"name":"proposalId","type":[{"name":"nonce","type":"uint64"}]},{"name":"voterAddress","type":"address"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":2}},"keys":{"global":{"deployer_address":{"key":"ZGVwbG95ZXJfYWRkcmVzcw==","keyType":"AVMBytes","valueType":"address"},"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMBytes","valueType":"uint64"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"total_current_voting_power":{"key":"dG90YWxfY3VycmVudF92b3RpbmdfcG93ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"user_current_voting_power":{"key":"dXNlcl9jdXJyZW50X3ZvdGluZ19wb3dlcg==","keyType":"AVMBytes","valueType":"uint64"},"user_votes":{"key":"dXNlcl92b3Rlcw==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"ProposalIdType","valueType":"ProposalDataType","prefix":"_p"},"votes":{"keyType":"ProposalVoteIdType","valueType":"ProposalVoteDataType","prefix":"_v"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/CompxGovernance.algo.ts:5","pc":[0]},{"teal":2,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/CompxGovernance.algo.ts:5","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133]},{"teal":15,"source":"contracts/CompxGovernance.algo.ts:5","pc":[134,135]},{"teal":16,"source":"contracts/CompxGovernance.algo.ts:5","pc":[136]},{"teal":17,"source":"contracts/CompxGovernance.algo.ts:5","pc":[137,138]},{"teal":18,"source":"contracts/CompxGovernance.algo.ts:5","pc":[139]},{"teal":19,"source":"contracts/CompxGovernance.algo.ts:5","pc":[140,141]},{"teal":20,"source":"contracts/CompxGovernance.algo.ts:5","pc":[142]},{"teal":21,"source":"contracts/CompxGovernance.algo.ts:5","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]},{"teal":25,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[169]},{"teal":30,"source":"contracts/CompxGovernance.algo.ts:30","pc":[170,171,172]},{"teal":31,"source":"contracts/CompxGovernance.algo.ts:30","pc":[173]},{"teal":32,"source":"contracts/CompxGovernance.algo.ts:30","pc":[174]},{"teal":36,"source":"contracts/CompxGovernance.algo.ts:30","pc":[175,176,177]},{"teal":40,"source":"contracts/CompxGovernance.algo.ts:31","pc":[178]},{"teal":41,"source":"contracts/CompxGovernance.algo.ts:31","pc":[179,180]},{"teal":42,"source":"contracts/CompxGovernance.algo.ts:31","pc":[181]},{"teal":46,"source":"contracts/CompxGovernance.algo.ts:32","pc":[182,183]},{"teal":47,"source":"contracts/CompxGovernance.algo.ts:32","pc":[184]},{"teal":48,"source":"contracts/CompxGovernance.algo.ts:32","pc":[185]},{"teal":52,"source":"contracts/CompxGovernance.algo.ts:33","pc":[186,187]},{"teal":53,"source":"contracts/CompxGovernance.algo.ts:33","pc":[188]},{"teal":54,"source":"contracts/CompxGovernance.algo.ts:33","pc":[189]},{"teal":55,"source":"contracts/CompxGovernance.algo.ts:30","pc":[190]},{"teal":60,"source":"contracts/CompxGovernance.algo.ts:40","pc":[191,192,193]},{"teal":61,"source":"contracts/CompxGovernance.algo.ts:40","pc":[194]},{"teal":62,"source":"contracts/CompxGovernance.algo.ts:40","pc":[195]},{"teal":68,"source":"contracts/CompxGovernance.algo.ts:40","pc":[196,197,198]},{"teal":71,"source":"contracts/CompxGovernance.algo.ts:40","pc":[199]},{"teal":75,"source":"contracts/CompxGovernance.algo.ts:42","pc":[200,201]},{"teal":76,"source":"contracts/CompxGovernance.algo.ts:42","pc":[202,203]},{"teal":80,"source":"contracts/CompxGovernance.algo.ts:43","pc":[204,205]},{"teal":81,"source":"contracts/CompxGovernance.algo.ts:43","pc":[206,207]},{"teal":82,"source":"contracts/CompxGovernance.algo.ts:43","pc":[208]},{"teal":83,"source":"contracts/CompxGovernance.algo.ts:43","pc":[209]},{"teal":87,"source":"contracts/CompxGovernance.algo.ts:44","pc":[210,211]},{"teal":88,"source":"contracts/CompxGovernance.algo.ts:44","pc":[212]},{"teal":89,"source":"contracts/CompxGovernance.algo.ts:44","pc":[213]},{"teal":90,"source":"contracts/CompxGovernance.algo.ts:44","pc":[214]},{"teal":91,"source":"contracts/CompxGovernance.algo.ts:40","pc":[215]},{"teal":96,"source":"contracts/CompxGovernance.algo.ts:59","pc":[216,217]},{"teal":97,"source":"contracts/CompxGovernance.algo.ts:59","pc":[218]},{"teal":98,"source":"contracts/CompxGovernance.algo.ts:59","pc":[219]},{"teal":99,"source":"contracts/CompxGovernance.algo.ts:59","pc":[220]},{"teal":100,"source":"contracts/CompxGovernance.algo.ts:59","pc":[221,222]},{"teal":101,"source":"contracts/CompxGovernance.algo.ts:59","pc":[223]},{"teal":102,"source":"contracts/CompxGovernance.algo.ts:59","pc":[224]},{"teal":105,"source":"contracts/CompxGovernance.algo.ts:59","errorMessage":"argument 0 (mbrTxn) for createNewProposal must be a pay transaction","pc":[225]},{"teal":108,"source":"contracts/CompxGovernance.algo.ts:58","pc":[226,227,228]},{"teal":109,"source":"contracts/CompxGovernance.algo.ts:58","pc":[229]},{"teal":112,"source":"contracts/CompxGovernance.algo.ts:57","pc":[230,231,232]},{"teal":113,"source":"contracts/CompxGovernance.algo.ts:57","pc":[233,234,235]},{"teal":116,"source":"contracts/CompxGovernance.algo.ts:56","pc":[236,237,238]},{"teal":117,"source":"contracts/CompxGovernance.algo.ts:56","pc":[239,240,241]},{"teal":120,"source":"contracts/CompxGovernance.algo.ts:55","pc":[242,243,244]},{"teal":121,"source":"contracts/CompxGovernance.algo.ts:55","pc":[245]},{"teal":122,"source":"contracts/CompxGovernance.algo.ts:55","pc":[246]},{"teal":132,"source":"contracts/CompxGovernance.algo.ts:55","pc":[247,248,249]},{"teal":135,"source":"contracts/CompxGovernance.algo.ts:55","pc":[250]},{"teal":136,"source":"contracts/CompxGovernance.algo.ts:55","pc":[251,252]},{"teal":140,"source":"contracts/CompxGovernance.algo.ts:61","pc":[253,254]},{"teal":141,"source":"contracts/CompxGovernance.algo.ts:61","pc":[255,256]},{"teal":145,"source":"contracts/CompxGovernance.algo.ts:64","pc":[257,258]},{"teal":146,"source":"contracts/CompxGovernance.algo.ts:64","pc":[259]},{"teal":147,"source":"contracts/CompxGovernance.algo.ts:64","pc":[260]},{"teal":148,"source":"contracts/CompxGovernance.algo.ts:64","pc":[261]},{"teal":149,"source":"contracts/CompxGovernance.algo.ts:64","pc":[262,263]},{"teal":153,"source":"contracts/CompxGovernance.algo.ts:65","pc":[264,265]},{"teal":154,"source":"contracts/CompxGovernance.algo.ts:65","pc":[266,267]},{"teal":158,"source":"contracts/CompxGovernance.algo.ts:68","pc":[268,269]},{"teal":159,"source":"contracts/CompxGovernance.algo.ts:68","pc":[270,271]},{"teal":160,"source":"contracts/CompxGovernance.algo.ts:68","pc":[272]},{"teal":161,"source":"contracts/CompxGovernance.algo.ts:68","pc":[273,274]},{"teal":165,"source":"contracts/CompxGovernance.algo.ts:71","pc":[275,276]},{"teal":166,"source":"contracts/CompxGovernance.algo.ts:71","pc":[277]},{"teal":167,"source":"contracts/CompxGovernance.algo.ts:71","pc":[278]},{"teal":168,"source":"contracts/CompxGovernance.algo.ts:71","pc":[279]},{"teal":171,"source":"contracts/CompxGovernance.algo.ts:71","errorMessage":"Only the deployer can create proposals","pc":[280]},{"teal":175,"source":"contracts/CompxGovernance.algo.ts:72","pc":[281]},{"teal":176,"source":"contracts/CompxGovernance.algo.ts:72","pc":[282,283]},{"teal":177,"source":"contracts/CompxGovernance.algo.ts:72","pc":[284]},{"teal":178,"source":"contracts/CompxGovernance.algo.ts:72","pc":[285]},{"teal":179,"source":"contracts/CompxGovernance.algo.ts:72","pc":[286]},{"teal":180,"source":"contracts/CompxGovernance.algo.ts:72","pc":[287]},{"teal":181,"source":"contracts/CompxGovernance.algo.ts:72","pc":[288]},{"teal":182,"source":"contracts/CompxGovernance.algo.ts:72","pc":[289]},{"teal":185,"source":"contracts/CompxGovernance.algo.ts:72","errorMessage":"Proposal already exists","pc":[290]},{"teal":190,"source":"contracts/CompxGovernance.algo.ts:75","pc":[291,292]},{"teal":191,"source":"contracts/CompxGovernance.algo.ts:75","pc":[293,294]},{"teal":192,"source":"contracts/CompxGovernance.algo.ts:75","pc":[295,296,297]},{"teal":193,"source":"contracts/CompxGovernance.algo.ts:75","pc":[298]},{"teal":196,"source":"contracts/CompxGovernance.algo.ts:75","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=PROPOSAL_MBR\"}","pc":[299]},{"teal":209,"source":"contracts/CompxGovernance.algo.ts:78","pc":[300]},{"teal":210,"source":"contracts/CompxGovernance.algo.ts:78","pc":[301,302]},{"teal":211,"source":"contracts/CompxGovernance.algo.ts:78","pc":[303]},{"teal":212,"source":"contracts/CompxGovernance.algo.ts:78","pc":[304]},{"teal":213,"source":"contracts/CompxGovernance.algo.ts:78","pc":[305]},{"teal":214,"source":"contracts/CompxGovernance.algo.ts:78","pc":[306]},{"teal":215,"source":"contracts/CompxGovernance.algo.ts:78","pc":[307]},{"teal":216,"source":"contracts/CompxGovernance.algo.ts:78","pc":[308]},{"teal":217,"source":"contracts/CompxGovernance.algo.ts:78","pc":[309]},{"teal":218,"source":"contracts/CompxGovernance.algo.ts:78","pc":[310,311,312,313]},{"teal":219,"source":"contracts/CompxGovernance.algo.ts:79","pc":[314,315]},{"teal":220,"source":"contracts/CompxGovernance.algo.ts:79","pc":[316]},{"teal":221,"source":"contracts/CompxGovernance.algo.ts:79","pc":[317]},{"teal":222,"source":"contracts/CompxGovernance.algo.ts:79","pc":[318]},{"teal":223,"source":"contracts/CompxGovernance.algo.ts:79","pc":[319,320,321]},{"teal":224,"source":"contracts/CompxGovernance.algo.ts:79","pc":[322]},{"teal":225,"source":"contracts/CompxGovernance.algo.ts:79","pc":[323]},{"teal":226,"source":"contracts/CompxGovernance.algo.ts:79","pc":[324,325,326]},{"teal":227,"source":"contracts/CompxGovernance.algo.ts:80","pc":[327,328]},{"teal":228,"source":"contracts/CompxGovernance.algo.ts:80","pc":[329]},{"teal":229,"source":"contracts/CompxGovernance.algo.ts:80","pc":[330]},{"teal":230,"source":"contracts/CompxGovernance.algo.ts:80","pc":[331]},{"teal":231,"source":"contracts/CompxGovernance.algo.ts:80","pc":[332,333,334]},{"teal":232,"source":"contracts/CompxGovernance.algo.ts:80","pc":[335]},{"teal":233,"source":"contracts/CompxGovernance.algo.ts:80","pc":[336]},{"teal":234,"source":"contracts/CompxGovernance.algo.ts:80","pc":[337,338,339]},{"teal":235,"source":"contracts/CompxGovernance.algo.ts:81","pc":[340,341]},{"teal":236,"source":"contracts/CompxGovernance.algo.ts:81","pc":[342,343,344]},{"teal":237,"source":"contracts/CompxGovernance.algo.ts:82","pc":[345,346]},{"teal":238,"source":"contracts/CompxGovernance.algo.ts:82","pc":[347,348,349]},{"teal":239,"source":"contracts/CompxGovernance.algo.ts:83","pc":[350,351]},{"teal":240,"source":"contracts/CompxGovernance.algo.ts:83","pc":[352,353,354]},{"teal":241,"source":"contracts/CompxGovernance.algo.ts:84","pc":[355,356]},{"teal":242,"source":"contracts/CompxGovernance.algo.ts:84","pc":[357,358,359]},{"teal":243,"source":"contracts/CompxGovernance.algo.ts:85","pc":[360,361]},{"teal":244,"source":"contracts/CompxGovernance.algo.ts:85","pc":[362]},{"teal":245,"source":"contracts/CompxGovernance.algo.ts:85","pc":[363,364,365]},{"teal":246,"source":"contracts/CompxGovernance.algo.ts:86","pc":[366,367]},{"teal":247,"source":"contracts/CompxGovernance.algo.ts:86","pc":[368]},{"teal":248,"source":"contracts/CompxGovernance.algo.ts:86","pc":[369,370,371]},{"teal":249,"source":"contracts/CompxGovernance.algo.ts:78","pc":[372]},{"teal":250,"source":"contracts/CompxGovernance.algo.ts:78","pc":[373]},{"teal":251,"source":"contracts/CompxGovernance.algo.ts:78","pc":[374]},{"teal":255,"source":"contracts/CompxGovernance.algo.ts:89","pc":[375,376]},{"teal":256,"source":"contracts/CompxGovernance.algo.ts:89","pc":[377]},{"teal":257,"source":"contracts/CompxGovernance.algo.ts:89","pc":[378]},{"teal":258,"source":"contracts/CompxGovernance.algo.ts:89","pc":[379]},{"teal":259,"source":"contracts/CompxGovernance.algo.ts:89","pc":[380,381]},{"teal":260,"source":"contracts/CompxGovernance.algo.ts:89","pc":[382]},{"teal":261,"source":"contracts/CompxGovernance.algo.ts:89","pc":[383]},{"teal":262,"source":"contracts/CompxGovernance.algo.ts:55","pc":[384]},{"teal":272,"source":"contracts/CompxGovernance.algo.ts:99","pc":[385,386,387]},{"teal":275,"source":"contracts/CompxGovernance.algo.ts:99","pc":[388]},{"teal":279,"source":"contracts/CompxGovernance.algo.ts:107","pc":[389,390]},{"teal":280,"source":"contracts/CompxGovernance.algo.ts:107","pc":[391]},{"teal":281,"source":"contracts/CompxGovernance.algo.ts:107","pc":[392]},{"teal":282,"source":"contracts/CompxGovernance.algo.ts:107","pc":[393]},{"teal":285,"source":"contracts/CompxGovernance.algo.ts:107","errorMessage":"Only the deployer can add votes to users","pc":[394]},{"teal":290,"source":"contracts/CompxGovernance.algo.ts:109","pc":[395,396]},{"teal":291,"source":"contracts/CompxGovernance.algo.ts:109","pc":[397,398]},{"teal":292,"source":"contracts/CompxGovernance.algo.ts:109","pc":[399,400,401]},{"teal":293,"source":"contracts/CompxGovernance.algo.ts:109","pc":[402]},{"teal":296,"source":"contracts/CompxGovernance.algo.ts:109","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=2_120\"}","pc":[403]},{"teal":300,"source":"contracts/CompxGovernance.algo.ts:111","pc":[404,405]},{"teal":301,"source":"contracts/CompxGovernance.algo.ts:111","pc":[406,407]},{"teal":305,"source":"contracts/CompxGovernance.algo.ts:113","pc":[408]},{"teal":306,"source":"contracts/CompxGovernance.algo.ts:113","pc":[409,410]},{"teal":307,"source":"contracts/CompxGovernance.algo.ts:113","pc":[411]},{"teal":308,"source":"contracts/CompxGovernance.algo.ts:113","pc":[412]},{"teal":311,"source":"contracts/CompxGovernance.algo.ts:113","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[413]},{"teal":312,"source":"contracts/CompxGovernance.algo.ts:113","pc":[414,415]},{"teal":313,"source":"contracts/CompxGovernance.algo.ts:113","pc":[416,417]},{"teal":314,"source":"contracts/CompxGovernance.algo.ts:113","pc":[418,419,420]},{"teal":315,"source":"contracts/CompxGovernance.algo.ts:113","pc":[421]},{"teal":316,"source":"contracts/CompxGovernance.algo.ts:113","pc":[422,423]},{"teal":317,"source":"contracts/CompxGovernance.algo.ts:113","pc":[424]},{"teal":320,"source":"contracts/CompxGovernance.algo.ts:113","errorMessage":"Proposal already expired","pc":[425]},{"teal":327,"source":"contracts/CompxGovernance.algo.ts:117","pc":[426,427]},{"teal":328,"source":"contracts/CompxGovernance.algo.ts:117","pc":[428,429]},{"teal":329,"source":"contracts/CompxGovernance.algo.ts:117","pc":[430,431]},{"teal":330,"source":"contracts/CompxGovernance.algo.ts:117","pc":[432]},{"teal":331,"source":"contracts/CompxGovernance.algo.ts:117","pc":[433]},{"teal":332,"source":"contracts/CompxGovernance.algo.ts:117","pc":[434]},{"teal":333,"source":"contracts/CompxGovernance.algo.ts:117","pc":[435]},{"teal":334,"source":"contracts/CompxGovernance.algo.ts:117","pc":[436]},{"teal":335,"source":"contracts/CompxGovernance.algo.ts:117","pc":[437]},{"teal":336,"source":"contracts/CompxGovernance.algo.ts:117","pc":[438]},{"teal":339,"source":"contracts/CompxGovernance.algo.ts:116","errorMessage":"User already voted on this proposal","pc":[439]},{"teal":343,"source":"contracts/CompxGovernance.algo.ts:122","pc":[440,441]},{"teal":344,"source":"contracts/CompxGovernance.algo.ts:122","pc":[442,443,444]},{"teal":345,"source":"contracts/CompxGovernance.algo.ts:122","pc":[445]},{"teal":348,"source":"contracts/CompxGovernance.algo.ts:122","errorMessage":"User has not opted in to the contract","pc":[446]},{"teal":352,"source":"contracts/CompxGovernance.algo.ts:124","pc":[447]},{"teal":353,"source":"contracts/CompxGovernance.algo.ts:124","pc":[448,449]},{"teal":354,"source":"contracts/CompxGovernance.algo.ts:124","pc":[450]},{"teal":355,"source":"contracts/CompxGovernance.algo.ts:124","pc":[451]},{"teal":358,"source":"contracts/CompxGovernance.algo.ts:124","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[452]},{"teal":359,"source":"contracts/CompxGovernance.algo.ts:124","pc":[453,454]},{"teal":360,"source":"contracts/CompxGovernance.algo.ts:124","pc":[455,456]},{"teal":361,"source":"contracts/CompxGovernance.algo.ts:124","pc":[457,458]},{"teal":362,"source":"contracts/CompxGovernance.algo.ts:124","pc":[459]},{"teal":363,"source":"contracts/CompxGovernance.algo.ts:124","pc":[460,461]},{"teal":364,"source":"contracts/CompxGovernance.algo.ts:124","pc":[462]},{"teal":365,"source":"contracts/CompxGovernance.algo.ts:124","pc":[463]},{"teal":368,"source":"contracts/CompxGovernance.algo.ts:124","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[464]},{"teal":369,"source":"contracts/CompxGovernance.algo.ts:124","pc":[465,466]},{"teal":370,"source":"contracts/CompxGovernance.algo.ts:124","pc":[467,468]},{"teal":371,"source":"contracts/CompxGovernance.algo.ts:124","pc":[469,470,471]},{"teal":372,"source":"contracts/CompxGovernance.algo.ts:124","pc":[472]},{"teal":373,"source":"contracts/CompxGovernance.algo.ts:124","pc":[473]},{"teal":374,"source":"contracts/CompxGovernance.algo.ts:124","pc":[474]},{"teal":375,"source":"contracts/CompxGovernance.algo.ts:124","pc":[475]},{"teal":376,"source":"contracts/CompxGovernance.algo.ts:124","pc":[476]},{"teal":377,"source":"contracts/CompxGovernance.algo.ts:124","pc":[477]},{"teal":378,"source":"contracts/CompxGovernance.algo.ts:124","pc":[478,479]},{"teal":379,"source":"contracts/CompxGovernance.algo.ts:124","pc":[480]},{"teal":380,"source":"contracts/CompxGovernance.algo.ts:124","pc":[481]},{"teal":381,"source":"contracts/CompxGovernance.algo.ts:124","pc":[482]},{"teal":382,"source":"contracts/CompxGovernance.algo.ts:124","pc":[483]},{"teal":383,"source":"contracts/CompxGovernance.algo.ts:124","pc":[484]},{"teal":384,"source":"contracts/CompxGovernance.algo.ts:124","pc":[485]},{"teal":388,"source":"contracts/CompxGovernance.algo.ts:125","pc":[486]},{"teal":389,"source":"contracts/CompxGovernance.algo.ts:125","pc":[487,488]},{"teal":390,"source":"contracts/CompxGovernance.algo.ts:125","pc":[489]},{"teal":391,"source":"contracts/CompxGovernance.algo.ts:125","pc":[490]},{"teal":394,"source":"contracts/CompxGovernance.algo.ts:125","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[491]},{"teal":395,"source":"contracts/CompxGovernance.algo.ts:125","pc":[492,493]},{"teal":396,"source":"contracts/CompxGovernance.algo.ts:125","pc":[494,495]},{"teal":397,"source":"contracts/CompxGovernance.algo.ts:125","pc":[496,497]},{"teal":398,"source":"contracts/CompxGovernance.algo.ts:125","pc":[498]},{"teal":399,"source":"contracts/CompxGovernance.algo.ts:125","pc":[499,500]},{"teal":400,"source":"contracts/CompxGovernance.algo.ts:125","pc":[501]},{"teal":401,"source":"contracts/CompxGovernance.algo.ts:125","pc":[502]},{"teal":404,"source":"contracts/CompxGovernance.algo.ts:125","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[503]},{"teal":405,"source":"contracts/CompxGovernance.algo.ts:125","pc":[504,505]},{"teal":406,"source":"contracts/CompxGovernance.algo.ts:125","pc":[506,507]},{"teal":407,"source":"contracts/CompxGovernance.algo.ts:125","pc":[508,509,510]},{"teal":408,"source":"contracts/CompxGovernance.algo.ts:125","pc":[511]},{"teal":409,"source":"contracts/CompxGovernance.algo.ts:125","pc":[512,513]},{"teal":410,"source":"contracts/CompxGovernance.algo.ts:125","pc":[514]},{"teal":411,"source":"contracts/CompxGovernance.algo.ts:125","pc":[515]},{"teal":412,"source":"contracts/CompxGovernance.algo.ts:125","pc":[516]},{"teal":413,"source":"contracts/CompxGovernance.algo.ts:125","pc":[517]},{"teal":414,"source":"contracts/CompxGovernance.algo.ts:125","pc":[518,519]},{"teal":415,"source":"contracts/CompxGovernance.algo.ts:125","pc":[520]},{"teal":416,"source":"contracts/CompxGovernance.algo.ts:125","pc":[521]},{"teal":417,"source":"contracts/CompxGovernance.algo.ts:125","pc":[522]},{"teal":418,"source":"contracts/CompxGovernance.algo.ts:125","pc":[523]},{"teal":419,"source":"contracts/CompxGovernance.algo.ts:125","pc":[524]},{"teal":420,"source":"contracts/CompxGovernance.algo.ts:125","pc":[525]},{"teal":425,"source":"contracts/CompxGovernance.algo.ts:126","pc":[526,527]},{"teal":426,"source":"contracts/CompxGovernance.algo.ts:126","pc":[528,529,530]},{"teal":431,"source":"contracts/CompxGovernance.algo.ts:127","pc":[531]},{"teal":432,"source":"contracts/CompxGovernance.algo.ts:127","pc":[532,533]},{"teal":433,"source":"contracts/CompxGovernance.algo.ts:127","pc":[534]},{"teal":434,"source":"contracts/CompxGovernance.algo.ts:127","pc":[535]},{"teal":437,"source":"contracts/CompxGovernance.algo.ts:127","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[536]},{"teal":438,"source":"contracts/CompxGovernance.algo.ts:127","pc":[537,538]},{"teal":439,"source":"contracts/CompxGovernance.algo.ts:127","pc":[539,540]},{"teal":440,"source":"contracts/CompxGovernance.algo.ts:127","pc":[541,542]},{"teal":441,"source":"contracts/CompxGovernance.algo.ts:127","pc":[543]},{"teal":442,"source":"contracts/CompxGovernance.algo.ts:127","pc":[544,545]},{"teal":443,"source":"contracts/CompxGovernance.algo.ts:127","pc":[546]},{"teal":444,"source":"contracts/CompxGovernance.algo.ts:127","pc":[547]},{"teal":447,"source":"contracts/CompxGovernance.algo.ts:127","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[548]},{"teal":448,"source":"contracts/CompxGovernance.algo.ts:127","pc":[549,550]},{"teal":449,"source":"contracts/CompxGovernance.algo.ts:127","pc":[551,552]},{"teal":450,"source":"contracts/CompxGovernance.algo.ts:127","pc":[553,554,555]},{"teal":451,"source":"contracts/CompxGovernance.algo.ts:127","pc":[556]},{"teal":452,"source":"contracts/CompxGovernance.algo.ts:127","pc":[557]},{"teal":453,"source":"contracts/CompxGovernance.algo.ts:127","pc":[558]},{"teal":454,"source":"contracts/CompxGovernance.algo.ts:127","pc":[559]},{"teal":455,"source":"contracts/CompxGovernance.algo.ts:127","pc":[560]},{"teal":456,"source":"contracts/CompxGovernance.algo.ts:127","pc":[561]},{"teal":457,"source":"contracts/CompxGovernance.algo.ts:127","pc":[562,563]},{"teal":458,"source":"contracts/CompxGovernance.algo.ts:127","pc":[564]},{"teal":459,"source":"contracts/CompxGovernance.algo.ts:127","pc":[565]},{"teal":460,"source":"contracts/CompxGovernance.algo.ts:127","pc":[566]},{"teal":461,"source":"contracts/CompxGovernance.algo.ts:127","pc":[567]},{"teal":462,"source":"contracts/CompxGovernance.algo.ts:127","pc":[568]},{"teal":463,"source":"contracts/CompxGovernance.algo.ts:127","pc":[569]},{"teal":467,"source":"contracts/CompxGovernance.algo.ts:128","pc":[570]},{"teal":468,"source":"contracts/CompxGovernance.algo.ts:128","pc":[571,572]},{"teal":469,"source":"contracts/CompxGovernance.algo.ts:128","pc":[573]},{"teal":470,"source":"contracts/CompxGovernance.algo.ts:128","pc":[574]},{"teal":473,"source":"contracts/CompxGovernance.algo.ts:128","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[575]},{"teal":474,"source":"contracts/CompxGovernance.algo.ts:128","pc":[576,577]},{"teal":475,"source":"contracts/CompxGovernance.algo.ts:128","pc":[578,579]},{"teal":476,"source":"contracts/CompxGovernance.algo.ts:128","pc":[580,581]},{"teal":477,"source":"contracts/CompxGovernance.algo.ts:128","pc":[582]},{"teal":478,"source":"contracts/CompxGovernance.algo.ts:128","pc":[583,584]},{"teal":479,"source":"contracts/CompxGovernance.algo.ts:128","pc":[585]},{"teal":480,"source":"contracts/CompxGovernance.algo.ts:128","pc":[586]},{"teal":483,"source":"contracts/CompxGovernance.algo.ts:128","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[587]},{"teal":484,"source":"contracts/CompxGovernance.algo.ts:128","pc":[588,589]},{"teal":485,"source":"contracts/CompxGovernance.algo.ts:128","pc":[590,591]},{"teal":486,"source":"contracts/CompxGovernance.algo.ts:128","pc":[592,593,594]},{"teal":487,"source":"contracts/CompxGovernance.algo.ts:128","pc":[595]},{"teal":488,"source":"contracts/CompxGovernance.algo.ts:128","pc":[596,597]},{"teal":489,"source":"contracts/CompxGovernance.algo.ts:128","pc":[598]},{"teal":490,"source":"contracts/CompxGovernance.algo.ts:128","pc":[599]},{"teal":491,"source":"contracts/CompxGovernance.algo.ts:128","pc":[600]},{"teal":492,"source":"contracts/CompxGovernance.algo.ts:128","pc":[601]},{"teal":493,"source":"contracts/CompxGovernance.algo.ts:128","pc":[602,603]},{"teal":494,"source":"contracts/CompxGovernance.algo.ts:128","pc":[604]},{"teal":495,"source":"contracts/CompxGovernance.algo.ts:128","pc":[605]},{"teal":496,"source":"contracts/CompxGovernance.algo.ts:128","pc":[606]},{"teal":497,"source":"contracts/CompxGovernance.algo.ts:128","pc":[607]},{"teal":498,"source":"contracts/CompxGovernance.algo.ts:128","pc":[608]},{"teal":499,"source":"contracts/CompxGovernance.algo.ts:128","pc":[609]},{"teal":504,"source":"contracts/CompxGovernance.algo.ts:130","pc":[610,611]},{"teal":505,"source":"contracts/CompxGovernance.algo.ts:130","pc":[612,613]},{"teal":506,"source":"contracts/CompxGovernance.algo.ts:130","pc":[614]},{"teal":507,"source":"contracts/CompxGovernance.algo.ts:130","pc":[615]},{"teal":508,"source":"contracts/CompxGovernance.algo.ts:130","pc":[616]},{"teal":509,"source":"contracts/CompxGovernance.algo.ts:130","pc":[617,618]},{"teal":510,"source":"contracts/CompxGovernance.algo.ts:130","pc":[619,620]},{"teal":511,"source":"contracts/CompxGovernance.algo.ts:130","pc":[621,622]},{"teal":512,"source":"contracts/CompxGovernance.algo.ts:130","pc":[623]},{"teal":516,"source":"contracts/CompxGovernance.algo.ts:132","pc":[624,625]},{"teal":517,"source":"contracts/CompxGovernance.algo.ts:132","pc":[626,627]},{"teal":518,"source":"contracts/CompxGovernance.algo.ts:132","pc":[628,629]},{"teal":519,"source":"contracts/CompxGovernance.algo.ts:132","pc":[630]},{"teal":520,"source":"contracts/CompxGovernance.algo.ts:132","pc":[631]},{"teal":521,"source":"contracts/CompxGovernance.algo.ts:132","pc":[632,633]},{"teal":522,"source":"contracts/CompxGovernance.algo.ts:132","pc":[634]},{"teal":523,"source":"contracts/CompxGovernance.algo.ts:132","pc":[635]},{"teal":527,"source":"contracts/CompxGovernance.algo.ts:134","pc":[636,637]},{"teal":528,"source":"contracts/CompxGovernance.algo.ts:134","pc":[638]},{"teal":529,"source":"contracts/CompxGovernance.algo.ts:134","pc":[639]},{"teal":530,"source":"contracts/CompxGovernance.algo.ts:134","pc":[640]},{"teal":531,"source":"contracts/CompxGovernance.algo.ts:134","pc":[641,642]},{"teal":532,"source":"contracts/CompxGovernance.algo.ts:134","pc":[643]},{"teal":533,"source":"contracts/CompxGovernance.algo.ts:134","pc":[644]},{"teal":534,"source":"contracts/CompxGovernance.algo.ts:99","pc":[645]},{"teal":546,"source":"contracts/CompxGovernance.algo.ts:147","pc":[646,647,648]},{"teal":549,"source":"contracts/CompxGovernance.algo.ts:147","pc":[649]},{"teal":553,"source":"contracts/CompxGovernance.algo.ts:151","pc":[650,651]},{"teal":554,"source":"contracts/CompxGovernance.algo.ts:151","pc":[652]},{"teal":555,"source":"contracts/CompxGovernance.algo.ts:151","pc":[653]},{"teal":556,"source":"contracts/CompxGovernance.algo.ts:151","pc":[654,655]},{"teal":560,"source":"contracts/CompxGovernance.algo.ts:152","pc":[656,657]},{"teal":561,"source":"contracts/CompxGovernance.algo.ts:152","pc":[658]},{"teal":562,"source":"contracts/CompxGovernance.algo.ts:152","pc":[659,660]},{"teal":563,"source":"contracts/CompxGovernance.algo.ts:152","pc":[661]},{"teal":567,"source":"contracts/CompxGovernance.algo.ts:154","pc":[662,663]},{"teal":568,"source":"contracts/CompxGovernance.algo.ts:154","pc":[664,665]},{"teal":569,"source":"contracts/CompxGovernance.algo.ts:154","pc":[666,667]},{"teal":570,"source":"contracts/CompxGovernance.algo.ts:154","pc":[668]},{"teal":571,"source":"contracts/CompxGovernance.algo.ts:154","pc":[669]},{"teal":572,"source":"contracts/CompxGovernance.algo.ts:154","pc":[670,671]},{"teal":573,"source":"contracts/CompxGovernance.algo.ts:154","pc":[672]},{"teal":574,"source":"contracts/CompxGovernance.algo.ts:154","pc":[673]},{"teal":575,"source":"contracts/CompxGovernance.algo.ts:147","pc":[674]},{"teal":580,"source":"contracts/CompxGovernance.algo.ts:169","pc":[675,676]},{"teal":581,"source":"contracts/CompxGovernance.algo.ts:169","pc":[677]},{"teal":582,"source":"contracts/CompxGovernance.algo.ts:169","pc":[678]},{"teal":583,"source":"contracts/CompxGovernance.algo.ts:169","pc":[679]},{"teal":584,"source":"contracts/CompxGovernance.algo.ts:169","pc":[680,681]},{"teal":585,"source":"contracts/CompxGovernance.algo.ts:169","pc":[682]},{"teal":586,"source":"contracts/CompxGovernance.algo.ts:169","pc":[683]},{"teal":589,"source":"contracts/CompxGovernance.algo.ts:169","errorMessage":"argument 0 (mbrTxn) for makeProposalVote must be a pay transaction","pc":[684]},{"teal":592,"source":"contracts/CompxGovernance.algo.ts:168","pc":[685,686,687]},{"teal":593,"source":"contracts/CompxGovernance.algo.ts:168","pc":[688]},{"teal":596,"source":"contracts/CompxGovernance.algo.ts:167","pc":[689,690,691]},{"teal":597,"source":"contracts/CompxGovernance.algo.ts:167","pc":[692]},{"teal":598,"source":"contracts/CompxGovernance.algo.ts:167","pc":[693]},{"teal":599,"source":"contracts/CompxGovernance.algo.ts:167","pc":[694]},{"teal":600,"source":"contracts/CompxGovernance.algo.ts:167","pc":[695]},{"teal":603,"source":"contracts/CompxGovernance.algo.ts:167","errorMessage":"argument 2 (voterAddress) for makeProposalVote must be a address","pc":[696]},{"teal":606,"source":"contracts/CompxGovernance.algo.ts:166","pc":[697,698,699]},{"teal":607,"source":"contracts/CompxGovernance.algo.ts:166","pc":[700]},{"teal":608,"source":"contracts/CompxGovernance.algo.ts:166","pc":[701]},{"teal":609,"source":"contracts/CompxGovernance.algo.ts:166","pc":[702]},{"teal":610,"source":"contracts/CompxGovernance.algo.ts:166","pc":[703]},{"teal":613,"source":"contracts/CompxGovernance.algo.ts:166","errorMessage":"argument 3 (inFavor) for makeProposalVote must be a bool","pc":[704]},{"teal":614,"source":"contracts/CompxGovernance.algo.ts:166","pc":[705]},{"teal":615,"source":"contracts/CompxGovernance.algo.ts:166","pc":[706]},{"teal":618,"source":"contracts/CompxGovernance.algo.ts:165","pc":[707,708,709]},{"teal":619,"source":"contracts/CompxGovernance.algo.ts:165","pc":[710]},{"teal":620,"source":"contracts/CompxGovernance.algo.ts:165","pc":[711]},{"teal":621,"source":"contracts/CompxGovernance.algo.ts:165","pc":[712]},{"teal":622,"source":"contracts/CompxGovernance.algo.ts:165","pc":[713]},{"teal":625,"source":"contracts/CompxGovernance.algo.ts:165","errorMessage":"argument 4 (proposalId) for makeProposalVote must be a (uint64)","pc":[714]},{"teal":628,"source":"contracts/CompxGovernance.algo.ts:164","pc":[715,716,717]},{"teal":629,"source":"contracts/CompxGovernance.algo.ts:164","pc":[718]},{"teal":630,"source":"contracts/CompxGovernance.algo.ts:164","pc":[719]},{"teal":640,"source":"contracts/CompxGovernance.algo.ts:164","pc":[720,721,722]},{"teal":644,"source":"contracts/CompxGovernance.algo.ts:171","pc":[723,724]},{"teal":645,"source":"contracts/CompxGovernance.algo.ts:171","pc":[725]},{"teal":646,"source":"contracts/CompxGovernance.algo.ts:171","pc":[726]},{"teal":647,"source":"contracts/CompxGovernance.algo.ts:171","pc":[727]},{"teal":650,"source":"contracts/CompxGovernance.algo.ts:171","errorMessage":"Only the deployer can add votes to users","pc":[728]},{"teal":655,"source":"contracts/CompxGovernance.algo.ts:174","pc":[729,730]},{"teal":656,"source":"contracts/CompxGovernance.algo.ts:174","pc":[731,732]},{"teal":657,"source":"contracts/CompxGovernance.algo.ts:174","pc":[733,734,735]},{"teal":658,"source":"contracts/CompxGovernance.algo.ts:174","pc":[736]},{"teal":661,"source":"contracts/CompxGovernance.algo.ts:174","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=VOTE_MBR\"}","pc":[737]},{"teal":665,"source":"contracts/CompxGovernance.algo.ts:177","pc":[738,739]},{"teal":666,"source":"contracts/CompxGovernance.algo.ts:177","pc":[740,741]},{"teal":667,"source":"contracts/CompxGovernance.algo.ts:177","pc":[742,743,744]},{"teal":671,"source":"contracts/CompxGovernance.algo.ts:178","pc":[745,746]},{"teal":672,"source":"contracts/CompxGovernance.algo.ts:178","pc":[747,748]},{"teal":673,"source":"contracts/CompxGovernance.algo.ts:178","pc":[749,750]},{"teal":674,"source":"contracts/CompxGovernance.algo.ts:178","pc":[751]},{"teal":675,"source":"contracts/CompxGovernance.algo.ts:178","pc":[752]},{"teal":676,"source":"contracts/CompxGovernance.algo.ts:178","pc":[753,754]},{"teal":677,"source":"contracts/CompxGovernance.algo.ts:178","pc":[755,756]},{"teal":678,"source":"contracts/CompxGovernance.algo.ts:178","pc":[757,758,759]},{"teal":679,"source":"contracts/CompxGovernance.algo.ts:164","pc":[760]},{"teal":684,"source":"contracts/CompxGovernance.algo.ts:186","pc":[761,762,763]},{"teal":685,"source":"contracts/CompxGovernance.algo.ts:186","pc":[764]},{"teal":688,"source":"contracts/CompxGovernance.algo.ts:186","pc":[765,766,767]},{"teal":689,"source":"contracts/CompxGovernance.algo.ts:186","pc":[768]},{"teal":690,"source":"contracts/CompxGovernance.algo.ts:186","pc":[769]},{"teal":691,"source":"contracts/CompxGovernance.algo.ts:186","pc":[770]},{"teal":692,"source":"contracts/CompxGovernance.algo.ts:186","pc":[771]},{"teal":695,"source":"contracts/CompxGovernance.algo.ts:186","errorMessage":"argument 1 (userAddress) for slashUserVotingPower must be a address","pc":[772]},{"teal":698,"source":"contracts/CompxGovernance.algo.ts:186","pc":[773,774,775]},{"teal":699,"source":"contracts/CompxGovernance.algo.ts:186","pc":[776]},{"teal":700,"source":"contracts/CompxGovernance.algo.ts:186","pc":[777]},{"teal":708,"source":"contracts/CompxGovernance.algo.ts:186","pc":[778,779,780]},{"teal":712,"source":"contracts/CompxGovernance.algo.ts:187","pc":[781,782]},{"teal":713,"source":"contracts/CompxGovernance.algo.ts:187","pc":[783]},{"teal":714,"source":"contracts/CompxGovernance.algo.ts:187","pc":[784]},{"teal":715,"source":"contracts/CompxGovernance.algo.ts:187","pc":[785]},{"teal":718,"source":"contracts/CompxGovernance.algo.ts:187","errorMessage":"Only the deployer can slash user contribution","pc":[786]},{"teal":722,"source":"contracts/CompxGovernance.algo.ts:188","pc":[787,788]},{"teal":723,"source":"contracts/CompxGovernance.algo.ts:188","pc":[789]},{"teal":724,"source":"contracts/CompxGovernance.algo.ts:188","pc":[790]},{"teal":725,"source":"contracts/CompxGovernance.algo.ts:188","pc":[791,792]},{"teal":726,"source":"contracts/CompxGovernance.algo.ts:188","pc":[793]},{"teal":729,"source":"contracts/CompxGovernance.algo.ts:188","errorMessage":"User does not have enough voting power","pc":[794]},{"teal":733,"source":"contracts/CompxGovernance.algo.ts:189","pc":[795,796]},{"teal":734,"source":"contracts/CompxGovernance.algo.ts:189","pc":[797]},{"teal":735,"source":"contracts/CompxGovernance.algo.ts:189","pc":[798]},{"teal":736,"source":"contracts/CompxGovernance.algo.ts:189","pc":[799,800]},{"teal":737,"source":"contracts/CompxGovernance.algo.ts:189","pc":[801]},{"teal":738,"source":"contracts/CompxGovernance.algo.ts:189","pc":[802,803]},{"teal":739,"source":"contracts/CompxGovernance.algo.ts:189","pc":[804]},{"teal":740,"source":"contracts/CompxGovernance.algo.ts:189","pc":[805,806]},{"teal":741,"source":"contracts/CompxGovernance.algo.ts:189","pc":[807]},{"teal":742,"source":"contracts/CompxGovernance.algo.ts:186","pc":[808]},{"teal":747,"source":"contracts/CompxGovernance.algo.ts:197","pc":[809,810,811,812,813,814]},{"teal":750,"source":"contracts/CompxGovernance.algo.ts:197","pc":[815,816,817]},{"teal":751,"source":"contracts/CompxGovernance.algo.ts:197","pc":[818]},{"teal":752,"source":"contracts/CompxGovernance.algo.ts:197","pc":[819]},{"teal":753,"source":"contracts/CompxGovernance.algo.ts:197","pc":[820]},{"teal":754,"source":"contracts/CompxGovernance.algo.ts:197","pc":[821]},{"teal":757,"source":"contracts/CompxGovernance.algo.ts:197","errorMessage":"argument 0 (proposalId) for getProposalsById must be a (uint64)","pc":[822]},{"teal":760,"source":"contracts/CompxGovernance.algo.ts:197","pc":[823,824,825]},{"teal":761,"source":"contracts/CompxGovernance.algo.ts:197","pc":[826]},{"teal":762,"source":"contracts/CompxGovernance.algo.ts:197","pc":[827]},{"teal":763,"source":"contracts/CompxGovernance.algo.ts:197","pc":[828]},{"teal":764,"source":"contracts/CompxGovernance.algo.ts:197","pc":[829]},{"teal":772,"source":"contracts/CompxGovernance.algo.ts:197","pc":[830,831,832]},{"teal":776,"source":"contracts/CompxGovernance.algo.ts:198","pc":[833]},{"teal":777,"source":"contracts/CompxGovernance.algo.ts:198","pc":[834,835]},{"teal":778,"source":"contracts/CompxGovernance.algo.ts:198","pc":[836]},{"teal":779,"source":"contracts/CompxGovernance.algo.ts:198","pc":[837]},{"teal":782,"source":"contracts/CompxGovernance.algo.ts:198","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[838]},{"teal":783,"source":"contracts/CompxGovernance.algo.ts:197","pc":[839]},{"teal":786,"source":"contracts/CompxGovernance.algo.ts:5","pc":[840,841,842,843,844,845]},{"teal":787,"source":"contracts/CompxGovernance.algo.ts:5","pc":[846,847,848]},{"teal":788,"source":"contracts/CompxGovernance.algo.ts:5","pc":[849,850,851,852]},{"teal":791,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[853]},{"teal":794,"source":"contracts/CompxGovernance.algo.ts:5","pc":[854,855,856,857,858,859]},{"teal":795,"source":"contracts/CompxGovernance.algo.ts:5","pc":[860,861,862,863,864,865]},{"teal":796,"source":"contracts/CompxGovernance.algo.ts:5","pc":[866,867,868,869,870,871]},{"teal":797,"source":"contracts/CompxGovernance.algo.ts:5","pc":[872,873,874,875,876,877]},{"teal":798,"source":"contracts/CompxGovernance.algo.ts:5","pc":[878,879,880]},{"teal":799,"source":"contracts/CompxGovernance.algo.ts:5","pc":[881,882,883,884,885,886,887,888,889,890]},{"teal":802,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[891]},{"teal":805,"source":"contracts/CompxGovernance.algo.ts:5","pc":[892,893,894,895,896,897]},{"teal":806,"source":"contracts/CompxGovernance.algo.ts:5","pc":[898,899,900]},{"teal":807,"source":"contracts/CompxGovernance.algo.ts:5","pc":[901,902,903,904]},{"teal":810,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call OptIn","pc":[905]},{"teal":813,"source":"contracts/CompxGovernance.algo.ts:5","pc":[906,907,908]},{"teal":814,"source":"contracts/CompxGovernance.algo.ts:5","pc":[909,910]},{"teal":815,"source":"contracts/CompxGovernance.algo.ts:5","pc":[911,912]},{"teal":816,"source":"contracts/CompxGovernance.algo.ts:5","pc":[913]},{"teal":817,"source":"contracts/CompxGovernance.algo.ts:5","pc":[914,915]},{"teal":818,"source":"contracts/CompxGovernance.algo.ts:5","pc":[916,917]},{"teal":819,"source":"contracts/CompxGovernance.algo.ts:5","pc":[918]},{"teal":822,"source":"contracts/CompxGovernance.algo.ts:5","pc":[919,920,921]},{"teal":823,"source":"contracts/CompxGovernance.algo.ts:5","pc":[922,923]},{"teal":824,"source":"contracts/CompxGovernance.algo.ts:5","pc":[924,925]},{"teal":825,"source":"contracts/CompxGovernance.algo.ts:5","pc":[926]},{"teal":826,"source":"contracts/CompxGovernance.algo.ts:5","pc":[927,928]},{"teal":827,"source":"contracts/CompxGovernance.algo.ts:5","pc":[929,930]},{"teal":828,"source":"contracts/CompxGovernance.algo.ts:5","pc":[931]},{"teal":829,"source":"contracts/CompxGovernance.algo.ts:5","pc":[932]},{"teal":830,"source":"contracts/CompxGovernance.algo.ts:5","pc":[933,934]},{"teal":831,"source":"contracts/CompxGovernance.algo.ts:5","pc":[935]},{"teal":832,"source":"contracts/CompxGovernance.algo.ts:5","pc":[936]},{"teal":833,"source":"contracts/CompxGovernance.algo.ts:5","pc":[937]},{"teal":834,"source":"contracts/CompxGovernance.algo.ts:5","pc":[938,939,940]},{"teal":835,"source":"contracts/CompxGovernance.algo.ts:5","pc":[941,942]},{"teal":836,"source":"contracts/CompxGovernance.algo.ts:5","pc":[943,944]},{"teal":837,"source":"contracts/CompxGovernance.algo.ts:5","pc":[945]},{"teal":838,"source":"contracts/CompxGovernance.algo.ts:5","pc":[946]},{"teal":839,"source":"contracts/CompxGovernance.algo.ts:5","pc":[947,948]},{"teal":840,"source":"contracts/CompxGovernance.algo.ts:5","pc":[949,950]},{"teal":841,"source":"contracts/CompxGovernance.algo.ts:5","pc":[951,952]},{"teal":842,"source":"contracts/CompxGovernance.algo.ts:5","pc":[953,954]},{"teal":843,"source":"contracts/CompxGovernance.algo.ts:5","pc":[955]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAIICYKAl9wABl1c2VyX2N1cnJlbnRfdm90aW5nX3Bvd2VyEGRlcGxveWVyX2FkZHJlc3MPdG90YWxfcHJvcG9zYWxzCAAAAAAAAAAAGnRvdGFsX2N1cnJlbnRfdm90aW5nX3Bvd2VyCnVzZXJfdm90ZXMLdG90YWxfdm90ZXMCX3YxGBSBBgsxGQiNDAKtAtMAAAAAAAAAAAKfAAAAAAAAAAAAAACIAAIiQ4oAACsxAGcnBCNnJwYjZ4mIAAIiQ4oAACkxAIwAiwAnByNmiwAqI2aJMRYiCUk4ECISRDYaAxc2GgJXAgA2GgFXAgCIAAIiQ4oEAClHAzEAjAAnBGQiCIwBMgeMAosCi/0IjAOLACtkEkQoiwEWUL1MSBREi/w4CIH3IA9EKIsBFlBJvEgpKYACADSL/0kVFlcGAkxQiAJQi/5JFRZXBgJMUIgCQycFiAIxJwWIAiwnBYgCJycFiAIiiwIWiAIciwMWiAIWSFC/JwRkIggnBExniYoFACkxACtkEkSL+zgIgcgQD0QyB4wAKIv+UL5ENf80/1csCBeLAA9EJwmL/ov/UFC9TEgjEkSL/zYyAGFEKIv+UL5ENf80/4EEKIv+UL5ENf80/1cECBciCBZdKIv+UEm8SEy/KIv+UL5ENf80/4EUKIv+UL5ENf80/1cUCBeL/QgWXSiL/lBJvEhMv4v8QQBPKIv+UL5ENf80/4EMKIv+UL5ENf80/1cMCBciCBZdKIv+UEm8SEy/KIv+UL5ENf80/4EcKIv+UL5ENf80/1ccCBeL/QgWXSiL/lBJvEhMv4v/JwdiIgiL/ycHTwJmJwmL/ov/UFCLABa/JwhkIggnCExniYoCACmL/ypijACL/yqL/mYnBov+JwZkCIsACWeJMRYiCUk4ECISRDYaBBc2GgNJFSUSRDYaAkkVIhJEI1M2GgFJFSQSRIgAAiJDigUAMQArZBJEi/s4CIHgEQ9Ei/yL/Yj/nYv7i/6L/Spii/+L/Yj+iYk2GgIXNhoBSRUlEkSIAAIiQ4oCADEAK2QSRIv/KmKL/g9Ei/8qYov+CYv/Kk8CZomABBUffHU2GgFJFSQSRIgABFCwIkOKAQEoi/9QvkSJgAS4RHs2NhoAjgH9VQCABIryx8+ABJjy/giABF80gayABLUUKeI2GgCOBP1d/yj/fv+uAIAEAaOj/zYaAI4B/TYAigQDi/yL/1CL/Yv+iYoEA4v8i/5QjPyL/0kVi/4XCBZXBgKM/ov9TFCM/Yv8i/2L/ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalTitle: string,
  proposalDescription: string,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalTotalPower: bigint,
  proposalYesPower: bigint,
  createdAtTimestamp: bigint,
  expiryTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type ProposalIdType = {
  nonce: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalIdType to the struct representation
 */
export function ProposalIdTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalIdType, APP_SPEC.structs) as ProposalIdType
}

export type ProposalVoteDataType = {
  voteTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalVoteDataType to the struct representation
 */
export function ProposalVoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteDataType, APP_SPEC.structs) as ProposalVoteDataType
}

export type ProposalVoteIdType = {
  proposalId: {
    nonce: bigint
  },
  voterAddress: string
}


/**
 * Converts the ABI tuple representation of a ProposalVoteIdType to the struct representation
 */
export function ProposalVoteIdTypeFromTuple(abiTuple: [[bigint], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteIdType, APP_SPEC.structs) as ProposalVoteIdType
}

/**
 * The argument types for the CompxGovernance contract
 */
export type CompxGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optInToApplication()void': Record<string, never>
    'createNewProposal(string,string,uint64,pay)void': {
      proposalTitle: string
      proposalDescription: string
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'makeProposalVote((uint64),bool,address,uint64,pay)void': {
      /**
       * The id of the proposal to be voted on
       */
      proposalId: ProposalIdType
      /**
       * If the vote is a yes or no vote
       */
      inFavor: boolean
      /**
       * The address for the voter - Meant for v1.0 while deployer "server" will be responsible to execute
       */
      voterAddress: string
      /**
       * The voting power of the voter
       */
      votingPower: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'slashUserVotingPower(address,uint64)void': {
      /**
       * The address of the user to get its contribution slashed
       */
      userAddress: string
      /**
       * The amount to be slashed
       */
      amount: bigint | number
    }
    'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * used to define state of proposals to return
       */
      proposalId: ProposalIdType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optInToApplication()void': []
    'createNewProposal(string,string,uint64,pay)void': [proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'makeProposalVote((uint64),bool,address,uint64,pay)void': [proposalId: ProposalIdType, inFavor: boolean, voterAddress: string, votingPower: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'slashUserVotingPower(address,uint64)void': [userAddress: string, amount: bigint | number]
    'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: ProposalIdType]
  }
}

/**
 * The return type for each method
 */
export type CompxGovernanceReturns = {
  'createApplication()void': void
  'optInToApplication()void': void
  'createNewProposal(string,string,uint64,pay)void': void
  'makeProposalVote((uint64),bool,address,uint64,pay)void': void
  'slashUserVotingPower(address,uint64)void': void
  'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the CompxGovernance smart contract.
 */
export type CompxGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CompxGovernanceArgs['obj']['createApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['createApplication()void']
      returns: CompxGovernanceReturns['createApplication()void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: CompxGovernanceArgs['obj']['optInToApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['optInToApplication()void']
      returns: CompxGovernanceReturns['optInToApplication()void']
    }>
    & Record<'createNewProposal(string,string,uint64,pay)void' | 'createNewProposal', {
      argsObj: CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']
      returns: CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void']
    }>
    & Record<'makeProposalVote((uint64),bool,address,uint64,pay)void' | 'makeProposalVote', {
      argsObj: CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']
      returns: CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void']
    }>
    & Record<'slashUserVotingPower(address,uint64)void' | 'slashUserVotingPower', {
      argsObj: CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']
      returns: CompxGovernanceReturns['slashUserVotingPower(address,uint64)void']
    }>
    & Record<'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposalsById', {
      argsObj: CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * ProposalDataType Returns the proposal by id
       */
      returns: CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        deployerAddress: string
        totalProposals: bigint
        totalVotes: bigint
        totalCurrentVotingPower: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userCurrentVotingPower: bigint
        userVotes: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<ProposalIdType, ProposalDataType>
        votes: Map<ProposalVoteIdType, ProposalVoteDataType>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CompxGovernanceSignatures = keyof CompxGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CompxGovernanceNonVoidMethodSignatures = keyof CompxGovernanceTypes['methods'] extends infer T ? T extends keyof CompxGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CompxGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CompxGovernanceTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CompxGovernanceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CompxGovernanceCreateCallParams =
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CompxGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CompxGovernanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CompxGovernance smart contract
 */
export abstract class CompxGovernanceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CompxGovernanceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CompxGovernanceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CompxGovernance smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the CompxGovernance smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createNewProposal(string,string,uint64,pay)void ABI method
   *
   * Create a new proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProposal(string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the makeProposalVote((uint64),bool,address,uint64,pay)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeProposalVote((uint64),bool,address,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.inFavor, params.args.voterAddress, params.args.votingPower, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the slashUserVotingPower(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slashUserVotingPower(params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slashUserVotingPower(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CompxGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CompxGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CompxGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CompxGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CompxGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CompxGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CompxGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CompxGovernanceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CompxGovernanceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CompxGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CompxGovernanceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CompxGovernanceReturns['createApplication()void']) }, appClient: new CompxGovernanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CompxGovernance smart contract
 */
export class CompxGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CompxGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CompxGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CompxGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CompxGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    slashUserVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    slashUserVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProposal: async (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.createNewProposal(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeProposalVote: async (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.makeProposalVote(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    slashUserVotingPower: async (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['slashUserVotingPower(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: ProposalDataType Returns the proposal by id
     */
    getProposalsById: async (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.getProposalsById(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CompxGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CompxGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CompxGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          deployerAddress: result.deployer_address,
          totalProposals: result.total_proposals,
          totalVotes: result.total_votes,
          totalCurrentVotingPower: result.total_current_voting_power,
        }
      },
      /**
       * Get the current value of the deployer_address key in global state
       */
      deployerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("deployer_address")) as string | undefined },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the total_votes key in global state
       */
      totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_votes")) as bigint | undefined },
      /**
       * Get the current value of the total_current_voting_power key in global state
       */
      totalCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_current_voting_power")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CompxGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userCurrentVotingPower: result.user_current_voting_power,
            userVotes: result.user_votes,
          }
        },
        /**
         * Get the current value of the user_current_voting_power key in local state
         */
        userCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_current_voting_power")) as bigint | undefined },
        /**
         * Get the current value of the user_votes key in local state
         */
        userVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_votes")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current CompxGovernance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<ProposalIdType, ProposalDataType>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<ProposalIdType, ProposalDataType> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: ProposalIdType): Promise<ProposalDataType | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalDataType | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<ProposalVoteIdType, ProposalVoteDataType>> => { return (await this.appClient.state.box.getMap("votes")) as Map<ProposalVoteIdType, ProposalVoteDataType> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: ProposalVoteIdType): Promise<ProposalVoteDataType | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as ProposalVoteDataType | undefined },
      },
    },
  }

  public newGroup(): CompxGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createNewProposal(string,string,uint64,pay)void method call against the CompxGovernance contract
       */
      createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeProposalVote((uint64),bool,address,uint64,pay)void method call against the CompxGovernance contract
       */
      makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeProposalVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slashUserVotingPower(address,uint64)void method call against the CompxGovernance contract
       */
      slashUserVotingPower(params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slashUserVotingPower(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) method call against the CompxGovernance contract
       */
      getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalsById(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CompxGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CompxGovernanceComposer
  }
}
export type CompxGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewProposal(string,string,uint64,pay)void ABI method.
   *
   * Create a new proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProposal(params?: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeProposalVote((uint64),bool,address,uint64,pay)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeProposalVote(params?: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void'] | undefined]>

  /**
   * Calls the slashUserVotingPower(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashUserVotingPower(params?: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['slashUserVotingPower(address,uint64)void'] | undefined]>

  /**
   * Calls the getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalsById(params?: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompxGovernance smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CompxGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CompxGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CompxGovernanceComposerResults<TReturns>>
}
export type CompxGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

