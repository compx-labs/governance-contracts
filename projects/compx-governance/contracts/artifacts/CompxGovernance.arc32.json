{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "createNewProposal(uint64,string,string,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeProposalVote((uint64),bool,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "slashUserContribution(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "user_current_voting_power": {
          "type": "uint64",
          "key": "user_current_voting_power"
        },
        "user_contribution": {
          "type": "uint64",
          "key": "user_contribution"
        },
        "user_votes": {
          "type": "uint64",
          "key": "user_votes"
        },
        "user_special_votes": {
          "type": "uint64",
          "key": "user_special_votes"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "deployer_address": {
          "type": "bytes",
          "key": "deployer_address"
        },
        "total_proposals": {
          "type": "uint64",
          "key": "total_proposals"
        },
        "total_votes": {
          "type": "uint64",
          "key": "total_votes"
        },
        "total_current_voting_power": {
          "type": "uint64",
          "key": "total_current_voting_power"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 4
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "CompxGovernance",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "desc": "OPT-IN to the application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createNewProposal",
        "desc": "Create a new proposal",
        "args": [
          {
            "name": "proposalType",
            "type": "uint64",
            "desc": "Type of the proposal - can be reg or pool"
          },
          {
            "name": "proposalTitle",
            "type": "string",
            "desc": "Title of the proposal"
          },
          {
            "name": "proposalDescription",
            "type": "string",
            "desc": "Description of the proposal"
          },
          {
            "name": "expiresIn",
            "type": "uint64",
            "desc": "Time in seconds for the proposal to expire"
          },
          {
            "name": "mbrTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeProposalVote",
        "desc": "Add one to the user contribution once it votes on a pool proposal",
        "args": [
          {
            "name": "proposalId",
            "type": "(uint64)",
            "desc": "The id of the proposal to be voted on"
          },
          {
            "name": "inFavor",
            "type": "bool",
            "desc": "If the vote is a yes or no vote"
          },
          {
            "name": "voterAddress",
            "type": "address",
            "desc": "The address for the voter - Meant for v1.0 while deployer \"server\" will be responsible to execute"
          },
          {
            "name": "votingPower",
            "type": "uint64",
            "desc": "The voting power of the voter"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "slashUserContribution",
        "desc": "Add one to the user contribution once it votes on a pool proposal",
        "args": [
          {
            "name": "userAddress",
            "type": "address",
            "desc": "The address of the user to get its contribution slashed"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount to be slashed"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProposalsById",
        "args": [
          {
            "name": "proposalId",
            "type": "(uint64)",
            "desc": "used to define state of proposals to return"
          }
        ],
        "returns": {
          "type": "(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)",
          "desc": "ProposalDataType Returns the proposal by id"
        }
      }
    ]
  }
}