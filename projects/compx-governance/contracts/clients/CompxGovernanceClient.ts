/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CompxGovernance","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToApplication","desc":"OPT-IN to the application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]}},{"name":"createNewProposal","desc":"Create a new proposal","args":[{"name":"proposalType","type":"uint64","desc":"Type of the proposal - can be reg or pool"},{"name":"proposalTitle","type":"string","desc":"Title of the proposal"},{"name":"proposalDescription","type":"string","desc":"Description of the proposal"},{"name":"expiresIn","type":"uint64","desc":"Time in seconds for the proposal to expire"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"makeProposalVote","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"proposalId","type":"(uint64)","desc":"The id of the proposal to be voted on","struct":"ProposalIdType"},{"name":"inFavor","type":"bool","desc":"If the vote is a yes or no vote"},{"name":"voterAddress","type":"address","desc":"The address for the voter - Meant for v1.0 while deployer \"server\" will be responsible to execute"},{"name":"votingPower","type":"uint64","desc":"The voting power of the voter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"slashUserContribution","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"The address of the user to get its contribution slashed"},{"name":"amount","type":"uint64","desc":"The amount to be slashed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProposalsById","args":[{"name":"proposalId","type":"(uint64)","desc":"used to define state of proposals to return","struct":"ProposalIdType"}],"returns":{"type":"(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"ProposalDataType Returns the proposal by id","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ProposalDataType":[{"name":"proposalType","type":"uint64"},{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalTotalPower","type":"uint64"},{"name":"proposalYesPower","type":"uint64"},{"name":"createdAtTimestamp","type":"uint64"},{"name":"expiryTimestamp","type":"uint64"}],"ProposalIdType":[{"name":"nonce","type":"uint64"}],"ProposalVoteDataType":[{"name":"voteTimestamp","type":"uint64"}],"ProposalVoteIdType":[{"name":"proposalId","type":[{"name":"nonce","type":"uint64"}]},{"name":"voterAddress","type":"address"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":2}},"keys":{"global":{"deployer_address":{"key":"ZGVwbG95ZXJfYWRkcmVzcw==","keyType":"AVMBytes","valueType":"address"},"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMBytes","valueType":"uint64"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"total_current_voting_power":{"key":"dG90YWxfY3VycmVudF92b3RpbmdfcG93ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"user_current_voting_power":{"key":"dXNlcl9jdXJyZW50X3ZvdGluZ19wb3dlcg==","keyType":"AVMBytes","valueType":"uint64"},"user_votes":{"key":"dXNlcl92b3Rlcw==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"ProposalIdType","valueType":"ProposalDataType","prefix":"_p"},"votes":{"keyType":"ProposalVoteIdType","valueType":"ProposalVoteDataType","prefix":"_v"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133]},{"teal":15,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[134,135]},{"teal":16,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[136]},{"teal":17,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[137,138]},{"teal":18,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[139]},{"teal":19,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[140,141]},{"teal":20,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[142]},{"teal":21,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]},{"teal":25,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[169]},{"teal":30,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[170,171,172]},{"teal":31,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[173]},{"teal":32,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[174]},{"teal":36,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[175,176,177]},{"teal":40,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[178]},{"teal":41,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[179,180]},{"teal":42,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[181]},{"teal":46,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[182,183]},{"teal":47,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[184]},{"teal":48,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[185]},{"teal":52,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[186,187]},{"teal":53,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[188]},{"teal":54,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[189]},{"teal":55,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[190]},{"teal":60,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[191,192,193]},{"teal":61,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[194]},{"teal":62,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[195]},{"teal":68,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[196,197,198]},{"teal":71,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[199]},{"teal":75,"source":"contracts\\CompxGovernance.algo.ts:42","pc":[200,201]},{"teal":76,"source":"contracts\\CompxGovernance.algo.ts:42","pc":[202,203]},{"teal":80,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[204,205]},{"teal":81,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[206,207]},{"teal":82,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[208]},{"teal":83,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[209]},{"teal":87,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[210,211]},{"teal":88,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[212]},{"teal":89,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[213]},{"teal":90,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[214]},{"teal":91,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[215]},{"teal":96,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[216,217]},{"teal":97,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[218]},{"teal":98,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[219]},{"teal":99,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[220]},{"teal":100,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[221,222]},{"teal":101,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[223]},{"teal":102,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[224]},{"teal":105,"source":"contracts\\CompxGovernance.algo.ts:61","errorMessage":"argument 0 (mbrTxn) for createNewProposal must be a pay transaction","pc":[225]},{"teal":108,"source":"contracts\\CompxGovernance.algo.ts:60","pc":[226,227,228]},{"teal":109,"source":"contracts\\CompxGovernance.algo.ts:60","pc":[229]},{"teal":112,"source":"contracts\\CompxGovernance.algo.ts:59","pc":[230,231,232]},{"teal":113,"source":"contracts\\CompxGovernance.algo.ts:59","pc":[233,234,235]},{"teal":116,"source":"contracts\\CompxGovernance.algo.ts:58","pc":[236,237,238]},{"teal":117,"source":"contracts\\CompxGovernance.algo.ts:58","pc":[239,240,241]},{"teal":120,"source":"contracts\\CompxGovernance.algo.ts:57","pc":[242,243,244]},{"teal":121,"source":"contracts\\CompxGovernance.algo.ts:57","pc":[245]},{"teal":124,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[246,247,248]},{"teal":125,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[249]},{"teal":126,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[250]},{"teal":136,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[251,252,253]},{"teal":139,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[254]},{"teal":140,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[255,256]},{"teal":144,"source":"contracts\\CompxGovernance.algo.ts:63","pc":[257,258]},{"teal":145,"source":"contracts\\CompxGovernance.algo.ts:63","pc":[259,260]},{"teal":149,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[261,262]},{"teal":150,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[263]},{"teal":151,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[264]},{"teal":152,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[265]},{"teal":153,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[266,267]},{"teal":157,"source":"contracts\\CompxGovernance.algo.ts:67","pc":[268,269]},{"teal":158,"source":"contracts\\CompxGovernance.algo.ts:67","pc":[270,271]},{"teal":162,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[272,273]},{"teal":163,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[274,275]},{"teal":164,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[276]},{"teal":165,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[277,278]},{"teal":169,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[279,280]},{"teal":170,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[281]},{"teal":171,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[282]},{"teal":172,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[283]},{"teal":175,"source":"contracts\\CompxGovernance.algo.ts:73","errorMessage":"Only the deployer can create proposals","pc":[284]},{"teal":179,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[285]},{"teal":180,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[286,287]},{"teal":181,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[288]},{"teal":182,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[289]},{"teal":183,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[290]},{"teal":184,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[291]},{"teal":185,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[292]},{"teal":186,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[293]},{"teal":189,"source":"contracts\\CompxGovernance.algo.ts:74","errorMessage":"Proposal already exists","pc":[294]},{"teal":194,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[295,296]},{"teal":195,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[297,298]},{"teal":196,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[299,300,301]},{"teal":197,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[302]},{"teal":200,"source":"contracts\\CompxGovernance.algo.ts:77","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=proposalMbr\"}","pc":[303]},{"teal":214,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[304]},{"teal":215,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[305,306]},{"teal":216,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[307]},{"teal":217,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[308]},{"teal":218,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[309]},{"teal":219,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[310]},{"teal":220,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[311]},{"teal":221,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[312]},{"teal":222,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[313]},{"teal":223,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[314,315,316,317]},{"teal":224,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[318,319]},{"teal":225,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[320]},{"teal":226,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[321,322,323]},{"teal":227,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[324,325]},{"teal":228,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[326]},{"teal":229,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[327]},{"teal":230,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[328]},{"teal":231,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[329,330,331]},{"teal":232,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[332]},{"teal":233,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[333]},{"teal":234,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[334,335,336]},{"teal":235,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[337,338]},{"teal":236,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[339]},{"teal":237,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[340]},{"teal":238,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[341]},{"teal":239,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[342,343,344]},{"teal":240,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[345]},{"teal":241,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[346]},{"teal":242,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[347,348,349]},{"teal":243,"source":"contracts\\CompxGovernance.algo.ts:84","pc":[350,351]},{"teal":244,"source":"contracts\\CompxGovernance.algo.ts:84","pc":[352,353,354]},{"teal":245,"source":"contracts\\CompxGovernance.algo.ts:85","pc":[355,356]},{"teal":246,"source":"contracts\\CompxGovernance.algo.ts:85","pc":[357,358,359]},{"teal":247,"source":"contracts\\CompxGovernance.algo.ts:86","pc":[360,361]},{"teal":248,"source":"contracts\\CompxGovernance.algo.ts:86","pc":[362,363,364]},{"teal":249,"source":"contracts\\CompxGovernance.algo.ts:87","pc":[365,366]},{"teal":250,"source":"contracts\\CompxGovernance.algo.ts:87","pc":[367,368,369]},{"teal":251,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[370,371]},{"teal":252,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[372]},{"teal":253,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[373,374,375]},{"teal":254,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[376,377]},{"teal":255,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[378]},{"teal":256,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[379,380,381]},{"teal":257,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[382]},{"teal":258,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[383]},{"teal":259,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[384]},{"teal":263,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[385,386]},{"teal":264,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[387]},{"teal":265,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[388]},{"teal":266,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[389]},{"teal":267,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[390,391]},{"teal":268,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[392]},{"teal":269,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[393]},{"teal":270,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[394]},{"teal":280,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[395,396,397]},{"teal":283,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[398]},{"teal":287,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[399,400]},{"teal":288,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[401]},{"teal":289,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[402]},{"teal":290,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[403]},{"teal":293,"source":"contracts\\CompxGovernance.algo.ts:104","errorMessage":"Only the deployer can add votes to users","pc":[404]},{"teal":297,"source":"contracts\\CompxGovernance.algo.ts:106","pc":[405,406]},{"teal":298,"source":"contracts\\CompxGovernance.algo.ts:106","pc":[407,408]},{"teal":302,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[409]},{"teal":303,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[410,411]},{"teal":304,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[412]},{"teal":305,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[413]},{"teal":308,"source":"contracts\\CompxGovernance.algo.ts:108","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[414]},{"teal":309,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[415,416]},{"teal":310,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[417,418]},{"teal":311,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[419,420,421]},{"teal":312,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[422]},{"teal":313,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[423,424]},{"teal":314,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[425]},{"teal":317,"source":"contracts\\CompxGovernance.algo.ts:108","errorMessage":"Proposal already expired","pc":[426]},{"teal":324,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[427,428]},{"teal":325,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[429,430]},{"teal":326,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[431,432]},{"teal":327,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[433]},{"teal":328,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[434]},{"teal":329,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[435]},{"teal":330,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[436]},{"teal":331,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[437]},{"teal":332,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[438]},{"teal":335,"source":"contracts\\CompxGovernance.algo.ts:110","errorMessage":"User already voted on this proposal","pc":[439]},{"teal":339,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[440]},{"teal":340,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[441,442]},{"teal":341,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[443]},{"teal":342,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[444]},{"teal":345,"source":"contracts\\CompxGovernance.algo.ts:114","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[445]},{"teal":346,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[446,447]},{"teal":347,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[448,449]},{"teal":348,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[450,451]},{"teal":349,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[452]},{"teal":350,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[453,454]},{"teal":351,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[455]},{"teal":352,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[456]},{"teal":355,"source":"contracts\\CompxGovernance.algo.ts:114","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[457]},{"teal":356,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[458,459]},{"teal":357,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[460,461]},{"teal":358,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[462,463,464]},{"teal":359,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[465]},{"teal":360,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[466]},{"teal":361,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[467]},{"teal":362,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[468]},{"teal":363,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[469]},{"teal":364,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[470]},{"teal":365,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[471,472]},{"teal":366,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[473]},{"teal":367,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[474]},{"teal":368,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[475]},{"teal":369,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[476]},{"teal":370,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[477]},{"teal":371,"source":"contracts\\CompxGovernance.algo.ts:114","pc":[478]},{"teal":375,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[479]},{"teal":376,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[480,481]},{"teal":377,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[482]},{"teal":378,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[483]},{"teal":381,"source":"contracts\\CompxGovernance.algo.ts:115","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[484]},{"teal":382,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[485,486]},{"teal":383,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[487,488]},{"teal":384,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[489,490]},{"teal":385,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[491]},{"teal":386,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[492,493]},{"teal":387,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[494]},{"teal":388,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[495]},{"teal":391,"source":"contracts\\CompxGovernance.algo.ts:115","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[496]},{"teal":392,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[497,498]},{"teal":393,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[499,500]},{"teal":394,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[501,502,503]},{"teal":395,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[504]},{"teal":396,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[505,506]},{"teal":397,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[507]},{"teal":398,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[508]},{"teal":399,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[509]},{"teal":400,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[510]},{"teal":401,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[511,512]},{"teal":402,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[513]},{"teal":403,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[514]},{"teal":404,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[515]},{"teal":405,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[516]},{"teal":406,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[517]},{"teal":407,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[518]},{"teal":412,"source":"contracts\\CompxGovernance.algo.ts:116","pc":[519,520]},{"teal":413,"source":"contracts\\CompxGovernance.algo.ts:116","pc":[521,522,523]},{"teal":418,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[524]},{"teal":419,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[525,526]},{"teal":420,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[527]},{"teal":421,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[528]},{"teal":424,"source":"contracts\\CompxGovernance.algo.ts:117","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[529]},{"teal":425,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[530,531]},{"teal":426,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[532,533]},{"teal":427,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[534,535]},{"teal":428,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[536]},{"teal":429,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[537,538]},{"teal":430,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[539]},{"teal":431,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[540]},{"teal":434,"source":"contracts\\CompxGovernance.algo.ts:117","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[541]},{"teal":435,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[542,543]},{"teal":436,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[544,545]},{"teal":437,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[546,547,548]},{"teal":438,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[549]},{"teal":439,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[550]},{"teal":440,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[551]},{"teal":441,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[552]},{"teal":442,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[553]},{"teal":443,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[554]},{"teal":444,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[555,556]},{"teal":445,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[557]},{"teal":446,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[558]},{"teal":447,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[559]},{"teal":448,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[560]},{"teal":449,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[561]},{"teal":450,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[562]},{"teal":454,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[563]},{"teal":455,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[564,565]},{"teal":456,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[566]},{"teal":457,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[567]},{"teal":460,"source":"contracts\\CompxGovernance.algo.ts:118","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[568]},{"teal":461,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[569,570]},{"teal":462,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[571,572]},{"teal":463,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[573,574]},{"teal":464,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[575]},{"teal":465,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[576,577]},{"teal":466,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[578]},{"teal":467,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[579]},{"teal":470,"source":"contracts\\CompxGovernance.algo.ts:118","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[580]},{"teal":471,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[581,582]},{"teal":472,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[583,584]},{"teal":473,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[585,586,587]},{"teal":474,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[588]},{"teal":475,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[589,590]},{"teal":476,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[591]},{"teal":477,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[592]},{"teal":478,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[593]},{"teal":479,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[594]},{"teal":480,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[595,596]},{"teal":481,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[597]},{"teal":482,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[598]},{"teal":483,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[599]},{"teal":484,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[600]},{"teal":485,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[601]},{"teal":486,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[602]},{"teal":491,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[603,604]},{"teal":492,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[605,606]},{"teal":493,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[607]},{"teal":494,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[608]},{"teal":495,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[609]},{"teal":496,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[610,611]},{"teal":497,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[612,613]},{"teal":498,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[614,615]},{"teal":499,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[616]},{"teal":503,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[617,618]},{"teal":504,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[619,620]},{"teal":505,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[621,622]},{"teal":506,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[623]},{"teal":507,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[624]},{"teal":508,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[625,626]},{"teal":509,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[627]},{"teal":510,"source":"contracts\\CompxGovernance.algo.ts:122","pc":[628]},{"teal":514,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[629,630]},{"teal":515,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[631]},{"teal":516,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[632]},{"teal":517,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[633]},{"teal":518,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[634,635]},{"teal":519,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[636]},{"teal":520,"source":"contracts\\CompxGovernance.algo.ts:124","pc":[637]},{"teal":521,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[638]},{"teal":533,"source":"contracts\\CompxGovernance.algo.ts:137","pc":[639,640,641]},{"teal":536,"source":"contracts\\CompxGovernance.algo.ts:137","pc":[642]},{"teal":540,"source":"contracts\\CompxGovernance.algo.ts:141","pc":[643,644]},{"teal":541,"source":"contracts\\CompxGovernance.algo.ts:141","pc":[645]},{"teal":542,"source":"contracts\\CompxGovernance.algo.ts:141","pc":[646]},{"teal":543,"source":"contracts\\CompxGovernance.algo.ts:141","pc":[647,648]},{"teal":547,"source":"contracts\\CompxGovernance.algo.ts:142","pc":[649,650]},{"teal":548,"source":"contracts\\CompxGovernance.algo.ts:142","pc":[651]},{"teal":549,"source":"contracts\\CompxGovernance.algo.ts:142","pc":[652,653]},{"teal":550,"source":"contracts\\CompxGovernance.algo.ts:142","pc":[654]},{"teal":554,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[655,656]},{"teal":555,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[657]},{"teal":556,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[658,659]},{"teal":557,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[660,661]},{"teal":558,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[662]},{"teal":559,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[663]},{"teal":560,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[664,665]},{"teal":561,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[666]},{"teal":562,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[667]},{"teal":563,"source":"contracts\\CompxGovernance.algo.ts:137","pc":[668]},{"teal":568,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[669,670,671]},{"teal":569,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[672]},{"teal":572,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[673,674,675]},{"teal":573,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[676]},{"teal":574,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[677]},{"teal":575,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[678]},{"teal":576,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[679]},{"teal":579,"source":"contracts\\CompxGovernance.algo.ts:154","errorMessage":"argument 1 (voterAddress) for makeProposalVote must be a address","pc":[680]},{"teal":582,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[681,682,683]},{"teal":583,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[684]},{"teal":584,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[685]},{"teal":585,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[686]},{"teal":586,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[687]},{"teal":589,"source":"contracts\\CompxGovernance.algo.ts:154","errorMessage":"argument 2 (inFavor) for makeProposalVote must be a bool","pc":[688]},{"teal":590,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[689]},{"teal":591,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[690]},{"teal":594,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[691,692,693]},{"teal":595,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[694]},{"teal":596,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[695]},{"teal":597,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[696]},{"teal":598,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[697]},{"teal":601,"source":"contracts\\CompxGovernance.algo.ts:154","errorMessage":"argument 3 (proposalId) for makeProposalVote must be a (uint64)","pc":[698]},{"teal":604,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[699,700,701]},{"teal":605,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[702]},{"teal":606,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[703]},{"teal":616,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[704,705,706]},{"teal":620,"source":"contracts\\CompxGovernance.algo.ts:155","pc":[707,708]},{"teal":621,"source":"contracts\\CompxGovernance.algo.ts:155","pc":[709]},{"teal":622,"source":"contracts\\CompxGovernance.algo.ts:155","pc":[710]},{"teal":623,"source":"contracts\\CompxGovernance.algo.ts:155","pc":[711]},{"teal":626,"source":"contracts\\CompxGovernance.algo.ts:155","errorMessage":"Only the deployer can add votes to users","pc":[712]},{"teal":630,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[713,714]},{"teal":631,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[715,716]},{"teal":632,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[717,718,719]},{"teal":636,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[720,721]},{"teal":637,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[722,723]},{"teal":638,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[724]},{"teal":639,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[725]},{"teal":640,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[726,727]},{"teal":641,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[728,729]},{"teal":642,"source":"contracts\\CompxGovernance.algo.ts:159","pc":[730,731,732]},{"teal":643,"source":"contracts\\CompxGovernance.algo.ts:154","pc":[733]},{"teal":648,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[734,735,736]},{"teal":649,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[737]},{"teal":652,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[738,739,740]},{"teal":653,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[741]},{"teal":654,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[742]},{"teal":655,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[743]},{"teal":656,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[744]},{"teal":659,"source":"contracts\\CompxGovernance.algo.ts:167","errorMessage":"argument 1 (userAddress) for slashUserContribution must be a address","pc":[745]},{"teal":662,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[746,747,748]},{"teal":663,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[749]},{"teal":664,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[750]},{"teal":672,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[751,752,753]},{"teal":675,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[754]},{"teal":679,"source":"contracts\\CompxGovernance.algo.ts:168","pc":[755]},{"teal":680,"source":"contracts\\CompxGovernance.algo.ts:168","pc":[756,757]},{"teal":684,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[758,759]},{"teal":685,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[760]},{"teal":686,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[761]},{"teal":687,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[762]},{"teal":690,"source":"contracts\\CompxGovernance.algo.ts:170","errorMessage":"Only the deployer can slash user contribution","pc":[763]},{"teal":691,"source":"contracts\\CompxGovernance.algo.ts:167","pc":[764]},{"teal":696,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[765,766,767,768,769,770]},{"teal":699,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[771,772,773]},{"teal":700,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[774]},{"teal":701,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[775]},{"teal":702,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[776]},{"teal":703,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[777]},{"teal":706,"source":"contracts\\CompxGovernance.algo.ts:178","errorMessage":"argument 0 (proposalId) for getProposalsById must be a (uint64)","pc":[778]},{"teal":709,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[779,780,781]},{"teal":710,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[782]},{"teal":711,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[783]},{"teal":712,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[784]},{"teal":713,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[785]},{"teal":721,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[786,787,788]},{"teal":725,"source":"contracts\\CompxGovernance.algo.ts:179","pc":[789]},{"teal":726,"source":"contracts\\CompxGovernance.algo.ts:179","pc":[790,791]},{"teal":727,"source":"contracts\\CompxGovernance.algo.ts:179","pc":[792]},{"teal":728,"source":"contracts\\CompxGovernance.algo.ts:179","pc":[793]},{"teal":731,"source":"contracts\\CompxGovernance.algo.ts:179","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[794]},{"teal":732,"source":"contracts\\CompxGovernance.algo.ts:178","pc":[795]},{"teal":735,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[796,797,798,799,800,801]},{"teal":736,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[802,803,804]},{"teal":737,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[805,806,807,808]},{"teal":740,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[809]},{"teal":743,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[810,811,812,813,814,815]},{"teal":744,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[816,817,818,819,820,821]},{"teal":745,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[822,823,824,825,826,827]},{"teal":746,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[828,829,830,831,832,833]},{"teal":747,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[834,835,836]},{"teal":748,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[837,838,839,840,841,842,843,844,845,846]},{"teal":751,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[847]},{"teal":754,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[848,849,850,851,852,853]},{"teal":755,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[854,855,856]},{"teal":756,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[857,858,859,860]},{"teal":759,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call OptIn","pc":[861]},{"teal":762,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[862,863,864]},{"teal":763,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[865,866]},{"teal":764,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[867,868]},{"teal":765,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[869]},{"teal":766,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[870,871]},{"teal":767,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[872,873]},{"teal":768,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[874]},{"teal":771,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[875,876,877]},{"teal":772,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[878,879]},{"teal":773,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[880,881]},{"teal":774,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[882]},{"teal":775,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[883,884]},{"teal":776,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[885,886]},{"teal":777,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[887]},{"teal":778,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[888]},{"teal":779,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[889,890]},{"teal":780,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[891]},{"teal":781,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[892]},{"teal":782,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[893]},{"teal":783,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[894,895,896]},{"teal":784,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[897,898]},{"teal":785,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[899,900]},{"teal":786,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[901]},{"teal":787,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[902]},{"teal":788,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[903,904]},{"teal":789,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[905,906]},{"teal":790,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[907,908]},{"teal":791,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[909,910]},{"teal":792,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[911]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAIICYKAl9wABBkZXBsb3llcl9hZGRyZXNzGXVzZXJfY3VycmVudF92b3RpbmdfcG93ZXIPdG90YWxfcHJvcG9zYWxzCAAAAAAAAAAAGnRvdGFsX2N1cnJlbnRfdm90aW5nX3Bvd2VyCnVzZXJfdm90ZXMLdG90YWxfdm90ZXMCX3YxGBSBBgsxGQiNDAKBAqcAAAAAAAAAAAJzAAAAAAAAAAAAAACIAAIiQ4oAACoxAGcnBCNnJwYjZ4mIAAIiQ4oAACkxAIwAiwAnByNmiwArI2aJMRYiCUk4ECISRDYaBBc2GgNXAgA2GgJXAgA2GgEXiAACIkOKBQApRwMxAIwAJwRkIgiMATIHjAKLAov8CIwDiwAqZBJEKIsBFlC9TEgURIv7OAiB4BYPRCiLARZQSbxIKSmAAgA8i/8WiAIai/5JFRZXBgJMUIgCGov9SRUWVwYCTFCIAg0nBYgB+ycFiAH2JwWIAfEnBYgB7IsCFogB5osDFogB4EhQvycEZCIIJwRMZ4mKBAApMQAqZBJEMgeMACiL/lC+RDX/NP9XNAgXiwAPRCcJi/6L/1BQvUxIFEQoi/5QvkQ1/zT/gQwoi/5QvkQ1/zT/VwwIFyIIFl0oi/5QSbxITL8oi/5QvkQ1/zT/gRwoi/5QvkQ1/zT/VxwIF4v9CBZdKIv+UEm8SEy/i/xBAE8oi/5QvkQ1/zT/gRQoi/5QvkQ1/zT/VxQIFyIIFl0oi/5QSbxITL8oi/5QvkQ1/zT/gSQoi/5QvkQ1/zT/VyQIF4v9CBZdKIv+UEm8SEy/i/8nB2IiCIv/JwdPAmYnCYv+i/9QUIsAFr8nCGQiCCcITGeJigIAKYv/K2KMAIv/K4v+ZicGZIv+iwAJCCcGTGeJNhoEFzYaA0kVJRJENhoCSRUiEkQjUzYaAUkVJBJEiAACIkOKBAAxACpkEkSL/Iv9iP+vi/6L/Stii/+L/Yj+rok2GgIXNhoBSRUlEkSIAAIiQ4oCACkijAAxACpkEkSJgAQVH3x1NhoBSRUkEkSIAARQsCJDigEBKIv/UL5EiYAEuER7NjYaAI4B/YEAgASK7SNigAT5hU+IgAQkpTa8gATkk8SjNhoAjgT9if9O/4//rgCABAGjo/82GgCOAf1iAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":20,"patch":1,"commitHash":"6a6a15de"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalType: bigint,
  proposalTitle: string,
  proposalDescription: string,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalTotalPower: bigint,
  proposalYesPower: bigint,
  createdAtTimestamp: bigint,
  expiryTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type ProposalIdType = {
  nonce: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalIdType to the struct representation
 */
export function ProposalIdTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalIdType, APP_SPEC.structs) as ProposalIdType
}

export type ProposalVoteDataType = {
  voteTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalVoteDataType to the struct representation
 */
export function ProposalVoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteDataType, APP_SPEC.structs) as ProposalVoteDataType
}

export type ProposalVoteIdType = {
  proposalId: {
    nonce: bigint
  },
  voterAddress: string
}


/**
 * Converts the ABI tuple representation of a ProposalVoteIdType to the struct representation
 */
export function ProposalVoteIdTypeFromTuple(abiTuple: [[bigint], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteIdType, APP_SPEC.structs) as ProposalVoteIdType
}

/**
 * The argument types for the CompxGovernance contract
 */
export type CompxGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optInToApplication()void': Record<string, never>
    'createNewProposal(uint64,string,string,uint64,pay)void': {
      /**
       * Type of the proposal - can be reg or pool
       */
      proposalType: bigint | number
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description of the proposal
       */
      proposalDescription: string
      /**
       * Time in seconds for the proposal to expire
       */
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'makeProposalVote((uint64),bool,address,uint64)void': {
      /**
       * The id of the proposal to be voted on
       */
      proposalId: ProposalIdType
      /**
       * If the vote is a yes or no vote
       */
      inFavor: boolean
      /**
       * The address for the voter - Meant for v1.0 while deployer "server" will be responsible to execute
       */
      voterAddress: string
      /**
       * The voting power of the voter
       */
      votingPower: bigint | number
    }
    'slashUserContribution(address,uint64)void': {
      /**
       * The address of the user to get its contribution slashed
       */
      userAddress: string
      /**
       * The amount to be slashed
       */
      amount: bigint | number
    }
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * used to define state of proposals to return
       */
      proposalId: ProposalIdType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optInToApplication()void': []
    'createNewProposal(uint64,string,string,uint64,pay)void': [proposalType: bigint | number, proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'makeProposalVote((uint64),bool,address,uint64)void': [proposalId: ProposalIdType, inFavor: boolean, voterAddress: string, votingPower: bigint | number]
    'slashUserContribution(address,uint64)void': [userAddress: string, amount: bigint | number]
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: ProposalIdType]
  }
}

/**
 * The return type for each method
 */
export type CompxGovernanceReturns = {
  'createApplication()void': void
  'optInToApplication()void': void
  'createNewProposal(uint64,string,string,uint64,pay)void': void
  'makeProposalVote((uint64),bool,address,uint64)void': void
  'slashUserContribution(address,uint64)void': void
  'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the CompxGovernance smart contract.
 */
export type CompxGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CompxGovernanceArgs['obj']['createApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['createApplication()void']
      returns: CompxGovernanceReturns['createApplication()void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: CompxGovernanceArgs['obj']['optInToApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['optInToApplication()void']
      returns: CompxGovernanceReturns['optInToApplication()void']
    }>
    & Record<'createNewProposal(uint64,string,string,uint64,pay)void' | 'createNewProposal', {
      argsObj: CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']
      returns: CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void']
    }>
    & Record<'makeProposalVote((uint64),bool,address,uint64)void' | 'makeProposalVote', {
      argsObj: CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']
      returns: CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void']
    }>
    & Record<'slashUserContribution(address,uint64)void' | 'slashUserContribution', {
      argsObj: CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']
      returns: CompxGovernanceReturns['slashUserContribution(address,uint64)void']
    }>
    & Record<'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposalsById', {
      argsObj: CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * ProposalDataType Returns the proposal by id
       */
      returns: CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        deployerAddress: string
        totalProposals: bigint
        totalVotes: bigint
        totalCurrentVotingPower: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userCurrentVotingPower: bigint
        userVotes: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<ProposalIdType, ProposalDataType>
        votes: Map<ProposalVoteIdType, ProposalVoteDataType>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CompxGovernanceSignatures = keyof CompxGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CompxGovernanceNonVoidMethodSignatures = keyof CompxGovernanceTypes['methods'] extends infer T ? T extends keyof CompxGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CompxGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CompxGovernanceTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CompxGovernanceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CompxGovernanceCreateCallParams =
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CompxGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CompxGovernanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CompxGovernance smart contract
 */
export abstract class CompxGovernanceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CompxGovernanceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CompxGovernanceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CompxGovernance smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the CompxGovernance smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createNewProposal(uint64,string,string,uint64,pay)void ABI method
   *
   * Create a new proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProposal(uint64,string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalType, params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the makeProposalVote((uint64),bool,address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeProposalVote((uint64),bool,address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.inFavor, params.args.voterAddress, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the slashUserContribution(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slashUserContribution(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CompxGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CompxGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CompxGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CompxGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CompxGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CompxGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CompxGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CompxGovernanceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CompxGovernanceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CompxGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CompxGovernanceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CompxGovernanceReturns['createApplication()void']) }, appClient: new CompxGovernanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CompxGovernance smart contract
 */
export class CompxGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CompxGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CompxGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CompxGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CompxGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProposal: async (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.createNewProposal(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeProposalVote: async (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.makeProposalVote(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    slashUserContribution: async (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.slashUserContribution(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['slashUserContribution(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: ProposalDataType Returns the proposal by id
     */
    getProposalsById: async (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.getProposalsById(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CompxGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CompxGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CompxGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          deployerAddress: result.deployer_address,
          totalProposals: result.total_proposals,
          totalVotes: result.total_votes,
          totalCurrentVotingPower: result.total_current_voting_power,
        }
      },
      /**
       * Get the current value of the deployer_address key in global state
       */
      deployerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("deployer_address")) as string | undefined },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the total_votes key in global state
       */
      totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_votes")) as bigint | undefined },
      /**
       * Get the current value of the total_current_voting_power key in global state
       */
      totalCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_current_voting_power")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CompxGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userCurrentVotingPower: result.user_current_voting_power,
            userVotes: result.user_votes,
          }
        },
        /**
         * Get the current value of the user_current_voting_power key in local state
         */
        userCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_current_voting_power")) as bigint | undefined },
        /**
         * Get the current value of the user_votes key in local state
         */
        userVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_votes")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current CompxGovernance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<ProposalIdType, ProposalDataType>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<ProposalIdType, ProposalDataType> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: ProposalIdType): Promise<ProposalDataType | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalDataType | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<ProposalVoteIdType, ProposalVoteDataType>> => { return (await this.appClient.state.box.getMap("votes")) as Map<ProposalVoteIdType, ProposalVoteDataType> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: ProposalVoteIdType): Promise<ProposalVoteDataType | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as ProposalVoteDataType | undefined },
      },
    },
  }

  public newGroup(): CompxGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createNewProposal(uint64,string,string,uint64,pay)void method call against the CompxGovernance contract
       */
      createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeProposalVote((uint64),bool,address,uint64)void method call against the CompxGovernance contract
       */
      makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeProposalVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slashUserContribution(address,uint64)void method call against the CompxGovernance contract
       */
      slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slashUserContribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) method call against the CompxGovernance contract
       */
      getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalsById(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CompxGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CompxGovernanceComposer
  }
}
export type CompxGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewProposal(uint64,string,string,uint64,pay)void ABI method.
   *
   * Create a new proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProposal(params?: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeProposalVote((uint64),bool,address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeProposalVote(params?: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'] | undefined]>

  /**
   * Calls the slashUserContribution(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashUserContribution(params?: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['slashUserContribution(address,uint64)void'] | undefined]>

  /**
   * Calls the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalsById(params?: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompxGovernance smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CompxGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CompxGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CompxGovernanceComposerResults<TReturns>>
}
export type CompxGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

