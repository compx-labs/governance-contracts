/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CompxGovernance","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToApplication","desc":"OPT-IN to the application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]}},{"name":"createNewProposal","desc":"Create a new proposal","args":[{"name":"proposalType","type":"uint64","desc":"Type of the proposal - can be reg or pool"},{"name":"proposalTitle","type":"string","desc":"Title of the proposal"},{"name":"proposalDescription","type":"string","desc":"Description of the proposal"},{"name":"expiresIn","type":"uint64","desc":"Time in seconds for the proposal to expire"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"makeProposalVote","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"proposalId","type":"(uint64)","desc":"The id of the proposal to be voted on","struct":"ProposalIdType"},{"name":"inFavor","type":"bool","desc":"If the vote is a yes or no vote"},{"name":"voterAddress","type":"address","desc":"The address for the voter - Meant for v1.0 while deployer \"server\" will be responsible to execute"},{"name":"votingPower","type":"uint64","desc":"The voting power of the voter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"slashUserContribution","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"The address of the user to get its contribution slashed"},{"name":"amount","type":"uint64","desc":"The amount to be slashed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProposalsById","args":[{"name":"proposalId","type":"(uint64)","desc":"used to define state of proposals to return","struct":"ProposalIdType"}],"returns":{"type":"(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"ProposalDataType Returns the proposal by id","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ProposalDataType":[{"name":"proposalType","type":"uint64"},{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalTotalPower","type":"uint64"},{"name":"proposalYesPower","type":"uint64"},{"name":"createdAtTimestamp","type":"uint64"},{"name":"expiryTimestamp","type":"uint64"}],"ProposalIdType":[{"name":"nonce","type":"uint64"}],"ProposalVoteDataType":[{"name":"voteTimestamp","type":"uint64"}],"ProposalVoteIdType":[{"name":"proposalId","type":[{"name":"nonce","type":"uint64"}]},{"name":"voterAddress","type":"address"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":2}},"keys":{"global":{"deployer_address":{"key":"ZGVwbG95ZXJfYWRkcmVzcw==","keyType":"AVMBytes","valueType":"address"},"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMBytes","valueType":"uint64"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"total_current_voting_power":{"key":"dG90YWxfY3VycmVudF92b3RpbmdfcG93ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"user_current_voting_power":{"key":"dXNlcl9jdXJyZW50X3ZvdGluZ19wb3dlcg==","keyType":"AVMBytes","valueType":"uint64"},"user_votes":{"key":"dXNlcl92b3Rlcw==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"ProposalIdType","valueType":"ProposalDataType","prefix":"_p"},"votes":{"keyType":"ProposalVoteIdType","valueType":"ProposalVoteDataType","prefix":"_v"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133]},{"teal":15,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[134,135]},{"teal":16,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[136]},{"teal":17,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[137,138]},{"teal":18,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[139]},{"teal":19,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[140,141]},{"teal":20,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[142]},{"teal":21,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168]},{"teal":25,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[169]},{"teal":30,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[170,171,172]},{"teal":31,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[173]},{"teal":32,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[174]},{"teal":36,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[175,176,177]},{"teal":40,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[178]},{"teal":41,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[179,180]},{"teal":42,"source":"contracts\\CompxGovernance.algo.ts:31","pc":[181]},{"teal":46,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[182,183]},{"teal":47,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[184]},{"teal":48,"source":"contracts\\CompxGovernance.algo.ts:32","pc":[185]},{"teal":52,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[186,187]},{"teal":53,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[188]},{"teal":54,"source":"contracts\\CompxGovernance.algo.ts:33","pc":[189]},{"teal":55,"source":"contracts\\CompxGovernance.algo.ts:30","pc":[190]},{"teal":60,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[191,192,193]},{"teal":61,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[194]},{"teal":62,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[195]},{"teal":68,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[196,197,198]},{"teal":71,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[199]},{"teal":75,"source":"contracts\\CompxGovernance.algo.ts:42","pc":[200,201]},{"teal":76,"source":"contracts\\CompxGovernance.algo.ts:42","pc":[202,203]},{"teal":80,"source":"contracts\\CompxGovernance.algo.ts:43","pc":[204,205]},{"teal":81,"source":"contracts\\CompxGovernance.algo.ts:43","pc":[206,207,208]},{"teal":82,"source":"contracts\\CompxGovernance.algo.ts:43","pc":[209]},{"teal":83,"source":"contracts\\CompxGovernance.algo.ts:43","pc":[210]},{"teal":84,"source":"contracts\\CompxGovernance.algo.ts:43","pc":[211]},{"teal":88,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[212,213]},{"teal":89,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[214,215]},{"teal":90,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[216]},{"teal":91,"source":"contracts\\CompxGovernance.algo.ts:44","pc":[217]},{"teal":95,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[218,219]},{"teal":96,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[220]},{"teal":97,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[221]},{"teal":98,"source":"contracts\\CompxGovernance.algo.ts:45","pc":[222]},{"teal":99,"source":"contracts\\CompxGovernance.algo.ts:40","pc":[223]},{"teal":104,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[224,225]},{"teal":105,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[226]},{"teal":106,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[227]},{"teal":107,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[228]},{"teal":108,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[229,230]},{"teal":109,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[231]},{"teal":110,"source":"contracts\\CompxGovernance.algo.ts:61","pc":[232]},{"teal":113,"source":"contracts\\CompxGovernance.algo.ts:61","errorMessage":"argument 0 (mbrTxn) for createNewProposal must be a pay transaction","pc":[233]},{"teal":116,"source":"contracts\\CompxGovernance.algo.ts:60","pc":[234,235,236]},{"teal":117,"source":"contracts\\CompxGovernance.algo.ts:60","pc":[237]},{"teal":120,"source":"contracts\\CompxGovernance.algo.ts:59","pc":[238,239,240]},{"teal":121,"source":"contracts\\CompxGovernance.algo.ts:59","pc":[241,242,243]},{"teal":124,"source":"contracts\\CompxGovernance.algo.ts:58","pc":[244,245,246]},{"teal":125,"source":"contracts\\CompxGovernance.algo.ts:58","pc":[247,248,249]},{"teal":128,"source":"contracts\\CompxGovernance.algo.ts:57","pc":[250,251,252]},{"teal":129,"source":"contracts\\CompxGovernance.algo.ts:57","pc":[253]},{"teal":132,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[254,255,256]},{"teal":133,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[257]},{"teal":134,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[258]},{"teal":144,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[259,260,261]},{"teal":147,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[262]},{"teal":148,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[263,264]},{"teal":152,"source":"contracts\\CompxGovernance.algo.ts:63","pc":[265,266]},{"teal":153,"source":"contracts\\CompxGovernance.algo.ts:63","pc":[267,268]},{"teal":157,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[269,270]},{"teal":158,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[271]},{"teal":159,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[272]},{"teal":160,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[273]},{"teal":161,"source":"contracts\\CompxGovernance.algo.ts:66","pc":[274,275]},{"teal":165,"source":"contracts\\CompxGovernance.algo.ts:67","pc":[276,277]},{"teal":166,"source":"contracts\\CompxGovernance.algo.ts:67","pc":[278,279]},{"teal":170,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[280,281]},{"teal":171,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[282,283]},{"teal":172,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[284]},{"teal":173,"source":"contracts\\CompxGovernance.algo.ts:70","pc":[285,286]},{"teal":177,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[287,288]},{"teal":178,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[289]},{"teal":179,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[290]},{"teal":180,"source":"contracts\\CompxGovernance.algo.ts:73","pc":[291]},{"teal":183,"source":"contracts\\CompxGovernance.algo.ts:73","errorMessage":"Only the deployer can create proposals","pc":[292]},{"teal":187,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[293]},{"teal":188,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[294,295]},{"teal":189,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[296]},{"teal":190,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[297]},{"teal":191,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[298]},{"teal":192,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[299]},{"teal":193,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[300]},{"teal":194,"source":"contracts\\CompxGovernance.algo.ts:74","pc":[301]},{"teal":197,"source":"contracts\\CompxGovernance.algo.ts:74","errorMessage":"Proposal already exists","pc":[302]},{"teal":202,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[303,304]},{"teal":203,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[305,306]},{"teal":204,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[307,308,309]},{"teal":205,"source":"contracts\\CompxGovernance.algo.ts:77","pc":[310]},{"teal":208,"source":"contracts\\CompxGovernance.algo.ts:77","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=proposalMbr\"}","pc":[311]},{"teal":222,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[312]},{"teal":223,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[313,314]},{"teal":224,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[315]},{"teal":225,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[316]},{"teal":226,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[317]},{"teal":227,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[318]},{"teal":228,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[319]},{"teal":229,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[320]},{"teal":230,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[321]},{"teal":231,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[322,323,324,325]},{"teal":232,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[326,327]},{"teal":233,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[328]},{"teal":234,"source":"contracts\\CompxGovernance.algo.ts:81","pc":[329,330,331]},{"teal":235,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[332,333]},{"teal":236,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[334]},{"teal":237,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[335]},{"teal":238,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[336]},{"teal":239,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[337,338,339]},{"teal":240,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[340]},{"teal":241,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[341]},{"teal":242,"source":"contracts\\CompxGovernance.algo.ts:82","pc":[342,343,344]},{"teal":243,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[345,346]},{"teal":244,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[347]},{"teal":245,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[348]},{"teal":246,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[349]},{"teal":247,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[350,351,352]},{"teal":248,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[353]},{"teal":249,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[354]},{"teal":250,"source":"contracts\\CompxGovernance.algo.ts:83","pc":[355,356,357]},{"teal":251,"source":"contracts\\CompxGovernance.algo.ts:84","pc":[358,359]},{"teal":252,"source":"contracts\\CompxGovernance.algo.ts:84","pc":[360,361,362]},{"teal":253,"source":"contracts\\CompxGovernance.algo.ts:85","pc":[363,364]},{"teal":254,"source":"contracts\\CompxGovernance.algo.ts:85","pc":[365,366,367]},{"teal":255,"source":"contracts\\CompxGovernance.algo.ts:86","pc":[368,369]},{"teal":256,"source":"contracts\\CompxGovernance.algo.ts:86","pc":[370,371,372]},{"teal":257,"source":"contracts\\CompxGovernance.algo.ts:87","pc":[373,374]},{"teal":258,"source":"contracts\\CompxGovernance.algo.ts:87","pc":[375,376,377]},{"teal":259,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[378,379]},{"teal":260,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[380]},{"teal":261,"source":"contracts\\CompxGovernance.algo.ts:88","pc":[381,382,383]},{"teal":262,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[384,385]},{"teal":263,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[386]},{"teal":264,"source":"contracts\\CompxGovernance.algo.ts:89","pc":[387,388,389]},{"teal":265,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[390]},{"teal":266,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[391]},{"teal":267,"source":"contracts\\CompxGovernance.algo.ts:80","pc":[392]},{"teal":271,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[393,394]},{"teal":272,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[395]},{"teal":273,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[396]},{"teal":274,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[397]},{"teal":275,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[398,399]},{"teal":276,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[400]},{"teal":277,"source":"contracts\\CompxGovernance.algo.ts:92","pc":[401]},{"teal":278,"source":"contracts\\CompxGovernance.algo.ts:56","pc":[402]},{"teal":288,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[403,404,405]},{"teal":291,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[406]},{"teal":295,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[407,408]},{"teal":296,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[409]},{"teal":297,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[410]},{"teal":298,"source":"contracts\\CompxGovernance.algo.ts:104","pc":[411]},{"teal":301,"source":"contracts\\CompxGovernance.algo.ts:104","errorMessage":"Only the deployer can add votes to users","pc":[412]},{"teal":305,"source":"contracts\\CompxGovernance.algo.ts:106","pc":[413,414]},{"teal":306,"source":"contracts\\CompxGovernance.algo.ts:106","pc":[415,416]},{"teal":310,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[417]},{"teal":311,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[418,419]},{"teal":312,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[420]},{"teal":313,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[421]},{"teal":316,"source":"contracts\\CompxGovernance.algo.ts:108","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[422]},{"teal":317,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[423,424]},{"teal":318,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[425,426]},{"teal":319,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[427,428,429]},{"teal":320,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[430]},{"teal":321,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[431,432]},{"teal":322,"source":"contracts\\CompxGovernance.algo.ts:108","pc":[433]},{"teal":325,"source":"contracts\\CompxGovernance.algo.ts:108","errorMessage":"Proposal already expired","pc":[434]},{"teal":332,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[435,436]},{"teal":333,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[437,438]},{"teal":334,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[439,440]},{"teal":335,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[441]},{"teal":336,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[442]},{"teal":337,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[443]},{"teal":338,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[444]},{"teal":339,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[445]},{"teal":340,"source":"contracts\\CompxGovernance.algo.ts:111","pc":[446]},{"teal":343,"source":"contracts\\CompxGovernance.algo.ts:110","errorMessage":"User already voted on this proposal","pc":[447]},{"teal":347,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[448,449]},{"teal":348,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[450,451,452]},{"teal":349,"source":"contracts\\CompxGovernance.algo.ts:115","pc":[453]},{"teal":352,"source":"contracts\\CompxGovernance.algo.ts:115","errorMessage":"User has not opted in to the contract","pc":[454]},{"teal":356,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[455]},{"teal":357,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[456,457]},{"teal":358,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[458]},{"teal":359,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[459]},{"teal":362,"source":"contracts\\CompxGovernance.algo.ts:117","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[460]},{"teal":363,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[461,462]},{"teal":364,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[463,464]},{"teal":365,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[465,466]},{"teal":366,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[467]},{"teal":367,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[468,469]},{"teal":368,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[470]},{"teal":369,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[471]},{"teal":372,"source":"contracts\\CompxGovernance.algo.ts:117","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[472]},{"teal":373,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[473,474]},{"teal":374,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[475,476]},{"teal":375,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[477,478,479]},{"teal":376,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[480]},{"teal":377,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[481]},{"teal":378,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[482]},{"teal":379,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[483]},{"teal":380,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[484]},{"teal":381,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[485]},{"teal":382,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[486,487]},{"teal":383,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[488]},{"teal":384,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[489]},{"teal":385,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[490]},{"teal":386,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[491]},{"teal":387,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[492]},{"teal":388,"source":"contracts\\CompxGovernance.algo.ts:117","pc":[493]},{"teal":392,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[494]},{"teal":393,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[495,496]},{"teal":394,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[497]},{"teal":395,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[498]},{"teal":398,"source":"contracts\\CompxGovernance.algo.ts:118","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[499]},{"teal":399,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[500,501]},{"teal":400,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[502,503]},{"teal":401,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[504,505]},{"teal":402,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[506]},{"teal":403,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[507,508]},{"teal":404,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[509]},{"teal":405,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[510]},{"teal":408,"source":"contracts\\CompxGovernance.algo.ts:118","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[511]},{"teal":409,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[512,513]},{"teal":410,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[514,515]},{"teal":411,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[516,517,518]},{"teal":412,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[519]},{"teal":413,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[520,521]},{"teal":414,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[522]},{"teal":415,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[523]},{"teal":416,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[524]},{"teal":417,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[525]},{"teal":418,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[526,527]},{"teal":419,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[528]},{"teal":420,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[529]},{"teal":421,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[530]},{"teal":422,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[531]},{"teal":423,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[532]},{"teal":424,"source":"contracts\\CompxGovernance.algo.ts:118","pc":[533]},{"teal":429,"source":"contracts\\CompxGovernance.algo.ts:119","pc":[534,535]},{"teal":430,"source":"contracts\\CompxGovernance.algo.ts:119","pc":[536,537,538]},{"teal":435,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[539]},{"teal":436,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[540,541]},{"teal":437,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[542]},{"teal":438,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[543]},{"teal":441,"source":"contracts\\CompxGovernance.algo.ts:120","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[544]},{"teal":442,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[545,546]},{"teal":443,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[547,548]},{"teal":444,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[549,550]},{"teal":445,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[551]},{"teal":446,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[552,553]},{"teal":447,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[554]},{"teal":448,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[555]},{"teal":451,"source":"contracts\\CompxGovernance.algo.ts:120","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[556]},{"teal":452,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[557,558]},{"teal":453,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[559,560]},{"teal":454,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[561,562,563]},{"teal":455,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[564]},{"teal":456,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[565]},{"teal":457,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[566]},{"teal":458,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[567]},{"teal":459,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[568]},{"teal":460,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[569]},{"teal":461,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[570,571]},{"teal":462,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[572]},{"teal":463,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[573]},{"teal":464,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[574]},{"teal":465,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[575]},{"teal":466,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[576]},{"teal":467,"source":"contracts\\CompxGovernance.algo.ts:120","pc":[577]},{"teal":471,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[578]},{"teal":472,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[579,580]},{"teal":473,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[581]},{"teal":474,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[582]},{"teal":477,"source":"contracts\\CompxGovernance.algo.ts:121","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[583]},{"teal":478,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[584,585]},{"teal":479,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[586,587]},{"teal":480,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[588,589]},{"teal":481,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[590]},{"teal":482,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[591,592]},{"teal":483,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[593]},{"teal":484,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[594]},{"teal":487,"source":"contracts\\CompxGovernance.algo.ts:121","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[595]},{"teal":488,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[596,597]},{"teal":489,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[598,599]},{"teal":490,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[600,601,602]},{"teal":491,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[603]},{"teal":492,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[604,605]},{"teal":493,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[606]},{"teal":494,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[607]},{"teal":495,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[608]},{"teal":496,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[609]},{"teal":497,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[610,611]},{"teal":498,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[612]},{"teal":499,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[613]},{"teal":500,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[614]},{"teal":501,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[615]},{"teal":502,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[616]},{"teal":503,"source":"contracts\\CompxGovernance.algo.ts:121","pc":[617]},{"teal":508,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[618,619]},{"teal":509,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[620,621]},{"teal":510,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[622]},{"teal":511,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[623]},{"teal":512,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[624]},{"teal":513,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[625,626]},{"teal":514,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[627,628]},{"teal":515,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[629,630]},{"teal":516,"source":"contracts\\CompxGovernance.algo.ts:123","pc":[631]},{"teal":520,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[632,633]},{"teal":521,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[634,635]},{"teal":522,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[636,637]},{"teal":523,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[638]},{"teal":524,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[639]},{"teal":525,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[640,641]},{"teal":526,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[642]},{"teal":527,"source":"contracts\\CompxGovernance.algo.ts:125","pc":[643]},{"teal":531,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[644,645]},{"teal":532,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[646]},{"teal":533,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[647]},{"teal":534,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[648]},{"teal":535,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[649,650]},{"teal":536,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[651]},{"teal":537,"source":"contracts\\CompxGovernance.algo.ts:127","pc":[652]},{"teal":538,"source":"contracts\\CompxGovernance.algo.ts:102","pc":[653]},{"teal":550,"source":"contracts\\CompxGovernance.algo.ts:140","pc":[654,655,656]},{"teal":553,"source":"contracts\\CompxGovernance.algo.ts:140","pc":[657]},{"teal":557,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[658,659]},{"teal":558,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[660]},{"teal":559,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[661]},{"teal":560,"source":"contracts\\CompxGovernance.algo.ts:144","pc":[662,663]},{"teal":564,"source":"contracts\\CompxGovernance.algo.ts:145","pc":[664,665]},{"teal":565,"source":"contracts\\CompxGovernance.algo.ts:145","pc":[666]},{"teal":566,"source":"contracts\\CompxGovernance.algo.ts:145","pc":[667,668]},{"teal":567,"source":"contracts\\CompxGovernance.algo.ts:145","pc":[669]},{"teal":571,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[670,671]},{"teal":572,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[672]},{"teal":573,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[673,674]},{"teal":574,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[675,676]},{"teal":575,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[677]},{"teal":576,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[678]},{"teal":577,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[679,680]},{"teal":578,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[681]},{"teal":579,"source":"contracts\\CompxGovernance.algo.ts:147","pc":[682]},{"teal":580,"source":"contracts\\CompxGovernance.algo.ts:140","pc":[683]},{"teal":585,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[684,685,686]},{"teal":586,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[687]},{"teal":589,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[688,689,690]},{"teal":590,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[691]},{"teal":591,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[692]},{"teal":592,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[693]},{"teal":593,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[694]},{"teal":596,"source":"contracts\\CompxGovernance.algo.ts:157","errorMessage":"argument 1 (voterAddress) for makeProposalVote must be a address","pc":[695]},{"teal":599,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[696,697,698]},{"teal":600,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[699]},{"teal":601,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[700]},{"teal":602,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[701]},{"teal":603,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[702]},{"teal":606,"source":"contracts\\CompxGovernance.algo.ts:157","errorMessage":"argument 2 (inFavor) for makeProposalVote must be a bool","pc":[703]},{"teal":607,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[704]},{"teal":608,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[705]},{"teal":611,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[706,707,708]},{"teal":612,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[709]},{"teal":613,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[710]},{"teal":614,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[711]},{"teal":615,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[712]},{"teal":618,"source":"contracts\\CompxGovernance.algo.ts:157","errorMessage":"argument 3 (proposalId) for makeProposalVote must be a (uint64)","pc":[713]},{"teal":621,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[714,715,716]},{"teal":622,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[717]},{"teal":623,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[718]},{"teal":633,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[719,720,721]},{"teal":637,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[722,723]},{"teal":638,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[724]},{"teal":639,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[725]},{"teal":640,"source":"contracts\\CompxGovernance.algo.ts:158","pc":[726]},{"teal":643,"source":"contracts\\CompxGovernance.algo.ts:158","errorMessage":"Only the deployer can add votes to users","pc":[727]},{"teal":647,"source":"contracts\\CompxGovernance.algo.ts:161","pc":[728,729]},{"teal":648,"source":"contracts\\CompxGovernance.algo.ts:161","pc":[730,731]},{"teal":649,"source":"contracts\\CompxGovernance.algo.ts:161","pc":[732,733,734]},{"teal":653,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[735,736]},{"teal":654,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[737,738]},{"teal":655,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[739]},{"teal":656,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[740]},{"teal":657,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[741,742]},{"teal":658,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[743,744]},{"teal":659,"source":"contracts\\CompxGovernance.algo.ts:162","pc":[745,746,747]},{"teal":660,"source":"contracts\\CompxGovernance.algo.ts:157","pc":[748]},{"teal":665,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[749,750,751]},{"teal":666,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[752]},{"teal":669,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[753,754,755]},{"teal":670,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[756]},{"teal":671,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[757]},{"teal":672,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[758]},{"teal":673,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[759]},{"teal":676,"source":"contracts\\CompxGovernance.algo.ts:170","errorMessage":"argument 1 (userAddress) for slashUserContribution must be a address","pc":[760]},{"teal":679,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[761,762,763]},{"teal":680,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[764]},{"teal":681,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[765]},{"teal":689,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[766,767,768]},{"teal":692,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[769]},{"teal":696,"source":"contracts\\CompxGovernance.algo.ts:171","pc":[770]},{"teal":697,"source":"contracts\\CompxGovernance.algo.ts:171","pc":[771,772]},{"teal":701,"source":"contracts\\CompxGovernance.algo.ts:173","pc":[773,774]},{"teal":702,"source":"contracts\\CompxGovernance.algo.ts:173","pc":[775]},{"teal":703,"source":"contracts\\CompxGovernance.algo.ts:173","pc":[776]},{"teal":704,"source":"contracts\\CompxGovernance.algo.ts:173","pc":[777]},{"teal":707,"source":"contracts\\CompxGovernance.algo.ts:173","errorMessage":"Only the deployer can slash user contribution","pc":[778]},{"teal":708,"source":"contracts\\CompxGovernance.algo.ts:170","pc":[779]},{"teal":713,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[780,781,782,783,784,785]},{"teal":716,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[786,787,788]},{"teal":717,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[789]},{"teal":718,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[790]},{"teal":719,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[791]},{"teal":720,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[792]},{"teal":723,"source":"contracts\\CompxGovernance.algo.ts:181","errorMessage":"argument 0 (proposalId) for getProposalsById must be a (uint64)","pc":[793]},{"teal":726,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[794,795,796]},{"teal":727,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[797]},{"teal":728,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[798]},{"teal":729,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[799]},{"teal":730,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[800]},{"teal":738,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[801,802,803]},{"teal":742,"source":"contracts\\CompxGovernance.algo.ts:182","pc":[804]},{"teal":743,"source":"contracts\\CompxGovernance.algo.ts:182","pc":[805,806]},{"teal":744,"source":"contracts\\CompxGovernance.algo.ts:182","pc":[807]},{"teal":745,"source":"contracts\\CompxGovernance.algo.ts:182","pc":[808]},{"teal":748,"source":"contracts\\CompxGovernance.algo.ts:182","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[809]},{"teal":749,"source":"contracts\\CompxGovernance.algo.ts:181","pc":[810]},{"teal":752,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[811,812,813,814,815,816]},{"teal":753,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[817,818,819]},{"teal":754,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[820,821,822,823]},{"teal":757,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[824]},{"teal":760,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[825,826,827,828,829,830]},{"teal":761,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[831,832,833,834,835,836]},{"teal":762,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[837,838,839,840,841,842]},{"teal":763,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[843,844,845,846,847,848]},{"teal":764,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[849,850,851]},{"teal":765,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[852,853,854,855,856,857,858,859,860,861]},{"teal":768,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[862]},{"teal":771,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[863,864,865,866,867,868]},{"teal":772,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[869,870,871]},{"teal":773,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[872,873,874,875]},{"teal":776,"source":"contracts\\CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call OptIn","pc":[876]},{"teal":779,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[877,878,879]},{"teal":780,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[880,881]},{"teal":781,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[882,883]},{"teal":782,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[884]},{"teal":783,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[885,886]},{"teal":784,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[887,888]},{"teal":785,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[889]},{"teal":788,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[890,891,892]},{"teal":789,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[893,894]},{"teal":790,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[895,896]},{"teal":791,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[897]},{"teal":792,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[898,899]},{"teal":793,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[900,901]},{"teal":794,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[902]},{"teal":795,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[903]},{"teal":796,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[904,905]},{"teal":797,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[906]},{"teal":798,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[907]},{"teal":799,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[908]},{"teal":800,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[909,910,911]},{"teal":801,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[912,913]},{"teal":802,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[914,915]},{"teal":803,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[916]},{"teal":804,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[917]},{"teal":805,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[918,919]},{"teal":806,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[920,921]},{"teal":807,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[922,923]},{"teal":808,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[924,925]},{"teal":809,"source":"contracts\\CompxGovernance.algo.ts:6","pc":[926]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAIICYKAl9wABBkZXBsb3llcl9hZGRyZXNzGXVzZXJfY3VycmVudF92b3RpbmdfcG93ZXIPdG90YWxfcHJvcG9zYWxzCAAAAAAAAAAAGnRvdGFsX2N1cnJlbnRfdm90aW5nX3Bvd2VyCnVzZXJfdm90ZXMLdG90YWxfdm90ZXMCX3YxGBSBBgsxGQiNDAKQArYAAAAAAAAAAAKCAAAAAAAAAAAAAACIAAIiQ4oAACoxAGcnBCNnJwYjZ4mIAAIiQ4oAACkxAIwAMQA2MgBhFESLACcHI2aLACsjZokxFiIJSTgQIhJENhoEFzYaA1cCADYaAlcCADYaAReIAAIiQ4oFAClHAzEAjAAnBGQiCIwBMgeMAosCi/wIjAOLACpkEkQoiwEWUL1MSBREi/s4CIHgFg9EKIsBFlBJvEgpKYACADyL/xaIAiGL/kkVFlcGAkxQiAIhi/1JFRZXBgJMUIgCFCcFiAICJwWIAf0nBYgB+CcFiAHziwIWiAHtiwMWiAHnSFC/JwRkIggnBExniYoEACkxACpkEkQyB4wAKIv+UL5ENf80/1c0CBeLAA9EJwmL/ov/UFC9TEgURIv/NjIAYUQoi/5QvkQ1/zT/gQwoi/5QvkQ1/zT/VwwIFyIIFl0oi/5QSbxITL8oi/5QvkQ1/zT/gRwoi/5QvkQ1/zT/VxwIF4v9CBZdKIv+UEm8SEy/i/xBAE8oi/5QvkQ1/zT/gRQoi/5QvkQ1/zT/VxQIFyIIFl0oi/5QSbxITL8oi/5QvkQ1/zT/gSQoi/5QvkQ1/zT/VyQIF4v9CBZdKIv+UEm8SEy/i/8nB2IiCIv/JwdPAmYnCYv+i/9QUIsAFr8nCGQiCCcITGeJigIAKYv/K2KMAIv/K4v+ZicGZIv+iwAJCCcGTGeJNhoEFzYaA0kVJRJENhoCSRUiEkQjUzYaAUkVJBJEiAACIkOKBAAxACpkEkSL/Iv9iP+vi/6L/Stii/+L/Yj+p4k2GgIXNhoBSRUlEkSIAAIiQ4oCACkijAAxACpkEkSJgAQVH3x1NhoBSRUkEkSIAARQsCJDigEBKIv/UL5EiYAEuER7NjYaAI4B/XIAgASK7SNigAT5hU+IgAQkpTa8gATkk8SjNhoAjgT9gv9O/4//rgCABAGjo/82GgCOAf1TAIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":20,"patch":1,"commitHash":"6a6a15de"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalType: bigint,
  proposalTitle: string,
  proposalDescription: string,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalTotalPower: bigint,
  proposalYesPower: bigint,
  createdAtTimestamp: bigint,
  expiryTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type ProposalIdType = {
  nonce: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalIdType to the struct representation
 */
export function ProposalIdTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalIdType, APP_SPEC.structs) as ProposalIdType
}

export type ProposalVoteDataType = {
  voteTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalVoteDataType to the struct representation
 */
export function ProposalVoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteDataType, APP_SPEC.structs) as ProposalVoteDataType
}

export type ProposalVoteIdType = {
  proposalId: {
    nonce: bigint
  },
  voterAddress: string
}


/**
 * Converts the ABI tuple representation of a ProposalVoteIdType to the struct representation
 */
export function ProposalVoteIdTypeFromTuple(abiTuple: [[bigint], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteIdType, APP_SPEC.structs) as ProposalVoteIdType
}

/**
 * The argument types for the CompxGovernance contract
 */
export type CompxGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optInToApplication()void': Record<string, never>
    'createNewProposal(uint64,string,string,uint64,pay)void': {
      /**
       * Type of the proposal - can be reg or pool
       */
      proposalType: bigint | number
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description of the proposal
       */
      proposalDescription: string
      /**
       * Time in seconds for the proposal to expire
       */
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'makeProposalVote((uint64),bool,address,uint64)void': {
      /**
       * The id of the proposal to be voted on
       */
      proposalId: ProposalIdType
      /**
       * If the vote is a yes or no vote
       */
      inFavor: boolean
      /**
       * The address for the voter - Meant for v1.0 while deployer "server" will be responsible to execute
       */
      voterAddress: string
      /**
       * The voting power of the voter
       */
      votingPower: bigint | number
    }
    'slashUserContribution(address,uint64)void': {
      /**
       * The address of the user to get its contribution slashed
       */
      userAddress: string
      /**
       * The amount to be slashed
       */
      amount: bigint | number
    }
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * used to define state of proposals to return
       */
      proposalId: ProposalIdType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optInToApplication()void': []
    'createNewProposal(uint64,string,string,uint64,pay)void': [proposalType: bigint | number, proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'makeProposalVote((uint64),bool,address,uint64)void': [proposalId: ProposalIdType, inFavor: boolean, voterAddress: string, votingPower: bigint | number]
    'slashUserContribution(address,uint64)void': [userAddress: string, amount: bigint | number]
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: ProposalIdType]
  }
}

/**
 * The return type for each method
 */
export type CompxGovernanceReturns = {
  'createApplication()void': void
  'optInToApplication()void': void
  'createNewProposal(uint64,string,string,uint64,pay)void': void
  'makeProposalVote((uint64),bool,address,uint64)void': void
  'slashUserContribution(address,uint64)void': void
  'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the CompxGovernance smart contract.
 */
export type CompxGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CompxGovernanceArgs['obj']['createApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['createApplication()void']
      returns: CompxGovernanceReturns['createApplication()void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: CompxGovernanceArgs['obj']['optInToApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['optInToApplication()void']
      returns: CompxGovernanceReturns['optInToApplication()void']
    }>
    & Record<'createNewProposal(uint64,string,string,uint64,pay)void' | 'createNewProposal', {
      argsObj: CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']
      returns: CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void']
    }>
    & Record<'makeProposalVote((uint64),bool,address,uint64)void' | 'makeProposalVote', {
      argsObj: CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']
      returns: CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void']
    }>
    & Record<'slashUserContribution(address,uint64)void' | 'slashUserContribution', {
      argsObj: CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']
      returns: CompxGovernanceReturns['slashUserContribution(address,uint64)void']
    }>
    & Record<'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposalsById', {
      argsObj: CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * ProposalDataType Returns the proposal by id
       */
      returns: CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        deployerAddress: string
        totalProposals: bigint
        totalVotes: bigint
        totalCurrentVotingPower: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userCurrentVotingPower: bigint
        userVotes: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<ProposalIdType, ProposalDataType>
        votes: Map<ProposalVoteIdType, ProposalVoteDataType>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CompxGovernanceSignatures = keyof CompxGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CompxGovernanceNonVoidMethodSignatures = keyof CompxGovernanceTypes['methods'] extends infer T ? T extends keyof CompxGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CompxGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CompxGovernanceTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CompxGovernanceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CompxGovernanceCreateCallParams =
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CompxGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CompxGovernanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CompxGovernance smart contract
 */
export abstract class CompxGovernanceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CompxGovernanceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CompxGovernanceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CompxGovernance smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the CompxGovernance smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createNewProposal(uint64,string,string,uint64,pay)void ABI method
   *
   * Create a new proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProposal(uint64,string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalType, params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the makeProposalVote((uint64),bool,address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeProposalVote((uint64),bool,address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.inFavor, params.args.voterAddress, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the slashUserContribution(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slashUserContribution(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CompxGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CompxGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CompxGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CompxGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CompxGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CompxGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CompxGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CompxGovernanceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CompxGovernanceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CompxGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CompxGovernanceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CompxGovernanceReturns['createApplication()void']) }, appClient: new CompxGovernanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CompxGovernance smart contract
 */
export class CompxGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CompxGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CompxGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CompxGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CompxGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProposal: async (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.createNewProposal(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeProposalVote: async (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.makeProposalVote(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    slashUserContribution: async (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.slashUserContribution(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['slashUserContribution(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: ProposalDataType Returns the proposal by id
     */
    getProposalsById: async (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.getProposalsById(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CompxGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CompxGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CompxGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          deployerAddress: result.deployer_address,
          totalProposals: result.total_proposals,
          totalVotes: result.total_votes,
          totalCurrentVotingPower: result.total_current_voting_power,
        }
      },
      /**
       * Get the current value of the deployer_address key in global state
       */
      deployerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("deployer_address")) as string | undefined },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the total_votes key in global state
       */
      totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_votes")) as bigint | undefined },
      /**
       * Get the current value of the total_current_voting_power key in global state
       */
      totalCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_current_voting_power")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CompxGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userCurrentVotingPower: result.user_current_voting_power,
            userVotes: result.user_votes,
          }
        },
        /**
         * Get the current value of the user_current_voting_power key in local state
         */
        userCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_current_voting_power")) as bigint | undefined },
        /**
         * Get the current value of the user_votes key in local state
         */
        userVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_votes")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current CompxGovernance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<ProposalIdType, ProposalDataType>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<ProposalIdType, ProposalDataType> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: ProposalIdType): Promise<ProposalDataType | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalDataType | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<ProposalVoteIdType, ProposalVoteDataType>> => { return (await this.appClient.state.box.getMap("votes")) as Map<ProposalVoteIdType, ProposalVoteDataType> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: ProposalVoteIdType): Promise<ProposalVoteDataType | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as ProposalVoteDataType | undefined },
      },
    },
  }

  public newGroup(): CompxGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createNewProposal(uint64,string,string,uint64,pay)void method call against the CompxGovernance contract
       */
      createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeProposalVote((uint64),bool,address,uint64)void method call against the CompxGovernance contract
       */
      makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeProposalVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slashUserContribution(address,uint64)void method call against the CompxGovernance contract
       */
      slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slashUserContribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) method call against the CompxGovernance contract
       */
      getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalsById(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CompxGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CompxGovernanceComposer
  }
}
export type CompxGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewProposal(uint64,string,string,uint64,pay)void ABI method.
   *
   * Create a new proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProposal(params?: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeProposalVote((uint64),bool,address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeProposalVote(params?: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'] | undefined]>

  /**
   * Calls the slashUserContribution(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashUserContribution(params?: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['slashUserContribution(address,uint64)void'] | undefined]>

  /**
   * Calls the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalsById(params?: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompxGovernance smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CompxGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CompxGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CompxGovernanceComposerResults<TReturns>>
}
export type CompxGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

