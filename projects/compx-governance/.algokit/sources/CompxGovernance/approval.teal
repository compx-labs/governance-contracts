#pragma version 10
intcblock 1 0 8
bytecblock 0x 0x5f70 0x757365725f636f6e747269627574696f6e 0x746f74616c5f70726f706f73616c73 0x757365725f766f746573 0x757365725f7370656369616c5f766f746573 0x6465706c6f7965725f61646472657373 0x0000000000000000 0x5f76

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/CompxGovernance.algo.ts:26
	// this.total_proposals.value = 0
	bytec 3 //  "total_proposals"
	intc 1 // 0
	app_global_put

	// contracts/CompxGovernance.algo.ts:27
	// this.deployer_address.value = this.txn.sender
	bytec 6 //  "deployer_address"
	txn Sender
	app_global_put

	// contracts/CompxGovernance.algo.ts:28
	// this.total_proposals.value = 0
	bytec 3 //  "total_proposals"
	intc 1 // 0
	app_global_put
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 0 // 1
	return

// optInToApplication(): void
//
// OPT-IN to the application
optInToApplication:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/CompxGovernance.algo.ts:37
	// userAddress: Address = this.txn.sender
	txn Sender
	frame_bury 0 // userAddress: Address

	// contracts/CompxGovernance.algo.ts:38
	// this.user_contribution(userAddress).value = 1
	frame_dig 0 // userAddress: Address
	bytec 2 //  "user_contribution"
	intc 0 // 1
	app_local_put

	// contracts/CompxGovernance.algo.ts:39
	// this.user_votes(userAddress).value = 0
	frame_dig 0 // userAddress: Address
	bytec 4 //  "user_votes"
	intc 1 // 0
	app_local_put

	// contracts/CompxGovernance.algo.ts:40
	// this.user_special_votes(userAddress).value = 0
	frame_dig 0 // userAddress: Address
	bytec 5 //  "user_special_votes"
	intc 1 // 0
	app_local_put
	retsub

// createNewProposal(uint64,string,string,uint64,pay)void
*abi_route_createNewProposal:
	// mbrTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrTxn) for createNewProposal must be a pay transaction
	assert

	// expiresIn: uint64
	txna ApplicationArgs 4
	btoi

	// proposalDescription: string
	txna ApplicationArgs 3
	extract 2 0

	// proposalTitle: string
	txna ApplicationArgs 2
	extract 2 0

	// proposalType: uint64
	txna ApplicationArgs 1
	btoi

	// execute createNewProposal(uint64,string,string,uint64,pay)void
	callsub createNewProposal
	intc 0 // 1
	return

// createNewProposal(proposalType: uint64, proposalTitle: string, proposalDescription: string, expiresIn: uint64, mbrTxn: PayTxn): void
//
// Create a new proposal
// @param proposalType Type of the proposal - can be reg or pool
// @param proposalTitle Title of the proposal
// @param proposalDescription Description of the proposal
// @param expiresIn Time in seconds for the proposal to expire
createNewProposal:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/CompxGovernance.algo.ts:58
	// proposerAddress: Address = this.txn.sender
	txn Sender
	frame_bury 0 // proposerAddress: Address

	// contracts/CompxGovernance.algo.ts:61
	// proposalNonce: uint64 = this.total_proposals.value + 1
	bytec 3 //  "total_proposals"
	app_global_get
	intc 0 // 1
	+
	frame_bury 1 // proposalNonce: uint64

	// contracts/CompxGovernance.algo.ts:62
	// currentTimestamp: uint64 = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 2 // currentTimestamp: uint64

	// contracts/CompxGovernance.algo.ts:65
	// expiryTimestamp: uint64 = currentTimestamp + expiresIn
	frame_dig 2 // currentTimestamp: uint64
	frame_dig -4 // expiresIn: uint64
	+
	frame_bury 3 // expiryTimestamp: uint64

	// contracts/CompxGovernance.algo.ts:68
	// assert(proposerAddress === this.deployer_address.value, 'Only the deployer can create proposals')
	frame_dig 0 // proposerAddress: Address
	bytec 6 //  "deployer_address"
	app_global_get
	==

	// Only the deployer can create proposals
	assert

	// contracts/CompxGovernance.algo.ts:69
	// assert(!this.proposals({ nonce: proposalNonce }).exists, 'Proposal already exists')
	bytec 1 //  "_p"
	frame_dig 1 // proposalNonce: uint64
	itob
	concat
	box_len
	swap
	pop
	!

	// Proposal already exists
	assert

	// contracts/CompxGovernance.algo.ts:72
	// verifyPayTxn(mbrTxn, { amount: { greaterThanEqualTo: proposalMbr } })
	// verify amount
	frame_dig -5 // mbrTxn: PayTxn
	gtxns Amount
	pushint 2912
	>=

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=proposalMbr"}
	assert

	// contracts/CompxGovernance.algo.ts:75
	// this.proposals({ nonce: proposalNonce }).value = {
	//       proposalType: proposalType,
	//       proposalTitle: proposalTitle,
	//       proposalDescription: proposalDescription,
	//       proposalTotalVotes: 0,
	//       proposalYesVotes: 0,
	//       createdAtTimestamp: currentTimestamp,
	//       expiryTimestamp: expiryTimestamp,
	//     }
	bytec 1 //  "_p"
	frame_dig 1 // proposalNonce: uint64
	itob
	concat
	dup
	box_del
	pop
	bytec 0 //  initial head
	bytec 0 //  initial tail
	pushbytes 0x002c // initial head offset
	frame_dig -1 // proposalType: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -2 // proposalTitle: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // proposalDescription: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 7 // 0x0000000000000000
	callsub *process_static_tuple_element
	bytec 7 // 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig 2 // currentTimestamp: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig 3 // expiryTimestamp: uint64
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put

	// contracts/CompxGovernance.algo.ts:85
	// this.total_proposals.value += 1
	bytec 3 //  "total_proposals"
	app_global_get
	intc 0 // 1
	+
	bytec 3 //  "total_proposals"
	swap
	app_global_put
	retsub

// addOneToUserVotes(voterAddress: Address, proposalId: ProposalIdType, inFavor: boolean): void
//
// Create a new proposal
// @param Address Type of the proposal - can be reg or pool
addOneToUserVotes:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/CompxGovernance.algo.ts:96
	// voteTimestamp = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 0 // voteTimestamp: uint64

	// contracts/CompxGovernance.algo.ts:98
	// userVotesCount: uint64 = this.user_votes(voterAddress).value
	frame_dig -1 // voterAddress: Address
	bytec 4 //  "user_votes"
	app_local_get
	frame_bury 1 // userVotesCount: uint64

	// contracts/CompxGovernance.algo.ts:99
	// userContribution: uint64 = this.user_contribution(voterAddress).value
	frame_dig -1 // voterAddress: Address
	bytec 2 //  "user_contribution"
	app_local_get
	frame_bury 2 // userContribution: uint64

	// contracts/CompxGovernance.algo.ts:102
	// assert(!(userContribution === 0), 'User has not opted in to the contract')
	frame_dig 2 // userContribution: uint64
	intc 1 // 0
	==
	!

	// User has not opted in to the contract
	assert

	// contracts/CompxGovernance.algo.ts:106
	// assert(
	//       !this.votes({ proposalId: proposalId, voterAddress: voterAddress }).exists,
	//       'User already voted on this proposal'
	//     )
	bytec 8 //  "_v"
	frame_dig -2 // proposalId: ProposalIdType
	frame_dig -1 // voterAddress: Address
	concat
	concat
	box_len
	swap
	pop
	!

	// User already voted on this proposal
	assert

	// contracts/CompxGovernance.algo.ts:110
	// this.proposals(proposalId).value.proposalTotalVotes += 1
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 12
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 12 8
	btoi
	intc 0 // 1
	+
	itob
	replace3
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	dup
	box_del
	pop
	swap
	box_put

	// *if0_condition
	// contracts/CompxGovernance.algo.ts:111
	// inFavor
	frame_dig -3 // inFavor: boolean
	bz *if0_end

	// *if0_consequent
	// contracts/CompxGovernance.algo.ts:112
	// this.proposals(proposalId).value.proposalYesVotes += 1
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 20
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 20 8
	btoi
	intc 0 // 1
	+
	itob
	replace3
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	dup
	box_del
	pop
	swap
	box_put

*if0_end:
	// contracts/CompxGovernance.algo.ts:114
	// this.user_votes(voterAddress).value += 1
	frame_dig -1 // voterAddress: Address
	bytec 4 //  "user_votes"
	app_local_get
	intc 0 // 1
	+
	frame_dig -1 // voterAddress: Address
	bytec 4 //  "user_votes"
	uncover 2
	app_local_put

	// contracts/CompxGovernance.algo.ts:116
	// this.votes({ proposalId: proposalId, voterAddress: voterAddress }).value = { voteTimestamp: voteTimestamp }
	bytec 8 //  "_v"
	frame_dig -2 // proposalId: ProposalIdType
	frame_dig -1 // voterAddress: Address
	concat
	concat
	frame_dig 0 // voteTimestamp: uint64
	itob
	box_put

	// *if1_condition
	// contracts/CompxGovernance.algo.ts:119
	// this.proposals(proposalId).value.proposalType === 1
	bytec 1 //  "_p"
	frame_dig -2 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	intc 0 // 1
	==
	bz *if1_end

	// *if1_consequent
	// contracts/CompxGovernance.algo.ts:120
	// this.addOneToUserContribution(voterAddress)
	frame_dig -1 // voterAddress: Address
	callsub addOneToUserContribution

	// contracts/CompxGovernance.algo.ts:121
	// this.addOneToUserSpecialVotes(voterAddress)
	frame_dig -1 // voterAddress: Address
	callsub addOneToUserSpecialVotes

*if1_end:
	retsub

// addOneToUserContribution(userAddress: Address): void
//
// Create a new proposal
// @param Address Type of the proposal - can be reg or pool
addOneToUserContribution:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/CompxGovernance.algo.ts:134
	// userContribution: uint64 = this.user_contribution(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "user_contribution"
	app_local_get
	frame_bury 0 // userContribution: uint64

	// contracts/CompxGovernance.algo.ts:138
	// this.user_contribution(userAddress).value += 1
	frame_dig -1 // userAddress: Address
	bytec 2 //  "user_contribution"
	app_local_get
	intc 0 // 1
	+
	frame_dig -1 // userAddress: Address
	bytec 2 //  "user_contribution"
	uncover 2
	app_local_put
	retsub

// addOneToUserSpecialVotes(userAddress: Address): void
addOneToUserSpecialVotes:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/CompxGovernance.algo.ts:146
	// userContribution: uint64 = this.user_contribution(userAddress).value
	frame_dig -1 // userAddress: Address
	bytec 2 //  "user_contribution"
	app_local_get
	frame_bury 0 // userContribution: uint64

	// contracts/CompxGovernance.algo.ts:151
	// this.user_special_votes(userAddress).value += 1
	frame_dig -1 // userAddress: Address
	bytec 5 //  "user_special_votes"
	app_local_get
	intc 0 // 1
	+
	frame_dig -1 // userAddress: Address
	bytec 5 //  "user_special_votes"
	uncover 2
	app_local_put
	retsub

// makeProposalVote((uint64),bool)void
*abi_route_makeProposalVote:
	// inFavor: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (inFavor) for makeProposalVote must be a bool
	assert
	intc 1 // 0
	getbit

	// proposalId: (uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 1 (proposalId) for makeProposalVote must be a (uint64)
	assert

	// execute makeProposalVote((uint64),bool)void
	callsub makeProposalVote
	intc 0 // 1
	return

// makeProposalVote(proposalId: ProposalIdType, inFavor: boolean): void
makeProposalVote:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/CompxGovernance.algo.ts:155
	// voterAddress: Address = this.txn.sender
	txn Sender
	frame_bury 0 // voterAddress: Address

	// contracts/CompxGovernance.algo.ts:156
	// currentProposal: ProposalDataType = this.proposals(proposalId).value
	bytec 1 //  "_p"
	frame_dig -1 // proposalId: ProposalIdType
	concat
	frame_bury 1 // storage key//currentProposal

	// contracts/CompxGovernance.algo.ts:158
	// this.addOneToUserVotes(voterAddress, proposalId, inFavor)
	frame_dig -2 // inFavor: boolean
	frame_dig -1 // proposalId: ProposalIdType
	frame_dig 0 // voterAddress: Address
	callsub addOneToUserVotes
	retsub

// getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64)
*abi_route_getProposalsById:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// proposalId: (uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 8
	==

	// argument 0 (proposalId) for getProposalsById must be a (uint64)
	assert

	// execute getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64)
	callsub getProposalsById
	concat
	log
	intc 0 // 1
	return

// getProposalsById(proposalId: ProposalIdType): ProposalDataType
//
//
// @param proposalId used to define state of proposals to return
// @returns Returns active or expired proposals and its information
getProposalsById:
	proto 1 1

	// contracts/CompxGovernance.algo.ts:167
	// return this.proposals(proposalId).value;
	bytec 1 //  "_p"
	frame_dig -1 // proposalId: ProposalIdType
	concat
	box_get

	// box value does not exist: this.proposals(proposalId).value
	assert
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x8aed2362 // method "createNewProposal(uint64,string,string,uint64,pay)void"
	pushbytes 0xf6f5a53b // method "makeProposalVote((uint64),bool)void"
	pushbytes 0x18382994 // method "getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_createNewProposal *abi_route_makeProposalVote *abi_route_getProposalsById

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub