/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CompxGovernance","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToApplication","desc":"OPT-IN to the application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]}},{"name":"updateAppManager","desc":"Updates the","args":[{"name":"newManagerAddress","type":"address","desc":"The address of the new manager"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createNewProposal","desc":"Create a new proposal","args":[{"name":"proposalTitle","type":"string","desc":"Title of the proposal"},{"name":"proposalDescription","type":"string","desc":"Description of the proposal"},{"name":"expiresIn","type":"uint64","desc":"Time in seconds for the proposal to expire"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateUserCurrentVotingPower","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"address of the user to add the contribution"},{"name":"newVotingPower","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"makeProposalVote","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"proposalId","type":"(uint64)","desc":"The id of the proposal to be voted on","struct":"ProposalIdType"},{"name":"inFavor","type":"bool","desc":"If the vote is a yes or no vote"},{"name":"voterAddress","type":"address","desc":"The address for the voter - Meant for v1.0 while manager \"server\" will be responsible to execute"},{"name":"votingPower","type":"uint64","desc":"The voting power of the voter"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"slashUserVotingPower","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"The address of the user to get its contribution slashed"},{"name":"amount","type":"uint64","desc":"The amount to be slashed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProposalsById","args":[{"name":"proposalId","type":"(uint64)","desc":"used to define state of proposals to return","struct":"ProposalIdType"}],"returns":{"type":"(string,string,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"ProposalDataType Returns the proposal by id","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ProposalDataType":[{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalTotalPower","type":"uint64"},{"name":"proposalYesPower","type":"uint64"},{"name":"createdAtTimestamp","type":"uint64"},{"name":"expiryTimestamp","type":"uint64"}],"ProposalIdType":[{"name":"nonce","type":"uint64"}],"ProposalVoteDataType":[{"name":"voteTimestamp","type":"uint64"}],"ProposalVoteIdType":[{"name":"proposalId","type":[{"name":"nonce","type":"uint64"}]},{"name":"voterAddress","type":"address"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":2}},"keys":{"global":{"manager_address":{"key":"bWFuYWdlcl9hZGRyZXNz","keyType":"AVMBytes","valueType":"address"},"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMBytes","valueType":"uint64"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"total_current_voting_power":{"key":"dG90YWxfY3VycmVudF92b3RpbmdfcG93ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"user_current_voting_power":{"key":"dXNlcl9jdXJyZW50X3ZvdGluZ19wb3dlcg==","keyType":"AVMBytes","valueType":"uint64"},"user_votes":{"key":"dXNlcl92b3Rlcw==","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"ProposalIdType","valueType":"ProposalDataType","prefix":"_p"},"votes":{"keyType":"ProposalVoteIdType","valueType":"ProposalVoteDataType","prefix":"_v"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/CompxGovernance.algo.ts:5","pc":[0]},{"teal":2,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/CompxGovernance.algo.ts:5","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132]},{"teal":15,"source":"contracts/CompxGovernance.algo.ts:5","pc":[133,134]},{"teal":16,"source":"contracts/CompxGovernance.algo.ts:5","pc":[135]},{"teal":17,"source":"contracts/CompxGovernance.algo.ts:5","pc":[136,137]},{"teal":18,"source":"contracts/CompxGovernance.algo.ts:5","pc":[138]},{"teal":19,"source":"contracts/CompxGovernance.algo.ts:5","pc":[139,140]},{"teal":20,"source":"contracts/CompxGovernance.algo.ts:5","pc":[141]},{"teal":21,"source":"contracts/CompxGovernance.algo.ts:5","pc":[142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167]},{"teal":25,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[168]},{"teal":30,"source":"contracts/CompxGovernance.algo.ts:30","pc":[169,170,171]},{"teal":31,"source":"contracts/CompxGovernance.algo.ts:30","pc":[172]},{"teal":32,"source":"contracts/CompxGovernance.algo.ts:30","pc":[173]},{"teal":36,"source":"contracts/CompxGovernance.algo.ts:30","pc":[174,175,176]},{"teal":40,"source":"contracts/CompxGovernance.algo.ts:31","pc":[177]},{"teal":41,"source":"contracts/CompxGovernance.algo.ts:31","pc":[178,179]},{"teal":42,"source":"contracts/CompxGovernance.algo.ts:31","pc":[180]},{"teal":46,"source":"contracts/CompxGovernance.algo.ts:32","pc":[181,182]},{"teal":47,"source":"contracts/CompxGovernance.algo.ts:32","pc":[183]},{"teal":48,"source":"contracts/CompxGovernance.algo.ts:32","pc":[184]},{"teal":52,"source":"contracts/CompxGovernance.algo.ts:33","pc":[185,186]},{"teal":53,"source":"contracts/CompxGovernance.algo.ts:33","pc":[187]},{"teal":54,"source":"contracts/CompxGovernance.algo.ts:33","pc":[188]},{"teal":55,"source":"contracts/CompxGovernance.algo.ts:30","pc":[189]},{"teal":60,"source":"contracts/CompxGovernance.algo.ts:40","pc":[190,191,192]},{"teal":61,"source":"contracts/CompxGovernance.algo.ts:40","pc":[193]},{"teal":62,"source":"contracts/CompxGovernance.algo.ts:40","pc":[194]},{"teal":68,"source":"contracts/CompxGovernance.algo.ts:40","pc":[195,196,197]},{"teal":71,"source":"contracts/CompxGovernance.algo.ts:40","pc":[198]},{"teal":75,"source":"contracts/CompxGovernance.algo.ts:42","pc":[199,200]},{"teal":76,"source":"contracts/CompxGovernance.algo.ts:42","pc":[201,202]},{"teal":80,"source":"contracts/CompxGovernance.algo.ts:43","pc":[203,204]},{"teal":81,"source":"contracts/CompxGovernance.algo.ts:43","pc":[205,206]},{"teal":82,"source":"contracts/CompxGovernance.algo.ts:43","pc":[207]},{"teal":83,"source":"contracts/CompxGovernance.algo.ts:43","pc":[208]},{"teal":87,"source":"contracts/CompxGovernance.algo.ts:44","pc":[209,210]},{"teal":88,"source":"contracts/CompxGovernance.algo.ts:44","pc":[211]},{"teal":89,"source":"contracts/CompxGovernance.algo.ts:44","pc":[212]},{"teal":90,"source":"contracts/CompxGovernance.algo.ts:44","pc":[213]},{"teal":91,"source":"contracts/CompxGovernance.algo.ts:40","pc":[214]},{"teal":96,"source":"contracts/CompxGovernance.algo.ts:52","pc":[215,216,217]},{"teal":97,"source":"contracts/CompxGovernance.algo.ts:52","pc":[218]},{"teal":98,"source":"contracts/CompxGovernance.algo.ts:52","pc":[219]},{"teal":99,"source":"contracts/CompxGovernance.algo.ts:52","pc":[220]},{"teal":100,"source":"contracts/CompxGovernance.algo.ts:52","pc":[221]},{"teal":103,"source":"contracts/CompxGovernance.algo.ts:52","errorMessage":"argument 0 (newManagerAddress) for updateAppManager must be a address","pc":[222]},{"teal":106,"source":"contracts/CompxGovernance.algo.ts:52","pc":[223,224,225]},{"teal":107,"source":"contracts/CompxGovernance.algo.ts:52","pc":[226]},{"teal":108,"source":"contracts/CompxGovernance.algo.ts:52","pc":[227]},{"teal":115,"source":"contracts/CompxGovernance.algo.ts:52","pc":[228,229,230]},{"teal":118,"source":"contracts/CompxGovernance.algo.ts:52","pc":[231]},{"teal":122,"source":"contracts/CompxGovernance.algo.ts:53","pc":[232,233]},{"teal":123,"source":"contracts/CompxGovernance.algo.ts:53","pc":[234,235]},{"teal":127,"source":"contracts/CompxGovernance.algo.ts:56","pc":[236,237]},{"teal":128,"source":"contracts/CompxGovernance.algo.ts:56","pc":[238]},{"teal":129,"source":"contracts/CompxGovernance.algo.ts:56","pc":[239]},{"teal":130,"source":"contracts/CompxGovernance.algo.ts:56","pc":[240]},{"teal":133,"source":"contracts/CompxGovernance.algo.ts:56","errorMessage":"User is trying to change the manager of the contractS","pc":[241]},{"teal":137,"source":"contracts/CompxGovernance.algo.ts:58","pc":[242]},{"teal":138,"source":"contracts/CompxGovernance.algo.ts:58","pc":[243,244]},{"teal":139,"source":"contracts/CompxGovernance.algo.ts:58","pc":[245]},{"teal":140,"source":"contracts/CompxGovernance.algo.ts:52","pc":[246]},{"teal":145,"source":"contracts/CompxGovernance.algo.ts:68","pc":[247,248]},{"teal":146,"source":"contracts/CompxGovernance.algo.ts:68","pc":[249]},{"teal":147,"source":"contracts/CompxGovernance.algo.ts:68","pc":[250]},{"teal":148,"source":"contracts/CompxGovernance.algo.ts:68","pc":[251]},{"teal":149,"source":"contracts/CompxGovernance.algo.ts:68","pc":[252,253]},{"teal":150,"source":"contracts/CompxGovernance.algo.ts:68","pc":[254]},{"teal":151,"source":"contracts/CompxGovernance.algo.ts:68","pc":[255]},{"teal":154,"source":"contracts/CompxGovernance.algo.ts:68","errorMessage":"argument 0 (mbrTxn) for createNewProposal must be a pay transaction","pc":[256]},{"teal":157,"source":"contracts/CompxGovernance.algo.ts:68","pc":[257,258,259]},{"teal":158,"source":"contracts/CompxGovernance.algo.ts:68","pc":[260]},{"teal":161,"source":"contracts/CompxGovernance.algo.ts:68","pc":[261,262,263]},{"teal":162,"source":"contracts/CompxGovernance.algo.ts:68","pc":[264,265,266]},{"teal":165,"source":"contracts/CompxGovernance.algo.ts:68","pc":[267,268,269]},{"teal":166,"source":"contracts/CompxGovernance.algo.ts:68","pc":[270,271,272]},{"teal":169,"source":"contracts/CompxGovernance.algo.ts:68","pc":[273,274,275]},{"teal":170,"source":"contracts/CompxGovernance.algo.ts:68","pc":[276]},{"teal":171,"source":"contracts/CompxGovernance.algo.ts:68","pc":[277]},{"teal":180,"source":"contracts/CompxGovernance.algo.ts:68","pc":[278,279,280]},{"teal":183,"source":"contracts/CompxGovernance.algo.ts:68","pc":[281]},{"teal":184,"source":"contracts/CompxGovernance.algo.ts:68","pc":[282,283]},{"teal":188,"source":"contracts/CompxGovernance.algo.ts:69","pc":[284,285]},{"teal":189,"source":"contracts/CompxGovernance.algo.ts:69","pc":[286,287]},{"teal":193,"source":"contracts/CompxGovernance.algo.ts:72","pc":[288,289]},{"teal":194,"source":"contracts/CompxGovernance.algo.ts:72","pc":[290]},{"teal":195,"source":"contracts/CompxGovernance.algo.ts:72","pc":[291]},{"teal":196,"source":"contracts/CompxGovernance.algo.ts:72","pc":[292]},{"teal":197,"source":"contracts/CompxGovernance.algo.ts:72","pc":[293,294]},{"teal":201,"source":"contracts/CompxGovernance.algo.ts:73","pc":[295,296]},{"teal":202,"source":"contracts/CompxGovernance.algo.ts:73","pc":[297,298]},{"teal":206,"source":"contracts/CompxGovernance.algo.ts:76","pc":[299,300]},{"teal":207,"source":"contracts/CompxGovernance.algo.ts:76","pc":[301,302]},{"teal":208,"source":"contracts/CompxGovernance.algo.ts:76","pc":[303]},{"teal":209,"source":"contracts/CompxGovernance.algo.ts:76","pc":[304,305]},{"teal":213,"source":"contracts/CompxGovernance.algo.ts:79","pc":[306,307]},{"teal":214,"source":"contracts/CompxGovernance.algo.ts:79","pc":[308]},{"teal":215,"source":"contracts/CompxGovernance.algo.ts:79","pc":[309]},{"teal":216,"source":"contracts/CompxGovernance.algo.ts:79","pc":[310]},{"teal":219,"source":"contracts/CompxGovernance.algo.ts:79","errorMessage":"Only the manager can create proposals","pc":[311]},{"teal":223,"source":"contracts/CompxGovernance.algo.ts:80","pc":[312]},{"teal":224,"source":"contracts/CompxGovernance.algo.ts:80","pc":[313,314]},{"teal":225,"source":"contracts/CompxGovernance.algo.ts:80","pc":[315]},{"teal":226,"source":"contracts/CompxGovernance.algo.ts:80","pc":[316]},{"teal":227,"source":"contracts/CompxGovernance.algo.ts:80","pc":[317]},{"teal":228,"source":"contracts/CompxGovernance.algo.ts:80","pc":[318]},{"teal":229,"source":"contracts/CompxGovernance.algo.ts:80","pc":[319]},{"teal":230,"source":"contracts/CompxGovernance.algo.ts:80","pc":[320]},{"teal":233,"source":"contracts/CompxGovernance.algo.ts:80","errorMessage":"Proposal already exists","pc":[321]},{"teal":238,"source":"contracts/CompxGovernance.algo.ts:83","pc":[322,323]},{"teal":239,"source":"contracts/CompxGovernance.algo.ts:83","pc":[324,325]},{"teal":240,"source":"contracts/CompxGovernance.algo.ts:83","pc":[326,327,328]},{"teal":241,"source":"contracts/CompxGovernance.algo.ts:83","pc":[329]},{"teal":244,"source":"contracts/CompxGovernance.algo.ts:83","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=PROPOSAL_MBR\"}","pc":[330]},{"teal":257,"source":"contracts/CompxGovernance.algo.ts:86","pc":[331]},{"teal":258,"source":"contracts/CompxGovernance.algo.ts:86","pc":[332,333]},{"teal":259,"source":"contracts/CompxGovernance.algo.ts:86","pc":[334]},{"teal":260,"source":"contracts/CompxGovernance.algo.ts:86","pc":[335]},{"teal":261,"source":"contracts/CompxGovernance.algo.ts:86","pc":[336]},{"teal":262,"source":"contracts/CompxGovernance.algo.ts:86","pc":[337]},{"teal":263,"source":"contracts/CompxGovernance.algo.ts:86","pc":[338]},{"teal":264,"source":"contracts/CompxGovernance.algo.ts:86","pc":[339]},{"teal":265,"source":"contracts/CompxGovernance.algo.ts:86","pc":[340]},{"teal":266,"source":"contracts/CompxGovernance.algo.ts:86","pc":[341,342,343,344]},{"teal":267,"source":"contracts/CompxGovernance.algo.ts:87","pc":[345,346]},{"teal":268,"source":"contracts/CompxGovernance.algo.ts:87","pc":[347]},{"teal":269,"source":"contracts/CompxGovernance.algo.ts:87","pc":[348]},{"teal":270,"source":"contracts/CompxGovernance.algo.ts:87","pc":[349]},{"teal":271,"source":"contracts/CompxGovernance.algo.ts:87","pc":[350,351,352]},{"teal":272,"source":"contracts/CompxGovernance.algo.ts:87","pc":[353]},{"teal":273,"source":"contracts/CompxGovernance.algo.ts:87","pc":[354]},{"teal":274,"source":"contracts/CompxGovernance.algo.ts:87","pc":[355,356,357]},{"teal":275,"source":"contracts/CompxGovernance.algo.ts:88","pc":[358,359]},{"teal":276,"source":"contracts/CompxGovernance.algo.ts:88","pc":[360]},{"teal":277,"source":"contracts/CompxGovernance.algo.ts:88","pc":[361]},{"teal":278,"source":"contracts/CompxGovernance.algo.ts:88","pc":[362]},{"teal":279,"source":"contracts/CompxGovernance.algo.ts:88","pc":[363,364,365]},{"teal":280,"source":"contracts/CompxGovernance.algo.ts:88","pc":[366]},{"teal":281,"source":"contracts/CompxGovernance.algo.ts:88","pc":[367]},{"teal":282,"source":"contracts/CompxGovernance.algo.ts:88","pc":[368,369,370]},{"teal":283,"source":"contracts/CompxGovernance.algo.ts:89","pc":[371,372]},{"teal":284,"source":"contracts/CompxGovernance.algo.ts:89","pc":[373,374,375]},{"teal":285,"source":"contracts/CompxGovernance.algo.ts:90","pc":[376,377]},{"teal":286,"source":"contracts/CompxGovernance.algo.ts:90","pc":[378,379,380]},{"teal":287,"source":"contracts/CompxGovernance.algo.ts:91","pc":[381,382]},{"teal":288,"source":"contracts/CompxGovernance.algo.ts:91","pc":[383,384,385]},{"teal":289,"source":"contracts/CompxGovernance.algo.ts:92","pc":[386,387]},{"teal":290,"source":"contracts/CompxGovernance.algo.ts:92","pc":[388,389,390]},{"teal":291,"source":"contracts/CompxGovernance.algo.ts:93","pc":[391,392]},{"teal":292,"source":"contracts/CompxGovernance.algo.ts:93","pc":[393]},{"teal":293,"source":"contracts/CompxGovernance.algo.ts:93","pc":[394,395,396]},{"teal":294,"source":"contracts/CompxGovernance.algo.ts:94","pc":[397,398]},{"teal":295,"source":"contracts/CompxGovernance.algo.ts:94","pc":[399]},{"teal":296,"source":"contracts/CompxGovernance.algo.ts:94","pc":[400,401,402]},{"teal":297,"source":"contracts/CompxGovernance.algo.ts:86","pc":[403]},{"teal":298,"source":"contracts/CompxGovernance.algo.ts:86","pc":[404]},{"teal":299,"source":"contracts/CompxGovernance.algo.ts:86","pc":[405]},{"teal":303,"source":"contracts/CompxGovernance.algo.ts:97","pc":[406,407]},{"teal":304,"source":"contracts/CompxGovernance.algo.ts:97","pc":[408]},{"teal":305,"source":"contracts/CompxGovernance.algo.ts:97","pc":[409]},{"teal":306,"source":"contracts/CompxGovernance.algo.ts:97","pc":[410]},{"teal":307,"source":"contracts/CompxGovernance.algo.ts:97","pc":[411,412]},{"teal":308,"source":"contracts/CompxGovernance.algo.ts:97","pc":[413]},{"teal":309,"source":"contracts/CompxGovernance.algo.ts:97","pc":[414]},{"teal":310,"source":"contracts/CompxGovernance.algo.ts:68","pc":[415]},{"teal":320,"source":"contracts/CompxGovernance.algo.ts:107","pc":[416,417,418]},{"teal":323,"source":"contracts/CompxGovernance.algo.ts:107","pc":[419]},{"teal":327,"source":"contracts/CompxGovernance.algo.ts:115","pc":[420,421]},{"teal":328,"source":"contracts/CompxGovernance.algo.ts:115","pc":[422]},{"teal":329,"source":"contracts/CompxGovernance.algo.ts:115","pc":[423]},{"teal":330,"source":"contracts/CompxGovernance.algo.ts:115","pc":[424]},{"teal":333,"source":"contracts/CompxGovernance.algo.ts:115","errorMessage":"Only the manager can add votes to users","pc":[425]},{"teal":338,"source":"contracts/CompxGovernance.algo.ts:117","pc":[426,427]},{"teal":339,"source":"contracts/CompxGovernance.algo.ts:117","pc":[428,429]},{"teal":340,"source":"contracts/CompxGovernance.algo.ts:117","pc":[430,431,432]},{"teal":341,"source":"contracts/CompxGovernance.algo.ts:117","pc":[433]},{"teal":344,"source":"contracts/CompxGovernance.algo.ts:117","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=2_120\"}","pc":[434]},{"teal":348,"source":"contracts/CompxGovernance.algo.ts:119","pc":[435,436]},{"teal":349,"source":"contracts/CompxGovernance.algo.ts:119","pc":[437,438]},{"teal":353,"source":"contracts/CompxGovernance.algo.ts:121","pc":[439]},{"teal":354,"source":"contracts/CompxGovernance.algo.ts:121","pc":[440,441]},{"teal":355,"source":"contracts/CompxGovernance.algo.ts:121","pc":[442]},{"teal":356,"source":"contracts/CompxGovernance.algo.ts:121","pc":[443]},{"teal":359,"source":"contracts/CompxGovernance.algo.ts:121","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[444]},{"teal":360,"source":"contracts/CompxGovernance.algo.ts:121","pc":[445,446]},{"teal":361,"source":"contracts/CompxGovernance.algo.ts:121","pc":[447,448]},{"teal":362,"source":"contracts/CompxGovernance.algo.ts:121","pc":[449,450,451]},{"teal":363,"source":"contracts/CompxGovernance.algo.ts:121","pc":[452]},{"teal":364,"source":"contracts/CompxGovernance.algo.ts:121","pc":[453,454]},{"teal":365,"source":"contracts/CompxGovernance.algo.ts:121","pc":[455]},{"teal":368,"source":"contracts/CompxGovernance.algo.ts:121","errorMessage":"Proposal already expired","pc":[456]},{"teal":375,"source":"contracts/CompxGovernance.algo.ts:125","pc":[457,458]},{"teal":376,"source":"contracts/CompxGovernance.algo.ts:125","pc":[459,460]},{"teal":377,"source":"contracts/CompxGovernance.algo.ts:125","pc":[461,462]},{"teal":378,"source":"contracts/CompxGovernance.algo.ts:125","pc":[463]},{"teal":379,"source":"contracts/CompxGovernance.algo.ts:125","pc":[464]},{"teal":380,"source":"contracts/CompxGovernance.algo.ts:125","pc":[465]},{"teal":381,"source":"contracts/CompxGovernance.algo.ts:125","pc":[466]},{"teal":382,"source":"contracts/CompxGovernance.algo.ts:125","pc":[467]},{"teal":383,"source":"contracts/CompxGovernance.algo.ts:125","pc":[468]},{"teal":384,"source":"contracts/CompxGovernance.algo.ts:125","pc":[469]},{"teal":387,"source":"contracts/CompxGovernance.algo.ts:124","errorMessage":"User already voted on this proposal","pc":[470]},{"teal":391,"source":"contracts/CompxGovernance.algo.ts:130","pc":[471,472]},{"teal":392,"source":"contracts/CompxGovernance.algo.ts:130","pc":[473,474,475]},{"teal":393,"source":"contracts/CompxGovernance.algo.ts:130","pc":[476]},{"teal":396,"source":"contracts/CompxGovernance.algo.ts:130","errorMessage":"User has not opted in to the contract","pc":[477]},{"teal":400,"source":"contracts/CompxGovernance.algo.ts:132","pc":[478]},{"teal":401,"source":"contracts/CompxGovernance.algo.ts:132","pc":[479,480]},{"teal":402,"source":"contracts/CompxGovernance.algo.ts:132","pc":[481]},{"teal":403,"source":"contracts/CompxGovernance.algo.ts:132","pc":[482]},{"teal":406,"source":"contracts/CompxGovernance.algo.ts:132","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[483]},{"teal":407,"source":"contracts/CompxGovernance.algo.ts:132","pc":[484,485]},{"teal":408,"source":"contracts/CompxGovernance.algo.ts:132","pc":[486,487]},{"teal":409,"source":"contracts/CompxGovernance.algo.ts:132","pc":[488,489]},{"teal":410,"source":"contracts/CompxGovernance.algo.ts:132","pc":[490]},{"teal":411,"source":"contracts/CompxGovernance.algo.ts:132","pc":[491,492]},{"teal":412,"source":"contracts/CompxGovernance.algo.ts:132","pc":[493]},{"teal":413,"source":"contracts/CompxGovernance.algo.ts:132","pc":[494]},{"teal":416,"source":"contracts/CompxGovernance.algo.ts:132","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[495]},{"teal":417,"source":"contracts/CompxGovernance.algo.ts:132","pc":[496,497]},{"teal":418,"source":"contracts/CompxGovernance.algo.ts:132","pc":[498,499]},{"teal":419,"source":"contracts/CompxGovernance.algo.ts:132","pc":[500,501,502]},{"teal":420,"source":"contracts/CompxGovernance.algo.ts:132","pc":[503]},{"teal":421,"source":"contracts/CompxGovernance.algo.ts:132","pc":[504]},{"teal":422,"source":"contracts/CompxGovernance.algo.ts:132","pc":[505]},{"teal":423,"source":"contracts/CompxGovernance.algo.ts:132","pc":[506]},{"teal":424,"source":"contracts/CompxGovernance.algo.ts:132","pc":[507]},{"teal":425,"source":"contracts/CompxGovernance.algo.ts:132","pc":[508]},{"teal":426,"source":"contracts/CompxGovernance.algo.ts:132","pc":[509,510]},{"teal":427,"source":"contracts/CompxGovernance.algo.ts:132","pc":[511]},{"teal":428,"source":"contracts/CompxGovernance.algo.ts:132","pc":[512]},{"teal":429,"source":"contracts/CompxGovernance.algo.ts:132","pc":[513]},{"teal":430,"source":"contracts/CompxGovernance.algo.ts:132","pc":[514]},{"teal":431,"source":"contracts/CompxGovernance.algo.ts:132","pc":[515]},{"teal":432,"source":"contracts/CompxGovernance.algo.ts:132","pc":[516]},{"teal":436,"source":"contracts/CompxGovernance.algo.ts:133","pc":[517]},{"teal":437,"source":"contracts/CompxGovernance.algo.ts:133","pc":[518,519]},{"teal":438,"source":"contracts/CompxGovernance.algo.ts:133","pc":[520]},{"teal":439,"source":"contracts/CompxGovernance.algo.ts:133","pc":[521]},{"teal":442,"source":"contracts/CompxGovernance.algo.ts:133","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[522]},{"teal":443,"source":"contracts/CompxGovernance.algo.ts:133","pc":[523,524]},{"teal":444,"source":"contracts/CompxGovernance.algo.ts:133","pc":[525,526]},{"teal":445,"source":"contracts/CompxGovernance.algo.ts:133","pc":[527,528]},{"teal":446,"source":"contracts/CompxGovernance.algo.ts:133","pc":[529]},{"teal":447,"source":"contracts/CompxGovernance.algo.ts:133","pc":[530,531]},{"teal":448,"source":"contracts/CompxGovernance.algo.ts:133","pc":[532]},{"teal":449,"source":"contracts/CompxGovernance.algo.ts:133","pc":[533]},{"teal":452,"source":"contracts/CompxGovernance.algo.ts:133","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[534]},{"teal":453,"source":"contracts/CompxGovernance.algo.ts:133","pc":[535,536]},{"teal":454,"source":"contracts/CompxGovernance.algo.ts:133","pc":[537,538]},{"teal":455,"source":"contracts/CompxGovernance.algo.ts:133","pc":[539,540,541]},{"teal":456,"source":"contracts/CompxGovernance.algo.ts:133","pc":[542]},{"teal":457,"source":"contracts/CompxGovernance.algo.ts:133","pc":[543,544]},{"teal":458,"source":"contracts/CompxGovernance.algo.ts:133","pc":[545]},{"teal":459,"source":"contracts/CompxGovernance.algo.ts:133","pc":[546]},{"teal":460,"source":"contracts/CompxGovernance.algo.ts:133","pc":[547]},{"teal":461,"source":"contracts/CompxGovernance.algo.ts:133","pc":[548]},{"teal":462,"source":"contracts/CompxGovernance.algo.ts:133","pc":[549,550]},{"teal":463,"source":"contracts/CompxGovernance.algo.ts:133","pc":[551]},{"teal":464,"source":"contracts/CompxGovernance.algo.ts:133","pc":[552]},{"teal":465,"source":"contracts/CompxGovernance.algo.ts:133","pc":[553]},{"teal":466,"source":"contracts/CompxGovernance.algo.ts:133","pc":[554]},{"teal":467,"source":"contracts/CompxGovernance.algo.ts:133","pc":[555]},{"teal":468,"source":"contracts/CompxGovernance.algo.ts:133","pc":[556]},{"teal":473,"source":"contracts/CompxGovernance.algo.ts:134","pc":[557,558]},{"teal":474,"source":"contracts/CompxGovernance.algo.ts:134","pc":[559,560,561]},{"teal":479,"source":"contracts/CompxGovernance.algo.ts:135","pc":[562]},{"teal":480,"source":"contracts/CompxGovernance.algo.ts:135","pc":[563,564]},{"teal":481,"source":"contracts/CompxGovernance.algo.ts:135","pc":[565]},{"teal":482,"source":"contracts/CompxGovernance.algo.ts:135","pc":[566]},{"teal":485,"source":"contracts/CompxGovernance.algo.ts:135","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[567]},{"teal":486,"source":"contracts/CompxGovernance.algo.ts:135","pc":[568,569]},{"teal":487,"source":"contracts/CompxGovernance.algo.ts:135","pc":[570,571]},{"teal":488,"source":"contracts/CompxGovernance.algo.ts:135","pc":[572,573]},{"teal":489,"source":"contracts/CompxGovernance.algo.ts:135","pc":[574]},{"teal":490,"source":"contracts/CompxGovernance.algo.ts:135","pc":[575,576]},{"teal":491,"source":"contracts/CompxGovernance.algo.ts:135","pc":[577]},{"teal":492,"source":"contracts/CompxGovernance.algo.ts:135","pc":[578]},{"teal":495,"source":"contracts/CompxGovernance.algo.ts:135","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[579]},{"teal":496,"source":"contracts/CompxGovernance.algo.ts:135","pc":[580,581]},{"teal":497,"source":"contracts/CompxGovernance.algo.ts:135","pc":[582,583]},{"teal":498,"source":"contracts/CompxGovernance.algo.ts:135","pc":[584,585,586]},{"teal":499,"source":"contracts/CompxGovernance.algo.ts:135","pc":[587]},{"teal":500,"source":"contracts/CompxGovernance.algo.ts:135","pc":[588]},{"teal":501,"source":"contracts/CompxGovernance.algo.ts:135","pc":[589]},{"teal":502,"source":"contracts/CompxGovernance.algo.ts:135","pc":[590]},{"teal":503,"source":"contracts/CompxGovernance.algo.ts:135","pc":[591]},{"teal":504,"source":"contracts/CompxGovernance.algo.ts:135","pc":[592]},{"teal":505,"source":"contracts/CompxGovernance.algo.ts:135","pc":[593,594]},{"teal":506,"source":"contracts/CompxGovernance.algo.ts:135","pc":[595]},{"teal":507,"source":"contracts/CompxGovernance.algo.ts:135","pc":[596]},{"teal":508,"source":"contracts/CompxGovernance.algo.ts:135","pc":[597]},{"teal":509,"source":"contracts/CompxGovernance.algo.ts:135","pc":[598]},{"teal":510,"source":"contracts/CompxGovernance.algo.ts:135","pc":[599]},{"teal":511,"source":"contracts/CompxGovernance.algo.ts:135","pc":[600]},{"teal":515,"source":"contracts/CompxGovernance.algo.ts:136","pc":[601]},{"teal":516,"source":"contracts/CompxGovernance.algo.ts:136","pc":[602,603]},{"teal":517,"source":"contracts/CompxGovernance.algo.ts:136","pc":[604]},{"teal":518,"source":"contracts/CompxGovernance.algo.ts:136","pc":[605]},{"teal":521,"source":"contracts/CompxGovernance.algo.ts:136","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[606]},{"teal":522,"source":"contracts/CompxGovernance.algo.ts:136","pc":[607,608]},{"teal":523,"source":"contracts/CompxGovernance.algo.ts:136","pc":[609,610]},{"teal":524,"source":"contracts/CompxGovernance.algo.ts:136","pc":[611,612]},{"teal":525,"source":"contracts/CompxGovernance.algo.ts:136","pc":[613]},{"teal":526,"source":"contracts/CompxGovernance.algo.ts:136","pc":[614,615]},{"teal":527,"source":"contracts/CompxGovernance.algo.ts:136","pc":[616]},{"teal":528,"source":"contracts/CompxGovernance.algo.ts:136","pc":[617]},{"teal":531,"source":"contracts/CompxGovernance.algo.ts:136","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[618]},{"teal":532,"source":"contracts/CompxGovernance.algo.ts:136","pc":[619,620]},{"teal":533,"source":"contracts/CompxGovernance.algo.ts:136","pc":[621,622]},{"teal":534,"source":"contracts/CompxGovernance.algo.ts:136","pc":[623,624,625]},{"teal":535,"source":"contracts/CompxGovernance.algo.ts:136","pc":[626]},{"teal":536,"source":"contracts/CompxGovernance.algo.ts:136","pc":[627,628]},{"teal":537,"source":"contracts/CompxGovernance.algo.ts:136","pc":[629]},{"teal":538,"source":"contracts/CompxGovernance.algo.ts:136","pc":[630]},{"teal":539,"source":"contracts/CompxGovernance.algo.ts:136","pc":[631]},{"teal":540,"source":"contracts/CompxGovernance.algo.ts:136","pc":[632]},{"teal":541,"source":"contracts/CompxGovernance.algo.ts:136","pc":[633,634]},{"teal":542,"source":"contracts/CompxGovernance.algo.ts:136","pc":[635]},{"teal":543,"source":"contracts/CompxGovernance.algo.ts:136","pc":[636]},{"teal":544,"source":"contracts/CompxGovernance.algo.ts:136","pc":[637]},{"teal":545,"source":"contracts/CompxGovernance.algo.ts:136","pc":[638]},{"teal":546,"source":"contracts/CompxGovernance.algo.ts:136","pc":[639]},{"teal":547,"source":"contracts/CompxGovernance.algo.ts:136","pc":[640]},{"teal":552,"source":"contracts/CompxGovernance.algo.ts:138","pc":[641,642]},{"teal":553,"source":"contracts/CompxGovernance.algo.ts:138","pc":[643,644]},{"teal":554,"source":"contracts/CompxGovernance.algo.ts:138","pc":[645]},{"teal":555,"source":"contracts/CompxGovernance.algo.ts:138","pc":[646]},{"teal":556,"source":"contracts/CompxGovernance.algo.ts:138","pc":[647]},{"teal":557,"source":"contracts/CompxGovernance.algo.ts:138","pc":[648,649]},{"teal":558,"source":"contracts/CompxGovernance.algo.ts:138","pc":[650,651]},{"teal":559,"source":"contracts/CompxGovernance.algo.ts:138","pc":[652,653]},{"teal":560,"source":"contracts/CompxGovernance.algo.ts:138","pc":[654]},{"teal":564,"source":"contracts/CompxGovernance.algo.ts:140","pc":[655,656]},{"teal":565,"source":"contracts/CompxGovernance.algo.ts:140","pc":[657,658]},{"teal":566,"source":"contracts/CompxGovernance.algo.ts:140","pc":[659,660]},{"teal":567,"source":"contracts/CompxGovernance.algo.ts:140","pc":[661]},{"teal":568,"source":"contracts/CompxGovernance.algo.ts:140","pc":[662]},{"teal":569,"source":"contracts/CompxGovernance.algo.ts:140","pc":[663,664]},{"teal":570,"source":"contracts/CompxGovernance.algo.ts:140","pc":[665]},{"teal":571,"source":"contracts/CompxGovernance.algo.ts:140","pc":[666]},{"teal":575,"source":"contracts/CompxGovernance.algo.ts:142","pc":[667,668]},{"teal":576,"source":"contracts/CompxGovernance.algo.ts:142","pc":[669]},{"teal":577,"source":"contracts/CompxGovernance.algo.ts:142","pc":[670]},{"teal":578,"source":"contracts/CompxGovernance.algo.ts:142","pc":[671]},{"teal":579,"source":"contracts/CompxGovernance.algo.ts:142","pc":[672,673]},{"teal":580,"source":"contracts/CompxGovernance.algo.ts:142","pc":[674]},{"teal":581,"source":"contracts/CompxGovernance.algo.ts:142","pc":[675]},{"teal":582,"source":"contracts/CompxGovernance.algo.ts:107","pc":[676]},{"teal":587,"source":"contracts/CompxGovernance.algo.ts:155","pc":[677,678,679]},{"teal":588,"source":"contracts/CompxGovernance.algo.ts:155","pc":[680]},{"teal":591,"source":"contracts/CompxGovernance.algo.ts:155","pc":[681,682,683]},{"teal":592,"source":"contracts/CompxGovernance.algo.ts:155","pc":[684]},{"teal":593,"source":"contracts/CompxGovernance.algo.ts:155","pc":[685]},{"teal":594,"source":"contracts/CompxGovernance.algo.ts:155","pc":[686]},{"teal":595,"source":"contracts/CompxGovernance.algo.ts:155","pc":[687]},{"teal":598,"source":"contracts/CompxGovernance.algo.ts:155","errorMessage":"argument 1 (userAddress) for updateUserCurrentVotingPower must be a address","pc":[688]},{"teal":601,"source":"contracts/CompxGovernance.algo.ts:155","pc":[689,690,691]},{"teal":602,"source":"contracts/CompxGovernance.algo.ts:155","pc":[692]},{"teal":603,"source":"contracts/CompxGovernance.algo.ts:155","pc":[693]},{"teal":615,"source":"contracts/CompxGovernance.algo.ts:155","pc":[694,695,696]},{"teal":618,"source":"contracts/CompxGovernance.algo.ts:155","pc":[697]},{"teal":622,"source":"contracts/CompxGovernance.algo.ts:159","pc":[698,699]},{"teal":623,"source":"contracts/CompxGovernance.algo.ts:159","pc":[700]},{"teal":624,"source":"contracts/CompxGovernance.algo.ts:159","pc":[701]},{"teal":625,"source":"contracts/CompxGovernance.algo.ts:159","pc":[702,703]},{"teal":629,"source":"contracts/CompxGovernance.algo.ts:160","pc":[704,705]},{"teal":630,"source":"contracts/CompxGovernance.algo.ts:160","pc":[706]},{"teal":631,"source":"contracts/CompxGovernance.algo.ts:160","pc":[707,708]},{"teal":632,"source":"contracts/CompxGovernance.algo.ts:160","pc":[709]},{"teal":636,"source":"contracts/CompxGovernance.algo.ts:162","pc":[710,711]},{"teal":637,"source":"contracts/CompxGovernance.algo.ts:162","pc":[712,713]},{"teal":638,"source":"contracts/CompxGovernance.algo.ts:162","pc":[714,715]},{"teal":639,"source":"contracts/CompxGovernance.algo.ts:162","pc":[716]},{"teal":640,"source":"contracts/CompxGovernance.algo.ts:162","pc":[717]},{"teal":641,"source":"contracts/CompxGovernance.algo.ts:162","pc":[718,719]},{"teal":642,"source":"contracts/CompxGovernance.algo.ts:162","pc":[720]},{"teal":643,"source":"contracts/CompxGovernance.algo.ts:162","pc":[721]},{"teal":644,"source":"contracts/CompxGovernance.algo.ts:155","pc":[722]},{"teal":649,"source":"contracts/CompxGovernance.algo.ts:177","pc":[723,724]},{"teal":650,"source":"contracts/CompxGovernance.algo.ts:177","pc":[725]},{"teal":651,"source":"contracts/CompxGovernance.algo.ts:177","pc":[726]},{"teal":652,"source":"contracts/CompxGovernance.algo.ts:177","pc":[727]},{"teal":653,"source":"contracts/CompxGovernance.algo.ts:177","pc":[728,729]},{"teal":654,"source":"contracts/CompxGovernance.algo.ts:177","pc":[730]},{"teal":655,"source":"contracts/CompxGovernance.algo.ts:177","pc":[731]},{"teal":658,"source":"contracts/CompxGovernance.algo.ts:177","errorMessage":"argument 0 (mbrTxn) for makeProposalVote must be a pay transaction","pc":[732]},{"teal":661,"source":"contracts/CompxGovernance.algo.ts:176","pc":[733,734,735]},{"teal":662,"source":"contracts/CompxGovernance.algo.ts:176","pc":[736]},{"teal":665,"source":"contracts/CompxGovernance.algo.ts:175","pc":[737,738,739]},{"teal":666,"source":"contracts/CompxGovernance.algo.ts:175","pc":[740]},{"teal":667,"source":"contracts/CompxGovernance.algo.ts:175","pc":[741]},{"teal":668,"source":"contracts/CompxGovernance.algo.ts:175","pc":[742]},{"teal":669,"source":"contracts/CompxGovernance.algo.ts:175","pc":[743]},{"teal":672,"source":"contracts/CompxGovernance.algo.ts:175","errorMessage":"argument 2 (voterAddress) for makeProposalVote must be a address","pc":[744]},{"teal":675,"source":"contracts/CompxGovernance.algo.ts:174","pc":[745,746,747]},{"teal":676,"source":"contracts/CompxGovernance.algo.ts:174","pc":[748]},{"teal":677,"source":"contracts/CompxGovernance.algo.ts:174","pc":[749]},{"teal":678,"source":"contracts/CompxGovernance.algo.ts:174","pc":[750]},{"teal":679,"source":"contracts/CompxGovernance.algo.ts:174","pc":[751]},{"teal":682,"source":"contracts/CompxGovernance.algo.ts:174","errorMessage":"argument 3 (inFavor) for makeProposalVote must be a bool","pc":[752]},{"teal":683,"source":"contracts/CompxGovernance.algo.ts:174","pc":[753]},{"teal":684,"source":"contracts/CompxGovernance.algo.ts:174","pc":[754]},{"teal":687,"source":"contracts/CompxGovernance.algo.ts:173","pc":[755,756,757]},{"teal":688,"source":"contracts/CompxGovernance.algo.ts:173","pc":[758]},{"teal":689,"source":"contracts/CompxGovernance.algo.ts:173","pc":[759]},{"teal":690,"source":"contracts/CompxGovernance.algo.ts:173","pc":[760]},{"teal":691,"source":"contracts/CompxGovernance.algo.ts:173","pc":[761]},{"teal":694,"source":"contracts/CompxGovernance.algo.ts:173","errorMessage":"argument 4 (proposalId) for makeProposalVote must be a (uint64)","pc":[762]},{"teal":697,"source":"contracts/CompxGovernance.algo.ts:172","pc":[763,764,765]},{"teal":698,"source":"contracts/CompxGovernance.algo.ts:172","pc":[766]},{"teal":699,"source":"contracts/CompxGovernance.algo.ts:172","pc":[767]},{"teal":709,"source":"contracts/CompxGovernance.algo.ts:172","pc":[768,769,770]},{"teal":713,"source":"contracts/CompxGovernance.algo.ts:179","pc":[771,772]},{"teal":714,"source":"contracts/CompxGovernance.algo.ts:179","pc":[773]},{"teal":715,"source":"contracts/CompxGovernance.algo.ts:179","pc":[774]},{"teal":716,"source":"contracts/CompxGovernance.algo.ts:179","pc":[775]},{"teal":719,"source":"contracts/CompxGovernance.algo.ts:179","errorMessage":"Only the manager can add votes to users","pc":[776]},{"teal":724,"source":"contracts/CompxGovernance.algo.ts:182","pc":[777,778]},{"teal":725,"source":"contracts/CompxGovernance.algo.ts:182","pc":[779,780]},{"teal":726,"source":"contracts/CompxGovernance.algo.ts:182","pc":[781,782,783]},{"teal":727,"source":"contracts/CompxGovernance.algo.ts:182","pc":[784]},{"teal":730,"source":"contracts/CompxGovernance.algo.ts:182","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=VOTE_MBR\"}","pc":[785]},{"teal":734,"source":"contracts/CompxGovernance.algo.ts:185","pc":[786,787]},{"teal":735,"source":"contracts/CompxGovernance.algo.ts:185","pc":[788,789]},{"teal":736,"source":"contracts/CompxGovernance.algo.ts:185","pc":[790,791,792]},{"teal":740,"source":"contracts/CompxGovernance.algo.ts:186","pc":[793,794]},{"teal":741,"source":"contracts/CompxGovernance.algo.ts:186","pc":[795,796]},{"teal":742,"source":"contracts/CompxGovernance.algo.ts:186","pc":[797,798]},{"teal":743,"source":"contracts/CompxGovernance.algo.ts:186","pc":[799]},{"teal":744,"source":"contracts/CompxGovernance.algo.ts:186","pc":[800]},{"teal":745,"source":"contracts/CompxGovernance.algo.ts:186","pc":[801,802]},{"teal":746,"source":"contracts/CompxGovernance.algo.ts:186","pc":[803,804]},{"teal":747,"source":"contracts/CompxGovernance.algo.ts:186","pc":[805,806,807]},{"teal":748,"source":"contracts/CompxGovernance.algo.ts:172","pc":[808]},{"teal":753,"source":"contracts/CompxGovernance.algo.ts:194","pc":[809,810,811]},{"teal":754,"source":"contracts/CompxGovernance.algo.ts:194","pc":[812]},{"teal":757,"source":"contracts/CompxGovernance.algo.ts:194","pc":[813,814,815]},{"teal":758,"source":"contracts/CompxGovernance.algo.ts:194","pc":[816]},{"teal":759,"source":"contracts/CompxGovernance.algo.ts:194","pc":[817]},{"teal":760,"source":"contracts/CompxGovernance.algo.ts:194","pc":[818]},{"teal":761,"source":"contracts/CompxGovernance.algo.ts:194","pc":[819]},{"teal":764,"source":"contracts/CompxGovernance.algo.ts:194","errorMessage":"argument 1 (userAddress) for slashUserVotingPower must be a address","pc":[820]},{"teal":767,"source":"contracts/CompxGovernance.algo.ts:194","pc":[821,822,823]},{"teal":768,"source":"contracts/CompxGovernance.algo.ts:194","pc":[824]},{"teal":769,"source":"contracts/CompxGovernance.algo.ts:194","pc":[825]},{"teal":777,"source":"contracts/CompxGovernance.algo.ts:194","pc":[826,827,828]},{"teal":781,"source":"contracts/CompxGovernance.algo.ts:195","pc":[829,830]},{"teal":782,"source":"contracts/CompxGovernance.algo.ts:195","pc":[831]},{"teal":783,"source":"contracts/CompxGovernance.algo.ts:195","pc":[832]},{"teal":784,"source":"contracts/CompxGovernance.algo.ts:195","pc":[833]},{"teal":787,"source":"contracts/CompxGovernance.algo.ts:195","errorMessage":"Only the manager can slash user contribution","pc":[834]},{"teal":791,"source":"contracts/CompxGovernance.algo.ts:196","pc":[835,836]},{"teal":792,"source":"contracts/CompxGovernance.algo.ts:196","pc":[837]},{"teal":793,"source":"contracts/CompxGovernance.algo.ts:196","pc":[838]},{"teal":794,"source":"contracts/CompxGovernance.algo.ts:196","pc":[839,840]},{"teal":795,"source":"contracts/CompxGovernance.algo.ts:196","pc":[841]},{"teal":798,"source":"contracts/CompxGovernance.algo.ts:196","errorMessage":"User does not have enough voting power","pc":[842]},{"teal":802,"source":"contracts/CompxGovernance.algo.ts:197","pc":[843,844]},{"teal":803,"source":"contracts/CompxGovernance.algo.ts:197","pc":[845]},{"teal":804,"source":"contracts/CompxGovernance.algo.ts:197","pc":[846]},{"teal":805,"source":"contracts/CompxGovernance.algo.ts:197","pc":[847,848]},{"teal":806,"source":"contracts/CompxGovernance.algo.ts:197","pc":[849]},{"teal":807,"source":"contracts/CompxGovernance.algo.ts:197","pc":[850,851]},{"teal":808,"source":"contracts/CompxGovernance.algo.ts:197","pc":[852]},{"teal":809,"source":"contracts/CompxGovernance.algo.ts:197","pc":[853,854]},{"teal":810,"source":"contracts/CompxGovernance.algo.ts:197","pc":[855]},{"teal":811,"source":"contracts/CompxGovernance.algo.ts:194","pc":[856]},{"teal":816,"source":"contracts/CompxGovernance.algo.ts:205","pc":[857,858,859,860,861,862]},{"teal":819,"source":"contracts/CompxGovernance.algo.ts:205","pc":[863,864,865]},{"teal":820,"source":"contracts/CompxGovernance.algo.ts:205","pc":[866]},{"teal":821,"source":"contracts/CompxGovernance.algo.ts:205","pc":[867]},{"teal":822,"source":"contracts/CompxGovernance.algo.ts:205","pc":[868]},{"teal":823,"source":"contracts/CompxGovernance.algo.ts:205","pc":[869]},{"teal":826,"source":"contracts/CompxGovernance.algo.ts:205","errorMessage":"argument 0 (proposalId) for getProposalsById must be a (uint64)","pc":[870]},{"teal":829,"source":"contracts/CompxGovernance.algo.ts:205","pc":[871,872,873]},{"teal":830,"source":"contracts/CompxGovernance.algo.ts:205","pc":[874]},{"teal":831,"source":"contracts/CompxGovernance.algo.ts:205","pc":[875]},{"teal":832,"source":"contracts/CompxGovernance.algo.ts:205","pc":[876]},{"teal":833,"source":"contracts/CompxGovernance.algo.ts:205","pc":[877]},{"teal":841,"source":"contracts/CompxGovernance.algo.ts:205","pc":[878,879,880]},{"teal":845,"source":"contracts/CompxGovernance.algo.ts:206","pc":[881]},{"teal":846,"source":"contracts/CompxGovernance.algo.ts:206","pc":[882,883]},{"teal":847,"source":"contracts/CompxGovernance.algo.ts:206","pc":[884]},{"teal":848,"source":"contracts/CompxGovernance.algo.ts:206","pc":[885]},{"teal":851,"source":"contracts/CompxGovernance.algo.ts:206","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[886]},{"teal":852,"source":"contracts/CompxGovernance.algo.ts:205","pc":[887]},{"teal":855,"source":"contracts/CompxGovernance.algo.ts:5","pc":[888,889,890,891,892,893]},{"teal":856,"source":"contracts/CompxGovernance.algo.ts:5","pc":[894,895,896]},{"teal":857,"source":"contracts/CompxGovernance.algo.ts:5","pc":[897,898,899,900]},{"teal":860,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[901]},{"teal":863,"source":"contracts/CompxGovernance.algo.ts:5","pc":[902,903,904,905,906,907]},{"teal":864,"source":"contracts/CompxGovernance.algo.ts:5","pc":[908,909,910,911,912,913]},{"teal":865,"source":"contracts/CompxGovernance.algo.ts:5","pc":[914,915,916,917,918,919]},{"teal":866,"source":"contracts/CompxGovernance.algo.ts:5","pc":[920,921,922,923,924,925]},{"teal":867,"source":"contracts/CompxGovernance.algo.ts:5","pc":[926,927,928,929,930,931]},{"teal":868,"source":"contracts/CompxGovernance.algo.ts:5","pc":[932,933,934,935,936,937]},{"teal":869,"source":"contracts/CompxGovernance.algo.ts:5","pc":[938,939,940]},{"teal":870,"source":"contracts/CompxGovernance.algo.ts:5","pc":[941,942,943,944,945,946,947,948,949,950,951,952,953,954]},{"teal":873,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[955]},{"teal":876,"source":"contracts/CompxGovernance.algo.ts:5","pc":[956,957,958,959,960,961]},{"teal":877,"source":"contracts/CompxGovernance.algo.ts:5","pc":[962,963,964]},{"teal":878,"source":"contracts/CompxGovernance.algo.ts:5","pc":[965,966,967,968]},{"teal":881,"source":"contracts/CompxGovernance.algo.ts:5","errorMessage":"this contract does not implement the given ABI method for call OptIn","pc":[969]},{"teal":884,"source":"contracts/CompxGovernance.algo.ts:5","pc":[970,971,972]},{"teal":885,"source":"contracts/CompxGovernance.algo.ts:5","pc":[973,974]},{"teal":886,"source":"contracts/CompxGovernance.algo.ts:5","pc":[975,976]},{"teal":887,"source":"contracts/CompxGovernance.algo.ts:5","pc":[977]},{"teal":888,"source":"contracts/CompxGovernance.algo.ts:5","pc":[978,979]},{"teal":889,"source":"contracts/CompxGovernance.algo.ts:5","pc":[980,981]},{"teal":890,"source":"contracts/CompxGovernance.algo.ts:5","pc":[982]},{"teal":893,"source":"contracts/CompxGovernance.algo.ts:5","pc":[983,984,985]},{"teal":894,"source":"contracts/CompxGovernance.algo.ts:5","pc":[986,987]},{"teal":895,"source":"contracts/CompxGovernance.algo.ts:5","pc":[988,989]},{"teal":896,"source":"contracts/CompxGovernance.algo.ts:5","pc":[990]},{"teal":897,"source":"contracts/CompxGovernance.algo.ts:5","pc":[991,992]},{"teal":898,"source":"contracts/CompxGovernance.algo.ts:5","pc":[993,994]},{"teal":899,"source":"contracts/CompxGovernance.algo.ts:5","pc":[995]},{"teal":900,"source":"contracts/CompxGovernance.algo.ts:5","pc":[996]},{"teal":901,"source":"contracts/CompxGovernance.algo.ts:5","pc":[997,998]},{"teal":902,"source":"contracts/CompxGovernance.algo.ts:5","pc":[999]},{"teal":903,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1000]},{"teal":904,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1001]},{"teal":905,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1002,1003,1004]},{"teal":906,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1005,1006]},{"teal":907,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1007,1008]},{"teal":908,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1009]},{"teal":909,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1010]},{"teal":910,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1011,1012]},{"teal":911,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1013,1014]},{"teal":912,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1015,1016]},{"teal":913,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1017,1018]},{"teal":914,"source":"contracts/CompxGovernance.algo.ts:5","pc":[1019]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAgCCYKAl9wABl1c2VyX2N1cnJlbnRfdm90aW5nX3Bvd2VyD21hbmFnZXJfYWRkcmVzcw90b3RhbF9wcm9wb3NhbHMIAAAAAAAAAAAadG90YWxfY3VycmVudF92b3RpbmdfcG93ZXIKdXNlcl92b3Rlcwt0b3RhbF92b3RlcwJfdjEYFIEGCzEZCI0MAt4DFAAAAAAAAAAAAtAAAAAAAAAAAAAAAIgAAiJDigAAKzEAZycEI2cnBiNniYgAAiJDigAAKTEAjACLACcHI2aLACojZok2GgFJFSQSRIgAAiJDigEAKTEAjACLACtkEkQri/9niTEWIglJOBAiEkQ2GgMXNhoCVwIANhoBVwIAiAACIkOKBAApRwMxAIwAJwRkIgiMATIHjAKLAov9CIwDiwArZBJEKIsBFlC9TEgURIv8OAiB9yAPRCiLARZQSbxIKSmAAgA0i/9JFRZXBgJMUIgCcYv+SRUWVwYCTFCIAmQnBYgCUicFiAJNJwWIAkgnBYgCQ4sCFogCPYsDFogCN0hQvycEZCIIJwRMZ4mKBQApMQArZBJEi/s4CIHIEA9EMgeMACiL/lC+RDX/NP9XLAgXiwAPRCcJi/6L/1BQvUxIIxJEi/82MgBhRCiL/lC+RDX/NP+BBCiL/lC+RDX/NP9XBAgXIggWXSiL/lBJvEhMvyiL/lC+RDX/NP+BFCiL/lC+RDX/NP9XFAgXi/0IFl0oi/5QSbxITL+L/EEATyiL/lC+RDX/NP+BDCiL/lC+RDX/NP9XDAgXIggWXSiL/lBJvEhMvyiL/lC+RDX/NP+BHCiL/lC+RDX/NP9XHAgXi/0IFl0oi/5QSbxITL+L/ycHYiIIi/8nB08CZicJi/6L/1BQiwAWvycIZCIIJwhMZ4k2GgIXNhoBSRUkEkSIAAIiQ4oCACmL/ypijACL/yqL/mYnBov+JwZkCIsACWeJMRYiCUk4ECISRDYaBBc2GgNJFSQSRDYaAkkVIhJEI1M2GgFJFSUSRIgAAiJDigUAMQArZBJEi/s4CIHgEQ9Ei/yL/Yj/nYv7i/6L/Spii/+L/Yj+eIk2GgIXNhoBSRUkEkSIAAIiQ4oCADEAK2QSRIv/KmKL/g9Ei/8qYov+CYv/Kk8CZomABBUffHU2GgFJFSUSRIgABFCwIkOKAQEoi/9QvkSJgAS4RHs2NhoAjgH9JACABAI+t9SABIryx8+ABGFpxpeABJjy/giABF80gayABLUUKeI2GgCOBv0c/Tz+6v8Y/27/ngCABAGjo/82GgCOAfz1AIoEA4v8i/9Qi/2L/omKBAOL/Iv+UIz8i/9JFYv+FwgWVwYCjP6L/UxQjP2L/Iv9i/6J","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalTitle: string,
  proposalDescription: string,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalTotalPower: bigint,
  proposalYesPower: bigint,
  createdAtTimestamp: bigint,
  expiryTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type ProposalIdType = {
  nonce: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalIdType to the struct representation
 */
export function ProposalIdTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalIdType, APP_SPEC.structs) as ProposalIdType
}

export type ProposalVoteDataType = {
  voteTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalVoteDataType to the struct representation
 */
export function ProposalVoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteDataType, APP_SPEC.structs) as ProposalVoteDataType
}

export type ProposalVoteIdType = {
  proposalId: {
    nonce: bigint
  },
  voterAddress: string
}


/**
 * Converts the ABI tuple representation of a ProposalVoteIdType to the struct representation
 */
export function ProposalVoteIdTypeFromTuple(abiTuple: [[bigint], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteIdType, APP_SPEC.structs) as ProposalVoteIdType
}

/**
 * The argument types for the CompxGovernance contract
 */
export type CompxGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optInToApplication()void': Record<string, never>
    'updateAppManager(address)void': {
      /**
       * The address of the new manager
       */
      newManagerAddress: string
    }
    'createNewProposal(string,string,uint64,pay)void': {
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description of the proposal
       */
      proposalDescription: string
      /**
       * Time in seconds for the proposal to expire
       */
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'updateUserCurrentVotingPower(address,uint64)void': {
      /**
       * address of the user to add the contribution
       */
      userAddress: string
      newVotingPower: bigint | number
    }
    'makeProposalVote((uint64),bool,address,uint64,pay)void': {
      /**
       * The id of the proposal to be voted on
       */
      proposalId: ProposalIdType
      /**
       * If the vote is a yes or no vote
       */
      inFavor: boolean
      /**
       * The address for the voter - Meant for v1.0 while manager "server" will be responsible to execute
       */
      voterAddress: string
      /**
       * The voting power of the voter
       */
      votingPower: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'slashUserVotingPower(address,uint64)void': {
      /**
       * The address of the user to get its contribution slashed
       */
      userAddress: string
      /**
       * The amount to be slashed
       */
      amount: bigint | number
    }
    'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * used to define state of proposals to return
       */
      proposalId: ProposalIdType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optInToApplication()void': []
    'updateAppManager(address)void': [newManagerAddress: string]
    'createNewProposal(string,string,uint64,pay)void': [proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'updateUserCurrentVotingPower(address,uint64)void': [userAddress: string, newVotingPower: bigint | number]
    'makeProposalVote((uint64),bool,address,uint64,pay)void': [proposalId: ProposalIdType, inFavor: boolean, voterAddress: string, votingPower: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'slashUserVotingPower(address,uint64)void': [userAddress: string, amount: bigint | number]
    'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: ProposalIdType]
  }
}

/**
 * The return type for each method
 */
export type CompxGovernanceReturns = {
  'createApplication()void': void
  'optInToApplication()void': void
  'updateAppManager(address)void': void
  'createNewProposal(string,string,uint64,pay)void': void
  'updateUserCurrentVotingPower(address,uint64)void': void
  'makeProposalVote((uint64),bool,address,uint64,pay)void': void
  'slashUserVotingPower(address,uint64)void': void
  'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the CompxGovernance smart contract.
 */
export type CompxGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CompxGovernanceArgs['obj']['createApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['createApplication()void']
      returns: CompxGovernanceReturns['createApplication()void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: CompxGovernanceArgs['obj']['optInToApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['optInToApplication()void']
      returns: CompxGovernanceReturns['optInToApplication()void']
    }>
    & Record<'updateAppManager(address)void' | 'updateAppManager', {
      argsObj: CompxGovernanceArgs['obj']['updateAppManager(address)void']
      argsTuple: CompxGovernanceArgs['tuple']['updateAppManager(address)void']
      returns: CompxGovernanceReturns['updateAppManager(address)void']
    }>
    & Record<'createNewProposal(string,string,uint64,pay)void' | 'createNewProposal', {
      argsObj: CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']
      returns: CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void']
    }>
    & Record<'updateUserCurrentVotingPower(address,uint64)void' | 'updateUserCurrentVotingPower', {
      argsObj: CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']
      returns: CompxGovernanceReturns['updateUserCurrentVotingPower(address,uint64)void']
    }>
    & Record<'makeProposalVote((uint64),bool,address,uint64,pay)void' | 'makeProposalVote', {
      argsObj: CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']
      returns: CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void']
    }>
    & Record<'slashUserVotingPower(address,uint64)void' | 'slashUserVotingPower', {
      argsObj: CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']
      returns: CompxGovernanceReturns['slashUserVotingPower(address,uint64)void']
    }>
    & Record<'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposalsById', {
      argsObj: CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * ProposalDataType Returns the proposal by id
       */
      returns: CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: string
        totalProposals: bigint
        totalVotes: bigint
        totalCurrentVotingPower: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userCurrentVotingPower: bigint
        userVotes: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<ProposalIdType, ProposalDataType>
        votes: Map<ProposalVoteIdType, ProposalVoteDataType>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CompxGovernanceSignatures = keyof CompxGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CompxGovernanceNonVoidMethodSignatures = keyof CompxGovernanceTypes['methods'] extends infer T ? T extends keyof CompxGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CompxGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CompxGovernanceTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CompxGovernanceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CompxGovernanceCreateCallParams =
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CompxGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CompxGovernanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CompxGovernance smart contract
 */
export abstract class CompxGovernanceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CompxGovernanceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CompxGovernanceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CompxGovernance smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the CompxGovernance smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the updateAppManager(address)void ABI method
   *
   * Updates the
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAppManager(params: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAppManager(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newManagerAddress],
    }
  }
  /**
   * Constructs a no op call for the createNewProposal(string,string,uint64,pay)void ABI method
   *
   * Create a new proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProposal(string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the updateUserCurrentVotingPower(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateUserCurrentVotingPower(params: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateUserCurrentVotingPower(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.newVotingPower],
    }
  }
  /**
   * Constructs a no op call for the makeProposalVote((uint64),bool,address,uint64,pay)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeProposalVote((uint64),bool,address,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.inFavor, params.args.voterAddress, params.args.votingPower, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the slashUserVotingPower(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slashUserVotingPower(params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slashUserVotingPower(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CompxGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CompxGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CompxGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CompxGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CompxGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CompxGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CompxGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CompxGovernanceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CompxGovernanceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CompxGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CompxGovernanceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CompxGovernanceReturns['createApplication()void']) }, appClient: new CompxGovernanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CompxGovernance smart contract
 */
export class CompxGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CompxGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CompxGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CompxGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CompxGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateAppManager(address)void` ABI method.
     *
     * Updates the
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAppManager: (params: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.updateAppManager(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateUserCurrentVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateUserCurrentVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.updateUserCurrentVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    slashUserVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateAppManager(address)void` ABI method.
     *
     * Updates the
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAppManager: (params: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.updateAppManager(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateUserCurrentVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateUserCurrentVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.updateUserCurrentVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    slashUserVotingPower: (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateAppManager(address)void` ABI method.
     *
     * Updates the
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAppManager: async (params: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.updateAppManager(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['updateAppManager(address)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProposal: async (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.createNewProposal(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `updateUserCurrentVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateUserCurrentVotingPower: async (params: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.updateUserCurrentVotingPower(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['updateUserCurrentVotingPower(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64,pay)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeProposalVote: async (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.makeProposalVote(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserVotingPower(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    slashUserVotingPower: async (params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.slashUserVotingPower(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['slashUserVotingPower(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: ProposalDataType Returns the proposal by id
     */
    getProposalsById: async (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.getProposalsById(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CompxGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CompxGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CompxGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: result.manager_address,
          totalProposals: result.total_proposals,
          totalVotes: result.total_votes,
          totalCurrentVotingPower: result.total_current_voting_power,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager_address")) as string | undefined },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the total_votes key in global state
       */
      totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_votes")) as bigint | undefined },
      /**
       * Get the current value of the total_current_voting_power key in global state
       */
      totalCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_current_voting_power")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CompxGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userCurrentVotingPower: result.user_current_voting_power,
            userVotes: result.user_votes,
          }
        },
        /**
         * Get the current value of the user_current_voting_power key in local state
         */
        userCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_current_voting_power")) as bigint | undefined },
        /**
         * Get the current value of the user_votes key in local state
         */
        userVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_votes")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current CompxGovernance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<ProposalIdType, ProposalDataType>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<ProposalIdType, ProposalDataType> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: ProposalIdType): Promise<ProposalDataType | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalDataType | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<ProposalVoteIdType, ProposalVoteDataType>> => { return (await this.appClient.state.box.getMap("votes")) as Map<ProposalVoteIdType, ProposalVoteDataType> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: ProposalVoteIdType): Promise<ProposalVoteDataType | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as ProposalVoteDataType | undefined },
      },
    },
  }

  public newGroup(): CompxGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a updateAppManager(address)void method call against the CompxGovernance contract
       */
      updateAppManager(params: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAppManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createNewProposal(string,string,uint64,pay)void method call against the CompxGovernance contract
       */
      createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateUserCurrentVotingPower(address,uint64)void method call against the CompxGovernance contract
       */
      updateUserCurrentVotingPower(params: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateUserCurrentVotingPower(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeProposalVote((uint64),bool,address,uint64,pay)void method call against the CompxGovernance contract
       */
      makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeProposalVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slashUserVotingPower(address,uint64)void method call against the CompxGovernance contract
       */
      slashUserVotingPower(params: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slashUserVotingPower(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) method call against the CompxGovernance contract
       */
      getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalsById(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CompxGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CompxGovernanceComposer
  }
}
export type CompxGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the updateAppManager(address)void ABI method.
   *
   * Updates the
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAppManager(params?: CallParams<CompxGovernanceArgs['obj']['updateAppManager(address)void'] | CompxGovernanceArgs['tuple']['updateAppManager(address)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['updateAppManager(address)void'] | undefined]>

  /**
   * Calls the createNewProposal(string,string,uint64,pay)void ABI method.
   *
   * Create a new proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProposal(params?: CallParams<CompxGovernanceArgs['obj']['createNewProposal(string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(string,string,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['createNewProposal(string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the updateUserCurrentVotingPower(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateUserCurrentVotingPower(params?: CallParams<CompxGovernanceArgs['obj']['updateUserCurrentVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['updateUserCurrentVotingPower(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['updateUserCurrentVotingPower(address,uint64)void'] | undefined]>

  /**
   * Calls the makeProposalVote((uint64),bool,address,uint64,pay)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeProposalVote(params?: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64,pay)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64,pay)void'] | undefined]>

  /**
   * Calls the slashUserVotingPower(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashUserVotingPower(params?: CallParams<CompxGovernanceArgs['obj']['slashUserVotingPower(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserVotingPower(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['slashUserVotingPower(address,uint64)void'] | undefined]>

  /**
   * Calls the getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalsById(params?: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['getProposalsById((uint64))(string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompxGovernance smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CompxGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CompxGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CompxGovernanceComposerResults<TReturns>>
}
export type CompxGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

