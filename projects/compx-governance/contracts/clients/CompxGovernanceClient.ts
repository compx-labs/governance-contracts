/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CompxGovernance","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToApplication","desc":"OPT-IN to the application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["OptIn"]}},{"name":"createNewProposal","desc":"Create a new proposal","args":[{"name":"proposalType","type":"uint64","desc":"Type of the proposal - can be reg or pool"},{"name":"proposalTitle","type":"string","desc":"Title of the proposal"},{"name":"proposalDescription","type":"string","desc":"Description of the proposal"},{"name":"expiresIn","type":"uint64","desc":"Time in seconds for the proposal to expire"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"makeProposalVote","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"proposalId","type":"(uint64)","desc":"The id of the proposal to be voted on","struct":"ProposalIdType"},{"name":"inFavor","type":"bool","desc":"If the vote is a yes or no vote"},{"name":"voterAddress","type":"address","desc":"The address for the voter - Meant for v1.0 while deployer \"server\" will be responsible to execute"},{"name":"votingPower","type":"uint64","desc":"The voting power of the voter"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"slashUserContribution","desc":"Add one to the user contribution once it votes on a pool proposal","args":[{"name":"userAddress","type":"address","desc":"The address of the user to get its contribution slashed"},{"name":"amount","type":"uint64","desc":"The amount to be slashed"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"getProposalsById","args":[{"name":"proposalId","type":"(uint64)","desc":"used to define state of proposals to return","struct":"ProposalIdType"}],"returns":{"type":"(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)","desc":"ProposalDataType Returns the proposal by id","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"ProposalDataType":[{"name":"proposalType","type":"uint64"},{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalTotalPower","type":"uint64"},{"name":"proposalYesPower","type":"uint64"},{"name":"createdAtTimestamp","type":"uint64"},{"name":"expiryTimestamp","type":"uint64"}],"ProposalIdType":[{"name":"nonce","type":"uint64"}],"ProposalVoteDataType":[{"name":"voteTimestamp","type":"uint64"}],"ProposalVoteIdType":[{"name":"proposalId","type":[{"name":"nonce","type":"uint64"}]},{"name":"voterAddress","type":"address"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":4}},"keys":{"global":{"deployer_address":{"key":"ZGVwbG95ZXJfYWRkcmVzcw==","keyType":"AVMBytes","valueType":"address"},"total_proposals":{"key":"dG90YWxfcHJvcG9zYWxz","keyType":"AVMBytes","valueType":"uint64"},"total_votes":{"key":"dG90YWxfdm90ZXM=","keyType":"AVMBytes","valueType":"uint64"},"total_current_voting_power":{"key":"dG90YWxfY3VycmVudF92b3RpbmdfcG93ZXI=","keyType":"AVMBytes","valueType":"uint64"}},"local":{"user_current_voting_power":{"key":"dXNlcl9jdXJyZW50X3ZvdGluZ19wb3dlcg==","keyType":"AVMBytes","valueType":"uint64"},"user_contribution":{"key":"dXNlcl9jb250cmlidXRpb24=","keyType":"AVMBytes","valueType":"uint64"},"user_votes":{"key":"dXNlcl92b3Rlcw==","keyType":"AVMBytes","valueType":"uint64"},"user_special_votes":{"key":"dXNlcl9zcGVjaWFsX3ZvdGVz","keyType":"AVMBytes","valueType":"uint64"}},"box":{}},"maps":{"global":{},"local":{},"box":{"proposals":{"keyType":"ProposalIdType","valueType":"ProposalDataType","prefix":"_p"},"votes":{"keyType":"ProposalVoteIdType","valueType":"ProposalVoteDataType","prefix":"_v"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/CompxGovernance.algo.ts:6","pc":[0]},{"teal":2,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/CompxGovernance.algo.ts:6","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170]},{"teal":15,"source":"contracts/CompxGovernance.algo.ts:6","pc":[171,172]},{"teal":16,"source":"contracts/CompxGovernance.algo.ts:6","pc":[173]},{"teal":17,"source":"contracts/CompxGovernance.algo.ts:6","pc":[174,175]},{"teal":18,"source":"contracts/CompxGovernance.algo.ts:6","pc":[176]},{"teal":19,"source":"contracts/CompxGovernance.algo.ts:6","pc":[177,178]},{"teal":20,"source":"contracts/CompxGovernance.algo.ts:6","pc":[179]},{"teal":21,"source":"contracts/CompxGovernance.algo.ts:6","pc":[180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205]},{"teal":25,"source":"contracts/CompxGovernance.algo.ts:6","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[206]},{"teal":30,"source":"contracts/CompxGovernance.algo.ts:35","pc":[207,208,209]},{"teal":31,"source":"contracts/CompxGovernance.algo.ts:35","pc":[210]},{"teal":32,"source":"contracts/CompxGovernance.algo.ts:35","pc":[211]},{"teal":36,"source":"contracts/CompxGovernance.algo.ts:35","pc":[212,213,214]},{"teal":40,"source":"contracts/CompxGovernance.algo.ts:36","pc":[215]},{"teal":41,"source":"contracts/CompxGovernance.algo.ts:36","pc":[216,217]},{"teal":42,"source":"contracts/CompxGovernance.algo.ts:36","pc":[218]},{"teal":46,"source":"contracts/CompxGovernance.algo.ts:37","pc":[219,220]},{"teal":47,"source":"contracts/CompxGovernance.algo.ts:37","pc":[221]},{"teal":48,"source":"contracts/CompxGovernance.algo.ts:37","pc":[222]},{"teal":52,"source":"contracts/CompxGovernance.algo.ts:38","pc":[223,224]},{"teal":53,"source":"contracts/CompxGovernance.algo.ts:38","pc":[225]},{"teal":54,"source":"contracts/CompxGovernance.algo.ts:38","pc":[226]},{"teal":55,"source":"contracts/CompxGovernance.algo.ts:35","pc":[227]},{"teal":60,"source":"contracts/CompxGovernance.algo.ts:45","pc":[228,229,230]},{"teal":61,"source":"contracts/CompxGovernance.algo.ts:45","pc":[231]},{"teal":62,"source":"contracts/CompxGovernance.algo.ts:45","pc":[232]},{"teal":68,"source":"contracts/CompxGovernance.algo.ts:45","pc":[233,234,235]},{"teal":71,"source":"contracts/CompxGovernance.algo.ts:45","pc":[236]},{"teal":75,"source":"contracts/CompxGovernance.algo.ts:47","pc":[237,238]},{"teal":76,"source":"contracts/CompxGovernance.algo.ts:47","pc":[239,240]},{"teal":80,"source":"contracts/CompxGovernance.algo.ts:48","pc":[241,242]},{"teal":81,"source":"contracts/CompxGovernance.algo.ts:48","pc":[243]},{"teal":82,"source":"contracts/CompxGovernance.algo.ts:48","pc":[244]},{"teal":83,"source":"contracts/CompxGovernance.algo.ts:48","pc":[245]},{"teal":87,"source":"contracts/CompxGovernance.algo.ts:49","pc":[246,247]},{"teal":88,"source":"contracts/CompxGovernance.algo.ts:49","pc":[248,249]},{"teal":89,"source":"contracts/CompxGovernance.algo.ts:49","pc":[250]},{"teal":90,"source":"contracts/CompxGovernance.algo.ts:49","pc":[251]},{"teal":94,"source":"contracts/CompxGovernance.algo.ts:50","pc":[252,253]},{"teal":95,"source":"contracts/CompxGovernance.algo.ts:50","pc":[254,255]},{"teal":96,"source":"contracts/CompxGovernance.algo.ts:50","pc":[256]},{"teal":97,"source":"contracts/CompxGovernance.algo.ts:50","pc":[257]},{"teal":101,"source":"contracts/CompxGovernance.algo.ts:51","pc":[258,259]},{"teal":102,"source":"contracts/CompxGovernance.algo.ts:51","pc":[260,261]},{"teal":103,"source":"contracts/CompxGovernance.algo.ts:51","pc":[262]},{"teal":104,"source":"contracts/CompxGovernance.algo.ts:51","pc":[263]},{"teal":105,"source":"contracts/CompxGovernance.algo.ts:45","pc":[264]},{"teal":110,"source":"contracts/CompxGovernance.algo.ts:67","pc":[265,266]},{"teal":111,"source":"contracts/CompxGovernance.algo.ts:67","pc":[267]},{"teal":112,"source":"contracts/CompxGovernance.algo.ts:67","pc":[268]},{"teal":113,"source":"contracts/CompxGovernance.algo.ts:67","pc":[269]},{"teal":114,"source":"contracts/CompxGovernance.algo.ts:67","pc":[270,271]},{"teal":115,"source":"contracts/CompxGovernance.algo.ts:67","pc":[272]},{"teal":116,"source":"contracts/CompxGovernance.algo.ts:67","pc":[273]},{"teal":119,"source":"contracts/CompxGovernance.algo.ts:67","errorMessage":"argument 0 (mbrTxn) for createNewProposal must be a pay transaction","pc":[274]},{"teal":122,"source":"contracts/CompxGovernance.algo.ts:66","pc":[275,276,277]},{"teal":123,"source":"contracts/CompxGovernance.algo.ts:66","pc":[278]},{"teal":126,"source":"contracts/CompxGovernance.algo.ts:65","pc":[279,280,281]},{"teal":127,"source":"contracts/CompxGovernance.algo.ts:65","pc":[282,283,284]},{"teal":130,"source":"contracts/CompxGovernance.algo.ts:64","pc":[285,286,287]},{"teal":131,"source":"contracts/CompxGovernance.algo.ts:64","pc":[288,289,290]},{"teal":134,"source":"contracts/CompxGovernance.algo.ts:63","pc":[291,292,293]},{"teal":135,"source":"contracts/CompxGovernance.algo.ts:63","pc":[294]},{"teal":138,"source":"contracts/CompxGovernance.algo.ts:62","pc":[295,296,297]},{"teal":139,"source":"contracts/CompxGovernance.algo.ts:62","pc":[298]},{"teal":140,"source":"contracts/CompxGovernance.algo.ts:62","pc":[299]},{"teal":150,"source":"contracts/CompxGovernance.algo.ts:62","pc":[300,301,302]},{"teal":153,"source":"contracts/CompxGovernance.algo.ts:62","pc":[303]},{"teal":154,"source":"contracts/CompxGovernance.algo.ts:62","pc":[304,305]},{"teal":158,"source":"contracts/CompxGovernance.algo.ts:69","pc":[306,307]},{"teal":159,"source":"contracts/CompxGovernance.algo.ts:69","pc":[308,309]},{"teal":163,"source":"contracts/CompxGovernance.algo.ts:72","pc":[310,311]},{"teal":164,"source":"contracts/CompxGovernance.algo.ts:72","pc":[312]},{"teal":165,"source":"contracts/CompxGovernance.algo.ts:72","pc":[313]},{"teal":166,"source":"contracts/CompxGovernance.algo.ts:72","pc":[314]},{"teal":167,"source":"contracts/CompxGovernance.algo.ts:72","pc":[315,316]},{"teal":171,"source":"contracts/CompxGovernance.algo.ts:73","pc":[317,318]},{"teal":172,"source":"contracts/CompxGovernance.algo.ts:73","pc":[319,320]},{"teal":176,"source":"contracts/CompxGovernance.algo.ts:76","pc":[321,322]},{"teal":177,"source":"contracts/CompxGovernance.algo.ts:76","pc":[323,324]},{"teal":178,"source":"contracts/CompxGovernance.algo.ts:76","pc":[325]},{"teal":179,"source":"contracts/CompxGovernance.algo.ts:76","pc":[326,327]},{"teal":183,"source":"contracts/CompxGovernance.algo.ts:79","pc":[328,329]},{"teal":184,"source":"contracts/CompxGovernance.algo.ts:79","pc":[330]},{"teal":185,"source":"contracts/CompxGovernance.algo.ts:79","pc":[331]},{"teal":186,"source":"contracts/CompxGovernance.algo.ts:79","pc":[332]},{"teal":189,"source":"contracts/CompxGovernance.algo.ts:79","errorMessage":"Only the deployer can create proposals","pc":[333]},{"teal":193,"source":"contracts/CompxGovernance.algo.ts:80","pc":[334]},{"teal":194,"source":"contracts/CompxGovernance.algo.ts:80","pc":[335,336]},{"teal":195,"source":"contracts/CompxGovernance.algo.ts:80","pc":[337]},{"teal":196,"source":"contracts/CompxGovernance.algo.ts:80","pc":[338]},{"teal":197,"source":"contracts/CompxGovernance.algo.ts:80","pc":[339]},{"teal":198,"source":"contracts/CompxGovernance.algo.ts:80","pc":[340]},{"teal":199,"source":"contracts/CompxGovernance.algo.ts:80","pc":[341]},{"teal":200,"source":"contracts/CompxGovernance.algo.ts:80","pc":[342]},{"teal":203,"source":"contracts/CompxGovernance.algo.ts:80","errorMessage":"Proposal already exists","pc":[343]},{"teal":208,"source":"contracts/CompxGovernance.algo.ts:83","pc":[344,345]},{"teal":209,"source":"contracts/CompxGovernance.algo.ts:83","pc":[346,347]},{"teal":210,"source":"contracts/CompxGovernance.algo.ts:83","pc":[348,349,350]},{"teal":211,"source":"contracts/CompxGovernance.algo.ts:83","pc":[351]},{"teal":214,"source":"contracts/CompxGovernance.algo.ts:83","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=proposalMbr\"}","pc":[352]},{"teal":228,"source":"contracts/CompxGovernance.algo.ts:86","pc":[353]},{"teal":229,"source":"contracts/CompxGovernance.algo.ts:86","pc":[354,355]},{"teal":230,"source":"contracts/CompxGovernance.algo.ts:86","pc":[356]},{"teal":231,"source":"contracts/CompxGovernance.algo.ts:86","pc":[357]},{"teal":232,"source":"contracts/CompxGovernance.algo.ts:86","pc":[358]},{"teal":233,"source":"contracts/CompxGovernance.algo.ts:86","pc":[359]},{"teal":234,"source":"contracts/CompxGovernance.algo.ts:86","pc":[360]},{"teal":235,"source":"contracts/CompxGovernance.algo.ts:86","pc":[361]},{"teal":236,"source":"contracts/CompxGovernance.algo.ts:86","pc":[362]},{"teal":237,"source":"contracts/CompxGovernance.algo.ts:86","pc":[363,364,365,366]},{"teal":238,"source":"contracts/CompxGovernance.algo.ts:87","pc":[367,368]},{"teal":239,"source":"contracts/CompxGovernance.algo.ts:87","pc":[369]},{"teal":240,"source":"contracts/CompxGovernance.algo.ts:87","pc":[370,371,372]},{"teal":241,"source":"contracts/CompxGovernance.algo.ts:88","pc":[373,374]},{"teal":242,"source":"contracts/CompxGovernance.algo.ts:88","pc":[375]},{"teal":243,"source":"contracts/CompxGovernance.algo.ts:88","pc":[376]},{"teal":244,"source":"contracts/CompxGovernance.algo.ts:88","pc":[377]},{"teal":245,"source":"contracts/CompxGovernance.algo.ts:88","pc":[378,379,380]},{"teal":246,"source":"contracts/CompxGovernance.algo.ts:88","pc":[381]},{"teal":247,"source":"contracts/CompxGovernance.algo.ts:88","pc":[382]},{"teal":248,"source":"contracts/CompxGovernance.algo.ts:88","pc":[383,384,385]},{"teal":249,"source":"contracts/CompxGovernance.algo.ts:89","pc":[386,387]},{"teal":250,"source":"contracts/CompxGovernance.algo.ts:89","pc":[388]},{"teal":251,"source":"contracts/CompxGovernance.algo.ts:89","pc":[389]},{"teal":252,"source":"contracts/CompxGovernance.algo.ts:89","pc":[390]},{"teal":253,"source":"contracts/CompxGovernance.algo.ts:89","pc":[391,392,393]},{"teal":254,"source":"contracts/CompxGovernance.algo.ts:89","pc":[394]},{"teal":255,"source":"contracts/CompxGovernance.algo.ts:89","pc":[395]},{"teal":256,"source":"contracts/CompxGovernance.algo.ts:89","pc":[396,397,398]},{"teal":257,"source":"contracts/CompxGovernance.algo.ts:90","pc":[399,400]},{"teal":258,"source":"contracts/CompxGovernance.algo.ts:90","pc":[401,402,403]},{"teal":259,"source":"contracts/CompxGovernance.algo.ts:91","pc":[404,405]},{"teal":260,"source":"contracts/CompxGovernance.algo.ts:91","pc":[406,407,408]},{"teal":261,"source":"contracts/CompxGovernance.algo.ts:92","pc":[409,410]},{"teal":262,"source":"contracts/CompxGovernance.algo.ts:92","pc":[411,412,413]},{"teal":263,"source":"contracts/CompxGovernance.algo.ts:93","pc":[414,415]},{"teal":264,"source":"contracts/CompxGovernance.algo.ts:93","pc":[416,417,418]},{"teal":265,"source":"contracts/CompxGovernance.algo.ts:94","pc":[419,420]},{"teal":266,"source":"contracts/CompxGovernance.algo.ts:94","pc":[421]},{"teal":267,"source":"contracts/CompxGovernance.algo.ts:94","pc":[422,423,424]},{"teal":268,"source":"contracts/CompxGovernance.algo.ts:95","pc":[425,426]},{"teal":269,"source":"contracts/CompxGovernance.algo.ts:95","pc":[427]},{"teal":270,"source":"contracts/CompxGovernance.algo.ts:95","pc":[428,429,430]},{"teal":271,"source":"contracts/CompxGovernance.algo.ts:86","pc":[431]},{"teal":272,"source":"contracts/CompxGovernance.algo.ts:86","pc":[432]},{"teal":273,"source":"contracts/CompxGovernance.algo.ts:86","pc":[433]},{"teal":277,"source":"contracts/CompxGovernance.algo.ts:98","pc":[434,435]},{"teal":278,"source":"contracts/CompxGovernance.algo.ts:98","pc":[436]},{"teal":279,"source":"contracts/CompxGovernance.algo.ts:98","pc":[437]},{"teal":280,"source":"contracts/CompxGovernance.algo.ts:98","pc":[438]},{"teal":281,"source":"contracts/CompxGovernance.algo.ts:98","pc":[439,440]},{"teal":282,"source":"contracts/CompxGovernance.algo.ts:98","pc":[441]},{"teal":283,"source":"contracts/CompxGovernance.algo.ts:98","pc":[442]},{"teal":284,"source":"contracts/CompxGovernance.algo.ts:62","pc":[443]},{"teal":294,"source":"contracts/CompxGovernance.algo.ts:108","pc":[444,445,446]},{"teal":297,"source":"contracts/CompxGovernance.algo.ts:108","pc":[447]},{"teal":298,"source":"contracts/CompxGovernance.algo.ts:108","pc":[448]},{"teal":302,"source":"contracts/CompxGovernance.algo.ts:110","pc":[449,450]},{"teal":303,"source":"contracts/CompxGovernance.algo.ts:110","pc":[451]},{"teal":304,"source":"contracts/CompxGovernance.algo.ts:110","pc":[452]},{"teal":305,"source":"contracts/CompxGovernance.algo.ts:110","pc":[453]},{"teal":308,"source":"contracts/CompxGovernance.algo.ts:110","errorMessage":"Only the deployer can add votes to users","pc":[454]},{"teal":312,"source":"contracts/CompxGovernance.algo.ts:112","pc":[455,456]},{"teal":313,"source":"contracts/CompxGovernance.algo.ts:112","pc":[457,458]},{"teal":317,"source":"contracts/CompxGovernance.algo.ts:113","pc":[459,460]},{"teal":318,"source":"contracts/CompxGovernance.algo.ts:113","pc":[461]},{"teal":319,"source":"contracts/CompxGovernance.algo.ts:113","pc":[462]},{"teal":320,"source":"contracts/CompxGovernance.algo.ts:113","pc":[463,464]},{"teal":324,"source":"contracts/CompxGovernance.algo.ts:116","pc":[465,466]},{"teal":325,"source":"contracts/CompxGovernance.algo.ts:116","pc":[467]},{"teal":326,"source":"contracts/CompxGovernance.algo.ts:116","pc":[468]},{"teal":327,"source":"contracts/CompxGovernance.algo.ts:116","pc":[469]},{"teal":330,"source":"contracts/CompxGovernance.algo.ts:116","errorMessage":"User has not opted in to the contract","pc":[470]},{"teal":334,"source":"contracts/CompxGovernance.algo.ts:118","pc":[471]},{"teal":335,"source":"contracts/CompxGovernance.algo.ts:118","pc":[472,473]},{"teal":336,"source":"contracts/CompxGovernance.algo.ts:118","pc":[474]},{"teal":337,"source":"contracts/CompxGovernance.algo.ts:118","pc":[475]},{"teal":340,"source":"contracts/CompxGovernance.algo.ts:118","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[476]},{"teal":341,"source":"contracts/CompxGovernance.algo.ts:118","pc":[477,478]},{"teal":342,"source":"contracts/CompxGovernance.algo.ts:118","pc":[479,480]},{"teal":343,"source":"contracts/CompxGovernance.algo.ts:118","pc":[481,482,483]},{"teal":344,"source":"contracts/CompxGovernance.algo.ts:118","pc":[484]},{"teal":345,"source":"contracts/CompxGovernance.algo.ts:118","pc":[485,486]},{"teal":346,"source":"contracts/CompxGovernance.algo.ts:118","pc":[487]},{"teal":349,"source":"contracts/CompxGovernance.algo.ts:118","errorMessage":"Proposal already expired","pc":[488]},{"teal":356,"source":"contracts/CompxGovernance.algo.ts:121","pc":[489,490]},{"teal":357,"source":"contracts/CompxGovernance.algo.ts:121","pc":[491,492]},{"teal":358,"source":"contracts/CompxGovernance.algo.ts:121","pc":[493,494]},{"teal":359,"source":"contracts/CompxGovernance.algo.ts:121","pc":[495]},{"teal":360,"source":"contracts/CompxGovernance.algo.ts:121","pc":[496]},{"teal":361,"source":"contracts/CompxGovernance.algo.ts:121","pc":[497]},{"teal":362,"source":"contracts/CompxGovernance.algo.ts:121","pc":[498]},{"teal":363,"source":"contracts/CompxGovernance.algo.ts:121","pc":[499]},{"teal":364,"source":"contracts/CompxGovernance.algo.ts:121","pc":[500]},{"teal":367,"source":"contracts/CompxGovernance.algo.ts:120","errorMessage":"User already voted on this proposal","pc":[501]},{"teal":371,"source":"contracts/CompxGovernance.algo.ts:124","pc":[502]},{"teal":372,"source":"contracts/CompxGovernance.algo.ts:124","pc":[503,504]},{"teal":373,"source":"contracts/CompxGovernance.algo.ts:124","pc":[505]},{"teal":374,"source":"contracts/CompxGovernance.algo.ts:124","pc":[506]},{"teal":377,"source":"contracts/CompxGovernance.algo.ts:124","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[507]},{"teal":378,"source":"contracts/CompxGovernance.algo.ts:124","pc":[508,509]},{"teal":379,"source":"contracts/CompxGovernance.algo.ts:124","pc":[510,511]},{"teal":380,"source":"contracts/CompxGovernance.algo.ts:124","pc":[512,513]},{"teal":381,"source":"contracts/CompxGovernance.algo.ts:124","pc":[514]},{"teal":382,"source":"contracts/CompxGovernance.algo.ts:124","pc":[515,516]},{"teal":383,"source":"contracts/CompxGovernance.algo.ts:124","pc":[517]},{"teal":384,"source":"contracts/CompxGovernance.algo.ts:124","pc":[518]},{"teal":387,"source":"contracts/CompxGovernance.algo.ts:124","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[519]},{"teal":388,"source":"contracts/CompxGovernance.algo.ts:124","pc":[520,521]},{"teal":389,"source":"contracts/CompxGovernance.algo.ts:124","pc":[522,523]},{"teal":390,"source":"contracts/CompxGovernance.algo.ts:124","pc":[524,525,526]},{"teal":391,"source":"contracts/CompxGovernance.algo.ts:124","pc":[527]},{"teal":392,"source":"contracts/CompxGovernance.algo.ts:124","pc":[528]},{"teal":393,"source":"contracts/CompxGovernance.algo.ts:124","pc":[529]},{"teal":394,"source":"contracts/CompxGovernance.algo.ts:124","pc":[530]},{"teal":395,"source":"contracts/CompxGovernance.algo.ts:124","pc":[531]},{"teal":396,"source":"contracts/CompxGovernance.algo.ts:124","pc":[532]},{"teal":397,"source":"contracts/CompxGovernance.algo.ts:124","pc":[533,534]},{"teal":398,"source":"contracts/CompxGovernance.algo.ts:124","pc":[535]},{"teal":399,"source":"contracts/CompxGovernance.algo.ts:124","pc":[536]},{"teal":400,"source":"contracts/CompxGovernance.algo.ts:124","pc":[537]},{"teal":401,"source":"contracts/CompxGovernance.algo.ts:124","pc":[538]},{"teal":402,"source":"contracts/CompxGovernance.algo.ts:124","pc":[539]},{"teal":403,"source":"contracts/CompxGovernance.algo.ts:124","pc":[540]},{"teal":407,"source":"contracts/CompxGovernance.algo.ts:125","pc":[541]},{"teal":408,"source":"contracts/CompxGovernance.algo.ts:125","pc":[542,543]},{"teal":409,"source":"contracts/CompxGovernance.algo.ts:125","pc":[544]},{"teal":410,"source":"contracts/CompxGovernance.algo.ts:125","pc":[545]},{"teal":413,"source":"contracts/CompxGovernance.algo.ts:125","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[546]},{"teal":414,"source":"contracts/CompxGovernance.algo.ts:125","pc":[547,548]},{"teal":415,"source":"contracts/CompxGovernance.algo.ts:125","pc":[549,550]},{"teal":416,"source":"contracts/CompxGovernance.algo.ts:125","pc":[551,552]},{"teal":417,"source":"contracts/CompxGovernance.algo.ts:125","pc":[553]},{"teal":418,"source":"contracts/CompxGovernance.algo.ts:125","pc":[554,555]},{"teal":419,"source":"contracts/CompxGovernance.algo.ts:125","pc":[556]},{"teal":420,"source":"contracts/CompxGovernance.algo.ts:125","pc":[557]},{"teal":423,"source":"contracts/CompxGovernance.algo.ts:125","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[558]},{"teal":424,"source":"contracts/CompxGovernance.algo.ts:125","pc":[559,560]},{"teal":425,"source":"contracts/CompxGovernance.algo.ts:125","pc":[561,562]},{"teal":426,"source":"contracts/CompxGovernance.algo.ts:125","pc":[563,564,565]},{"teal":427,"source":"contracts/CompxGovernance.algo.ts:125","pc":[566]},{"teal":428,"source":"contracts/CompxGovernance.algo.ts:125","pc":[567,568]},{"teal":429,"source":"contracts/CompxGovernance.algo.ts:125","pc":[569]},{"teal":430,"source":"contracts/CompxGovernance.algo.ts:125","pc":[570]},{"teal":431,"source":"contracts/CompxGovernance.algo.ts:125","pc":[571]},{"teal":432,"source":"contracts/CompxGovernance.algo.ts:125","pc":[572]},{"teal":433,"source":"contracts/CompxGovernance.algo.ts:125","pc":[573,574]},{"teal":434,"source":"contracts/CompxGovernance.algo.ts:125","pc":[575]},{"teal":435,"source":"contracts/CompxGovernance.algo.ts:125","pc":[576]},{"teal":436,"source":"contracts/CompxGovernance.algo.ts:125","pc":[577]},{"teal":437,"source":"contracts/CompxGovernance.algo.ts:125","pc":[578]},{"teal":438,"source":"contracts/CompxGovernance.algo.ts:125","pc":[579]},{"teal":439,"source":"contracts/CompxGovernance.algo.ts:125","pc":[580]},{"teal":444,"source":"contracts/CompxGovernance.algo.ts:126","pc":[581,582]},{"teal":445,"source":"contracts/CompxGovernance.algo.ts:126","pc":[583,584,585]},{"teal":450,"source":"contracts/CompxGovernance.algo.ts:127","pc":[586]},{"teal":451,"source":"contracts/CompxGovernance.algo.ts:127","pc":[587,588]},{"teal":452,"source":"contracts/CompxGovernance.algo.ts:127","pc":[589]},{"teal":453,"source":"contracts/CompxGovernance.algo.ts:127","pc":[590]},{"teal":456,"source":"contracts/CompxGovernance.algo.ts:127","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[591]},{"teal":457,"source":"contracts/CompxGovernance.algo.ts:127","pc":[592,593]},{"teal":458,"source":"contracts/CompxGovernance.algo.ts:127","pc":[594,595]},{"teal":459,"source":"contracts/CompxGovernance.algo.ts:127","pc":[596,597]},{"teal":460,"source":"contracts/CompxGovernance.algo.ts:127","pc":[598]},{"teal":461,"source":"contracts/CompxGovernance.algo.ts:127","pc":[599,600]},{"teal":462,"source":"contracts/CompxGovernance.algo.ts:127","pc":[601]},{"teal":463,"source":"contracts/CompxGovernance.algo.ts:127","pc":[602]},{"teal":466,"source":"contracts/CompxGovernance.algo.ts:127","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[603]},{"teal":467,"source":"contracts/CompxGovernance.algo.ts:127","pc":[604,605]},{"teal":468,"source":"contracts/CompxGovernance.algo.ts:127","pc":[606,607]},{"teal":469,"source":"contracts/CompxGovernance.algo.ts:127","pc":[608,609,610]},{"teal":470,"source":"contracts/CompxGovernance.algo.ts:127","pc":[611]},{"teal":471,"source":"contracts/CompxGovernance.algo.ts:127","pc":[612]},{"teal":472,"source":"contracts/CompxGovernance.algo.ts:127","pc":[613]},{"teal":473,"source":"contracts/CompxGovernance.algo.ts:127","pc":[614]},{"teal":474,"source":"contracts/CompxGovernance.algo.ts:127","pc":[615]},{"teal":475,"source":"contracts/CompxGovernance.algo.ts:127","pc":[616]},{"teal":476,"source":"contracts/CompxGovernance.algo.ts:127","pc":[617,618]},{"teal":477,"source":"contracts/CompxGovernance.algo.ts:127","pc":[619]},{"teal":478,"source":"contracts/CompxGovernance.algo.ts:127","pc":[620]},{"teal":479,"source":"contracts/CompxGovernance.algo.ts:127","pc":[621]},{"teal":480,"source":"contracts/CompxGovernance.algo.ts:127","pc":[622]},{"teal":481,"source":"contracts/CompxGovernance.algo.ts:127","pc":[623]},{"teal":482,"source":"contracts/CompxGovernance.algo.ts:127","pc":[624]},{"teal":486,"source":"contracts/CompxGovernance.algo.ts:128","pc":[625]},{"teal":487,"source":"contracts/CompxGovernance.algo.ts:128","pc":[626,627]},{"teal":488,"source":"contracts/CompxGovernance.algo.ts:128","pc":[628]},{"teal":489,"source":"contracts/CompxGovernance.algo.ts:128","pc":[629]},{"teal":492,"source":"contracts/CompxGovernance.algo.ts:128","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[630]},{"teal":493,"source":"contracts/CompxGovernance.algo.ts:128","pc":[631,632]},{"teal":494,"source":"contracts/CompxGovernance.algo.ts:128","pc":[633,634]},{"teal":495,"source":"contracts/CompxGovernance.algo.ts:128","pc":[635,636]},{"teal":496,"source":"contracts/CompxGovernance.algo.ts:128","pc":[637]},{"teal":497,"source":"contracts/CompxGovernance.algo.ts:128","pc":[638,639]},{"teal":498,"source":"contracts/CompxGovernance.algo.ts:128","pc":[640]},{"teal":499,"source":"contracts/CompxGovernance.algo.ts:128","pc":[641]},{"teal":502,"source":"contracts/CompxGovernance.algo.ts:128","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[642]},{"teal":503,"source":"contracts/CompxGovernance.algo.ts:128","pc":[643,644]},{"teal":504,"source":"contracts/CompxGovernance.algo.ts:128","pc":[645,646]},{"teal":505,"source":"contracts/CompxGovernance.algo.ts:128","pc":[647,648,649]},{"teal":506,"source":"contracts/CompxGovernance.algo.ts:128","pc":[650]},{"teal":507,"source":"contracts/CompxGovernance.algo.ts:128","pc":[651,652]},{"teal":508,"source":"contracts/CompxGovernance.algo.ts:128","pc":[653]},{"teal":509,"source":"contracts/CompxGovernance.algo.ts:128","pc":[654]},{"teal":510,"source":"contracts/CompxGovernance.algo.ts:128","pc":[655]},{"teal":511,"source":"contracts/CompxGovernance.algo.ts:128","pc":[656]},{"teal":512,"source":"contracts/CompxGovernance.algo.ts:128","pc":[657,658]},{"teal":513,"source":"contracts/CompxGovernance.algo.ts:128","pc":[659]},{"teal":514,"source":"contracts/CompxGovernance.algo.ts:128","pc":[660]},{"teal":515,"source":"contracts/CompxGovernance.algo.ts:128","pc":[661]},{"teal":516,"source":"contracts/CompxGovernance.algo.ts:128","pc":[662]},{"teal":517,"source":"contracts/CompxGovernance.algo.ts:128","pc":[663]},{"teal":518,"source":"contracts/CompxGovernance.algo.ts:128","pc":[664]},{"teal":523,"source":"contracts/CompxGovernance.algo.ts:130","pc":[665,666]},{"teal":524,"source":"contracts/CompxGovernance.algo.ts:130","pc":[667,668]},{"teal":525,"source":"contracts/CompxGovernance.algo.ts:130","pc":[669]},{"teal":526,"source":"contracts/CompxGovernance.algo.ts:130","pc":[670]},{"teal":527,"source":"contracts/CompxGovernance.algo.ts:130","pc":[671]},{"teal":528,"source":"contracts/CompxGovernance.algo.ts:130","pc":[672,673]},{"teal":529,"source":"contracts/CompxGovernance.algo.ts:130","pc":[674,675]},{"teal":530,"source":"contracts/CompxGovernance.algo.ts:130","pc":[676,677]},{"teal":531,"source":"contracts/CompxGovernance.algo.ts:130","pc":[678]},{"teal":535,"source":"contracts/CompxGovernance.algo.ts:132","pc":[679,680]},{"teal":536,"source":"contracts/CompxGovernance.algo.ts:132","pc":[681,682]},{"teal":537,"source":"contracts/CompxGovernance.algo.ts:132","pc":[683,684]},{"teal":538,"source":"contracts/CompxGovernance.algo.ts:132","pc":[685]},{"teal":539,"source":"contracts/CompxGovernance.algo.ts:132","pc":[686]},{"teal":540,"source":"contracts/CompxGovernance.algo.ts:132","pc":[687,688]},{"teal":541,"source":"contracts/CompxGovernance.algo.ts:132","pc":[689]},{"teal":542,"source":"contracts/CompxGovernance.algo.ts:132","pc":[690]},{"teal":547,"source":"contracts/CompxGovernance.algo.ts:135","pc":[691]},{"teal":548,"source":"contracts/CompxGovernance.algo.ts:135","pc":[692,693]},{"teal":549,"source":"contracts/CompxGovernance.algo.ts:135","pc":[694]},{"teal":550,"source":"contracts/CompxGovernance.algo.ts:135","pc":[695]},{"teal":553,"source":"contracts/CompxGovernance.algo.ts:135","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[696]},{"teal":554,"source":"contracts/CompxGovernance.algo.ts:135","pc":[697,698]},{"teal":555,"source":"contracts/CompxGovernance.algo.ts:135","pc":[699,700]},{"teal":556,"source":"contracts/CompxGovernance.algo.ts:135","pc":[701,702,703]},{"teal":557,"source":"contracts/CompxGovernance.algo.ts:135","pc":[704]},{"teal":558,"source":"contracts/CompxGovernance.algo.ts:135","pc":[705]},{"teal":559,"source":"contracts/CompxGovernance.algo.ts:135","pc":[706]},{"teal":560,"source":"contracts/CompxGovernance.algo.ts:135","pc":[707,708,709]},{"teal":565,"source":"contracts/CompxGovernance.algo.ts:136","pc":[710,711]},{"teal":566,"source":"contracts/CompxGovernance.algo.ts:136","pc":[712,713,714]},{"teal":570,"source":"contracts/CompxGovernance.algo.ts:137","pc":[715,716]},{"teal":571,"source":"contracts/CompxGovernance.algo.ts:137","pc":[717,718,719]},{"teal":576,"source":"contracts/CompxGovernance.algo.ts:140","pc":[720,721]},{"teal":577,"source":"contracts/CompxGovernance.algo.ts:140","pc":[722]},{"teal":578,"source":"contracts/CompxGovernance.algo.ts:140","pc":[723]},{"teal":579,"source":"contracts/CompxGovernance.algo.ts:140","pc":[724]},{"teal":580,"source":"contracts/CompxGovernance.algo.ts:140","pc":[725,726]},{"teal":581,"source":"contracts/CompxGovernance.algo.ts:140","pc":[727]},{"teal":582,"source":"contracts/CompxGovernance.algo.ts:140","pc":[728]},{"teal":583,"source":"contracts/CompxGovernance.algo.ts:108","pc":[729]},{"teal":590,"source":"contracts/CompxGovernance.algo.ts:147","pc":[730,731,732]},{"teal":593,"source":"contracts/CompxGovernance.algo.ts:147","pc":[733]},{"teal":597,"source":"contracts/CompxGovernance.algo.ts:152","pc":[734,735]},{"teal":598,"source":"contracts/CompxGovernance.algo.ts:152","pc":[736]},{"teal":599,"source":"contracts/CompxGovernance.algo.ts:152","pc":[737]},{"teal":600,"source":"contracts/CompxGovernance.algo.ts:152","pc":[738,739]},{"teal":604,"source":"contracts/CompxGovernance.algo.ts:155","pc":[740,741]},{"teal":605,"source":"contracts/CompxGovernance.algo.ts:155","pc":[742]},{"teal":606,"source":"contracts/CompxGovernance.algo.ts:155","pc":[743]},{"teal":609,"source":"contracts/CompxGovernance.algo.ts:155","errorMessage":"User has not opted in to the contract","pc":[744]},{"teal":613,"source":"contracts/CompxGovernance.algo.ts:156","pc":[745,746]},{"teal":614,"source":"contracts/CompxGovernance.algo.ts:156","pc":[747]},{"teal":615,"source":"contracts/CompxGovernance.algo.ts:156","pc":[748]},{"teal":616,"source":"contracts/CompxGovernance.algo.ts:156","pc":[749]},{"teal":617,"source":"contracts/CompxGovernance.algo.ts:156","pc":[750]},{"teal":618,"source":"contracts/CompxGovernance.algo.ts:156","pc":[751,752]},{"teal":619,"source":"contracts/CompxGovernance.algo.ts:156","pc":[753]},{"teal":620,"source":"contracts/CompxGovernance.algo.ts:156","pc":[754,755]},{"teal":621,"source":"contracts/CompxGovernance.algo.ts:156","pc":[756]},{"teal":622,"source":"contracts/CompxGovernance.algo.ts:147","pc":[757]},{"teal":629,"source":"contracts/CompxGovernance.algo.ts:163","pc":[758,759,760]},{"teal":633,"source":"contracts/CompxGovernance.algo.ts:173","pc":[761,762]},{"teal":634,"source":"contracts/CompxGovernance.algo.ts:173","pc":[763,764]},{"teal":635,"source":"contracts/CompxGovernance.algo.ts:173","pc":[765]},{"teal":636,"source":"contracts/CompxGovernance.algo.ts:173","pc":[766]},{"teal":637,"source":"contracts/CompxGovernance.algo.ts:173","pc":[767]},{"teal":638,"source":"contracts/CompxGovernance.algo.ts:173","pc":[768,769]},{"teal":639,"source":"contracts/CompxGovernance.algo.ts:173","pc":[770,771]},{"teal":640,"source":"contracts/CompxGovernance.algo.ts:173","pc":[772,773]},{"teal":641,"source":"contracts/CompxGovernance.algo.ts:173","pc":[774]},{"teal":642,"source":"contracts/CompxGovernance.algo.ts:163","pc":[775]},{"teal":650,"source":"contracts/CompxGovernance.algo.ts:181","pc":[776,777,778]},{"teal":653,"source":"contracts/CompxGovernance.algo.ts:181","pc":[779]},{"teal":657,"source":"contracts/CompxGovernance.algo.ts:185","pc":[780,781]},{"teal":658,"source":"contracts/CompxGovernance.algo.ts:185","pc":[782,783]},{"teal":659,"source":"contracts/CompxGovernance.algo.ts:185","pc":[784]},{"teal":660,"source":"contracts/CompxGovernance.algo.ts:185","pc":[785,786]},{"teal":664,"source":"contracts/CompxGovernance.algo.ts:186","pc":[787,788]},{"teal":665,"source":"contracts/CompxGovernance.algo.ts:186","pc":[789,790]},{"teal":666,"source":"contracts/CompxGovernance.algo.ts:186","pc":[791,792]},{"teal":667,"source":"contracts/CompxGovernance.algo.ts:186","pc":[793]},{"teal":671,"source":"contracts/CompxGovernance.algo.ts:188","pc":[794,795]},{"teal":672,"source":"contracts/CompxGovernance.algo.ts:188","pc":[796]},{"teal":673,"source":"contracts/CompxGovernance.algo.ts:188","pc":[797,798]},{"teal":674,"source":"contracts/CompxGovernance.algo.ts:188","pc":[799,800]},{"teal":675,"source":"contracts/CompxGovernance.algo.ts:188","pc":[801]},{"teal":676,"source":"contracts/CompxGovernance.algo.ts:188","pc":[802]},{"teal":677,"source":"contracts/CompxGovernance.algo.ts:188","pc":[803,804]},{"teal":678,"source":"contracts/CompxGovernance.algo.ts:188","pc":[805]},{"teal":679,"source":"contracts/CompxGovernance.algo.ts:188","pc":[806]},{"teal":680,"source":"contracts/CompxGovernance.algo.ts:181","pc":[807]},{"teal":685,"source":"contracts/CompxGovernance.algo.ts:198","pc":[808,809,810]},{"teal":686,"source":"contracts/CompxGovernance.algo.ts:198","pc":[811]},{"teal":689,"source":"contracts/CompxGovernance.algo.ts:198","pc":[812,813,814]},{"teal":690,"source":"contracts/CompxGovernance.algo.ts:198","pc":[815]},{"teal":691,"source":"contracts/CompxGovernance.algo.ts:198","pc":[816]},{"teal":692,"source":"contracts/CompxGovernance.algo.ts:198","pc":[817]},{"teal":693,"source":"contracts/CompxGovernance.algo.ts:198","pc":[818]},{"teal":696,"source":"contracts/CompxGovernance.algo.ts:198","errorMessage":"argument 1 (voterAddress) for makeProposalVote must be a address","pc":[819]},{"teal":699,"source":"contracts/CompxGovernance.algo.ts:198","pc":[820,821,822]},{"teal":700,"source":"contracts/CompxGovernance.algo.ts:198","pc":[823]},{"teal":701,"source":"contracts/CompxGovernance.algo.ts:198","pc":[824]},{"teal":702,"source":"contracts/CompxGovernance.algo.ts:198","pc":[825]},{"teal":703,"source":"contracts/CompxGovernance.algo.ts:198","pc":[826]},{"teal":706,"source":"contracts/CompxGovernance.algo.ts:198","errorMessage":"argument 2 (inFavor) for makeProposalVote must be a bool","pc":[827]},{"teal":707,"source":"contracts/CompxGovernance.algo.ts:198","pc":[828]},{"teal":708,"source":"contracts/CompxGovernance.algo.ts:198","pc":[829]},{"teal":711,"source":"contracts/CompxGovernance.algo.ts:198","pc":[830,831,832]},{"teal":712,"source":"contracts/CompxGovernance.algo.ts:198","pc":[833]},{"teal":713,"source":"contracts/CompxGovernance.algo.ts:198","pc":[834]},{"teal":714,"source":"contracts/CompxGovernance.algo.ts:198","pc":[835]},{"teal":715,"source":"contracts/CompxGovernance.algo.ts:198","pc":[836]},{"teal":718,"source":"contracts/CompxGovernance.algo.ts:198","errorMessage":"argument 3 (proposalId) for makeProposalVote must be a (uint64)","pc":[837]},{"teal":721,"source":"contracts/CompxGovernance.algo.ts:198","pc":[838,839,840]},{"teal":722,"source":"contracts/CompxGovernance.algo.ts:198","pc":[841]},{"teal":723,"source":"contracts/CompxGovernance.algo.ts:198","pc":[842]},{"teal":733,"source":"contracts/CompxGovernance.algo.ts:198","pc":[843,844,845]},{"teal":737,"source":"contracts/CompxGovernance.algo.ts:199","pc":[846,847]},{"teal":738,"source":"contracts/CompxGovernance.algo.ts:199","pc":[848]},{"teal":739,"source":"contracts/CompxGovernance.algo.ts:199","pc":[849]},{"teal":740,"source":"contracts/CompxGovernance.algo.ts:199","pc":[850]},{"teal":743,"source":"contracts/CompxGovernance.algo.ts:199","errorMessage":"Only the deployer can add votes to users","pc":[851]},{"teal":747,"source":"contracts/CompxGovernance.algo.ts:202","pc":[852,853]},{"teal":748,"source":"contracts/CompxGovernance.algo.ts:202","pc":[854,855]},{"teal":749,"source":"contracts/CompxGovernance.algo.ts:202","pc":[856,857,858]},{"teal":753,"source":"contracts/CompxGovernance.algo.ts:203","pc":[859,860]},{"teal":754,"source":"contracts/CompxGovernance.algo.ts:203","pc":[861,862]},{"teal":755,"source":"contracts/CompxGovernance.algo.ts:203","pc":[863,864]},{"teal":756,"source":"contracts/CompxGovernance.algo.ts:203","pc":[865]},{"teal":757,"source":"contracts/CompxGovernance.algo.ts:203","pc":[866,867]},{"teal":758,"source":"contracts/CompxGovernance.algo.ts:203","pc":[868,869]},{"teal":759,"source":"contracts/CompxGovernance.algo.ts:203","pc":[870,871,872]},{"teal":760,"source":"contracts/CompxGovernance.algo.ts:198","pc":[873]},{"teal":765,"source":"contracts/CompxGovernance.algo.ts:211","pc":[874,875,876]},{"teal":766,"source":"contracts/CompxGovernance.algo.ts:211","pc":[877]},{"teal":769,"source":"contracts/CompxGovernance.algo.ts:211","pc":[878,879,880]},{"teal":770,"source":"contracts/CompxGovernance.algo.ts:211","pc":[881]},{"teal":771,"source":"contracts/CompxGovernance.algo.ts:211","pc":[882]},{"teal":772,"source":"contracts/CompxGovernance.algo.ts:211","pc":[883]},{"teal":773,"source":"contracts/CompxGovernance.algo.ts:211","pc":[884]},{"teal":776,"source":"contracts/CompxGovernance.algo.ts:211","errorMessage":"argument 1 (userAddress) for slashUserContribution must be a address","pc":[885]},{"teal":779,"source":"contracts/CompxGovernance.algo.ts:211","pc":[886,887,888]},{"teal":780,"source":"contracts/CompxGovernance.algo.ts:211","pc":[889]},{"teal":781,"source":"contracts/CompxGovernance.algo.ts:211","pc":[890]},{"teal":789,"source":"contracts/CompxGovernance.algo.ts:211","pc":[891,892,893]},{"teal":792,"source":"contracts/CompxGovernance.algo.ts:211","pc":[894]},{"teal":796,"source":"contracts/CompxGovernance.algo.ts:212","pc":[895]},{"teal":797,"source":"contracts/CompxGovernance.algo.ts:212","pc":[896,897]},{"teal":801,"source":"contracts/CompxGovernance.algo.ts:214","pc":[898,899]},{"teal":802,"source":"contracts/CompxGovernance.algo.ts:214","pc":[900]},{"teal":803,"source":"contracts/CompxGovernance.algo.ts:214","pc":[901]},{"teal":804,"source":"contracts/CompxGovernance.algo.ts:214","pc":[902]},{"teal":807,"source":"contracts/CompxGovernance.algo.ts:214","errorMessage":"Only the deployer can slash user contribution","pc":[903]},{"teal":814,"source":"contracts/CompxGovernance.algo.ts:216","pc":[904,905]},{"teal":815,"source":"contracts/CompxGovernance.algo.ts:216","pc":[906]},{"teal":816,"source":"contracts/CompxGovernance.algo.ts:216","pc":[907]},{"teal":817,"source":"contracts/CompxGovernance.algo.ts:216","pc":[908]},{"teal":818,"source":"contracts/CompxGovernance.algo.ts:216","pc":[909]},{"teal":821,"source":"contracts/CompxGovernance.algo.ts:215","errorMessage":"User does not have enough contribution to be slashed","pc":[910]},{"teal":825,"source":"contracts/CompxGovernance.algo.ts:219","pc":[911,912]},{"teal":826,"source":"contracts/CompxGovernance.algo.ts:219","pc":[913]},{"teal":827,"source":"contracts/CompxGovernance.algo.ts:219","pc":[914]},{"teal":828,"source":"contracts/CompxGovernance.algo.ts:219","pc":[915,916]},{"teal":829,"source":"contracts/CompxGovernance.algo.ts:219","pc":[917]},{"teal":830,"source":"contracts/CompxGovernance.algo.ts:219","pc":[918,919]},{"teal":831,"source":"contracts/CompxGovernance.algo.ts:219","pc":[920]},{"teal":832,"source":"contracts/CompxGovernance.algo.ts:219","pc":[921,922]},{"teal":833,"source":"contracts/CompxGovernance.algo.ts:219","pc":[923]},{"teal":834,"source":"contracts/CompxGovernance.algo.ts:211","pc":[924]},{"teal":839,"source":"contracts/CompxGovernance.algo.ts:227","pc":[925,926,927,928,929,930]},{"teal":842,"source":"contracts/CompxGovernance.algo.ts:227","pc":[931,932,933]},{"teal":843,"source":"contracts/CompxGovernance.algo.ts:227","pc":[934]},{"teal":844,"source":"contracts/CompxGovernance.algo.ts:227","pc":[935]},{"teal":845,"source":"contracts/CompxGovernance.algo.ts:227","pc":[936]},{"teal":846,"source":"contracts/CompxGovernance.algo.ts:227","pc":[937]},{"teal":849,"source":"contracts/CompxGovernance.algo.ts:227","errorMessage":"argument 0 (proposalId) for getProposalsById must be a (uint64)","pc":[938]},{"teal":852,"source":"contracts/CompxGovernance.algo.ts:227","pc":[939,940,941]},{"teal":853,"source":"contracts/CompxGovernance.algo.ts:227","pc":[942]},{"teal":854,"source":"contracts/CompxGovernance.algo.ts:227","pc":[943]},{"teal":855,"source":"contracts/CompxGovernance.algo.ts:227","pc":[944]},{"teal":856,"source":"contracts/CompxGovernance.algo.ts:227","pc":[945]},{"teal":864,"source":"contracts/CompxGovernance.algo.ts:227","pc":[946,947,948]},{"teal":868,"source":"contracts/CompxGovernance.algo.ts:228","pc":[949]},{"teal":869,"source":"contracts/CompxGovernance.algo.ts:228","pc":[950,951]},{"teal":870,"source":"contracts/CompxGovernance.algo.ts:228","pc":[952]},{"teal":871,"source":"contracts/CompxGovernance.algo.ts:228","pc":[953]},{"teal":874,"source":"contracts/CompxGovernance.algo.ts:228","errorMessage":"box value does not exist: this.proposals(proposalId).value","pc":[954]},{"teal":875,"source":"contracts/CompxGovernance.algo.ts:227","pc":[955]},{"teal":878,"source":"contracts/CompxGovernance.algo.ts:6","pc":[956,957,958,959,960,961]},{"teal":879,"source":"contracts/CompxGovernance.algo.ts:6","pc":[962,963,964]},{"teal":880,"source":"contracts/CompxGovernance.algo.ts:6","pc":[965,966,967,968]},{"teal":883,"source":"contracts/CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[969]},{"teal":886,"source":"contracts/CompxGovernance.algo.ts:6","pc":[970,971,972,973,974,975]},{"teal":887,"source":"contracts/CompxGovernance.algo.ts:6","pc":[976,977,978,979,980,981]},{"teal":888,"source":"contracts/CompxGovernance.algo.ts:6","pc":[982,983,984,985,986,987]},{"teal":889,"source":"contracts/CompxGovernance.algo.ts:6","pc":[988,989,990,991,992,993]},{"teal":890,"source":"contracts/CompxGovernance.algo.ts:6","pc":[994,995,996]},{"teal":891,"source":"contracts/CompxGovernance.algo.ts:6","pc":[997,998,999,1000,1001,1002,1003,1004,1005,1006]},{"teal":894,"source":"contracts/CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1007]},{"teal":897,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1008,1009,1010,1011,1012,1013]},{"teal":898,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1014,1015,1016]},{"teal":899,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1017,1018,1019,1020]},{"teal":902,"source":"contracts/CompxGovernance.algo.ts:6","errorMessage":"this contract does not implement the given ABI method for call OptIn","pc":[1021]},{"teal":905,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1022,1023,1024]},{"teal":906,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1025,1026]},{"teal":907,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1027,1028]},{"teal":908,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1029]},{"teal":909,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1030,1031]},{"teal":910,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1032,1033]},{"teal":911,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1034]},{"teal":914,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1035,1036,1037]},{"teal":915,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1038,1039]},{"teal":916,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1040,1041]},{"teal":917,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1042]},{"teal":918,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1043,1044]},{"teal":919,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1045,1046]},{"teal":920,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1047]},{"teal":921,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1048]},{"teal":922,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1049,1050]},{"teal":923,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1051]},{"teal":924,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1052]},{"teal":925,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1053]},{"teal":926,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1054,1055,1056]},{"teal":927,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1057,1058]},{"teal":928,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1059,1060]},{"teal":929,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1061]},{"teal":930,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1062]},{"teal":931,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1063,1064]},{"teal":932,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1065,1066]},{"teal":933,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1067,1068]},{"teal":934,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1069,1070]},{"teal":935,"source":"contracts/CompxGovernance.algo.ts:6","pc":[1071]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAIICYMAl9wABF1c2VyX2NvbnRyaWJ1dGlvbhBkZXBsb3llcl9hZGRyZXNzGXVzZXJfY3VycmVudF92b3RpbmdfcG93ZXIPdG90YWxfcHJvcG9zYWxzCAAAAAAAAAAAGnRvdGFsX2N1cnJlbnRfdm90aW5nX3Bvd2VyEnVzZXJfc3BlY2lhbF92b3Rlcwp1c2VyX3ZvdGVzC3RvdGFsX3ZvdGVzAl92MRgUgQYLMRkIjQwC/AMiAAAAAAAAAAAC7gAAAAAAAAAAAAAAiAACIkOKAAArMQBnJwUjZycHI2eJiAACIkOKAAApMQCMAIsAKiJmiwAnCSNmiwAnCCNmiwAnBCNmiTEWIglJOBAiEkQ2GgQXNhoDVwIANhoCVwIANhoBF4gAAiJDigUAKUcDMQCMACcFZCIIjAEyB4wCiwKL/AiMA4sAK2QSRCiLARZQvUxIFESL+zgIgeAWD0QoiwEWUEm8SCkpgAIAPIv/FogCiYv+SRUWVwYCTFCIAomL/UkVFlcGAkxQiAJ8JwaIAmonBogCZScGiAJgJwaIAluLAhaIAlWLAxaIAk9IUL8nBWQiCCcFTGeJigQAKUkxACtkEkQyB4wAi/8qYowBiwEjEhREKIv+UL5ENf80/1c0CBeLAA9EJwuL/ov/UFC9TEgURCiL/lC+RDX/NP+BDCiL/lC+RDX/NP9XDAgXIggWXSiL/lBJvEhMvyiL/lC+RDX/NP+BHCiL/lC+RDX/NP9XHAgXi/0IFl0oi/5QSbxITL+L/EEATyiL/lC+RDX/NP+BFCiL/lC+RDX/NP9XFAgXIggWXSiL/lBJvEhMvyiL/lC+RDX/NP+BJCiL/lC+RDX/NP9XJAgXi/0IFl0oi/5QSbxITL+L/ycJYiIIi/8nCU8CZicLi/6L/1BQiwAWvyiL/lC+RDX/NP9XAAgXIhJBAAqL/4gAD4v/iAAmJwpkIggnCkxniYoBACmL/ypijACLACIPRIv/KmIiCIv/Kk8CZomKAQCL/ycIYiIIi/8nCE8CZomKAgApi/8nBGKMAIv/JwSL/mYnB2SL/osACQgnB0xniTYaBBc2GgNJFSUSRDYaAkkVIhJEI1M2GgFJFSQSRIgAAiJDigQAMQArZBJEi/yL/Yj/rYv+i/0nBGKL/4v9iP5TiTYaAhc2GgFJFSUSRIgAAiJDigIAKSKMADEAK2QSRIv/KmIiDUSL/ypii/4Ji/8qTwJmiYAEFR98dTYaAUkVJBJEiAAEULAiQ4oBASiL/1C+RImABLhEezY2GgCOAf0GAIAEiu0jYoAE+YVPiIAEJKU2vIAE5JPEozYaAI4E/Rr/Of97/64AgAQBo6P/NhoAjgH85wCKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalType: bigint,
  proposalTitle: string,
  proposalDescription: string,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalTotalPower: bigint,
  proposalYesPower: bigint,
  createdAtTimestamp: bigint,
  expiryTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type ProposalIdType = {
  nonce: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalIdType to the struct representation
 */
export function ProposalIdTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalIdType, APP_SPEC.structs) as ProposalIdType
}

export type ProposalVoteDataType = {
  voteTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalVoteDataType to the struct representation
 */
export function ProposalVoteDataTypeFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteDataType, APP_SPEC.structs) as ProposalVoteDataType
}

export type ProposalVoteIdType = {
  proposalId: {
    nonce: bigint
  },
  voterAddress: string
}


/**
 * Converts the ABI tuple representation of a ProposalVoteIdType to the struct representation
 */
export function ProposalVoteIdTypeFromTuple(abiTuple: [[bigint], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalVoteIdType, APP_SPEC.structs) as ProposalVoteIdType
}

/**
 * The argument types for the CompxGovernance contract
 */
export type CompxGovernanceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'optInToApplication()void': Record<string, never>
    'createNewProposal(uint64,string,string,uint64,pay)void': {
      /**
       * Type of the proposal - can be reg or pool
       */
      proposalType: bigint | number
      /**
       * Title of the proposal
       */
      proposalTitle: string
      /**
       * Description of the proposal
       */
      proposalDescription: string
      /**
       * Time in seconds for the proposal to expire
       */
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'makeProposalVote((uint64),bool,address,uint64)void': {
      /**
       * The id of the proposal to be voted on
       */
      proposalId: ProposalIdType
      /**
       * If the vote is a yes or no vote
       */
      inFavor: boolean
      /**
       * The address for the voter - Meant for v1.0 while deployer "server" will be responsible to execute
       */
      voterAddress: string
      /**
       * The voting power of the voter
       */
      votingPower: bigint | number
    }
    'slashUserContribution(address,uint64)void': {
      /**
       * The address of the user to get its contribution slashed
       */
      userAddress: string
      /**
       * The amount to be slashed
       */
      amount: bigint | number
    }
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': {
      /**
       * used to define state of proposals to return
       */
      proposalId: ProposalIdType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'optInToApplication()void': []
    'createNewProposal(uint64,string,string,uint64,pay)void': [proposalType: bigint | number, proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'makeProposalVote((uint64),bool,address,uint64)void': [proposalId: ProposalIdType, inFavor: boolean, voterAddress: string, votingPower: bigint | number]
    'slashUserContribution(address,uint64)void': [userAddress: string, amount: bigint | number]
    'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: ProposalIdType]
  }
}

/**
 * The return type for each method
 */
export type CompxGovernanceReturns = {
  'createApplication()void': void
  'optInToApplication()void': void
  'createNewProposal(uint64,string,string,uint64,pay)void': void
  'makeProposalVote((uint64),bool,address,uint64)void': void
  'slashUserContribution(address,uint64)void': void
  'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the CompxGovernance smart contract.
 */
export type CompxGovernanceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: CompxGovernanceArgs['obj']['createApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['createApplication()void']
      returns: CompxGovernanceReturns['createApplication()void']
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: CompxGovernanceArgs['obj']['optInToApplication()void']
      argsTuple: CompxGovernanceArgs['tuple']['optInToApplication()void']
      returns: CompxGovernanceReturns['optInToApplication()void']
    }>
    & Record<'createNewProposal(uint64,string,string,uint64,pay)void' | 'createNewProposal', {
      argsObj: CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void']
      argsTuple: CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']
      returns: CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void']
    }>
    & Record<'makeProposalVote((uint64),bool,address,uint64)void' | 'makeProposalVote', {
      argsObj: CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']
      returns: CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void']
    }>
    & Record<'slashUserContribution(address,uint64)void' | 'slashUserContribution', {
      argsObj: CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void']
      argsTuple: CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']
      returns: CompxGovernanceReturns['slashUserContribution(address,uint64)void']
    }>
    & Record<'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposalsById', {
      argsObj: CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
      /**
       * ProposalDataType Returns the proposal by id
       */
      returns: CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        deployerAddress: string
        totalProposals: bigint
        totalVotes: bigint
        totalCurrentVotingPower: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        userCurrentVotingPower: bigint
        userContribution: bigint
        userVotes: bigint
        userSpecialVotes: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        proposals: Map<ProposalIdType, ProposalDataType>
        votes: Map<ProposalVoteIdType, ProposalVoteDataType>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CompxGovernanceSignatures = keyof CompxGovernanceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CompxGovernanceNonVoidMethodSignatures = keyof CompxGovernanceTypes['methods'] extends infer T ? T extends keyof CompxGovernanceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CompxGovernance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CompxGovernanceSignatures> = CompxGovernanceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CompxGovernanceTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = CompxGovernanceTypes['state']['local']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = CompxGovernanceTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CompxGovernanceCreateCallParams =
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CompxGovernanceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CompxGovernanceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CompxGovernance smart contract
 */
export abstract class CompxGovernanceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends CompxGovernanceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return CompxGovernanceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the CompxGovernance smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the CompxGovernance smart contract using the optInToApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      optInToApplication(params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'optInToApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createNewProposal(uint64,string,string,uint64,pay)void ABI method
   *
   * Create a new proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProposal(uint64,string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalType, params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the makeProposalVote((uint64),bool,address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeProposalVote((uint64),bool,address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.inFavor, params.args.voterAddress, params.args.votingPower],
    }
  }
  /**
   * Constructs a no op call for the slashUserContribution(address,uint64)void ABI method
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'slashUserContribution(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CompxGovernance smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CompxGovernanceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CompxGovernanceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CompxGovernanceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CompxGovernanceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CompxGovernance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CompxGovernanceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? CompxGovernanceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (CompxGovernanceCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new CompxGovernanceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(CompxGovernanceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CompxGovernance smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<CompxGovernanceArgs['obj']['createApplication()void'] | CompxGovernanceArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(CompxGovernanceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | CompxGovernanceReturns['createApplication()void']) }, appClient: new CompxGovernanceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CompxGovernance smart contract
 */
export class CompxGovernanceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CompxGovernance app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CompxGovernanceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CompxGovernanceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CompxGovernanceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CompxGovernanceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CompxGovernanceClient> {
    return new CompxGovernanceClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.params.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProposal: (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.createNewProposal(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    makeProposalVote: (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.makeProposalVote(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    slashUserContribution: (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.slashUserContribution(params))
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: ProposalDataType Returns the proposal by id
     */
    getProposalsById: (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CompxGovernanceParamsFactory.getProposalsById(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the CompxGovernance smart contract using the `optInToApplication()void` ABI method.
       *
       * OPT-IN to the application
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      optInToApplication: async (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.optIn(CompxGovernanceParamsFactory.optIn.optInToApplication(params))
        return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['optInToApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `createNewProposal(uint64,string,string,uint64,pay)void` ABI method.
     *
     * Create a new proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProposal: async (params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.createNewProposal(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `makeProposalVote((uint64),bool,address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    makeProposalVote: async (params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.makeProposalVote(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `slashUserContribution(address,uint64)void` ABI method.
     *
     * Add one to the user contribution once it votes on a pool proposal
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    slashUserContribution: async (params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.slashUserContribution(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['slashUserContribution(address,uint64)void'])}
    },

    /**
     * Makes a call to the CompxGovernance smart contract using the `getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: ProposalDataType Returns the proposal by id
     */
    getProposalsById: async (params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CompxGovernanceParamsFactory.getProposalsById(params))
      return {...result, return: result.return as unknown as (undefined | CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CompxGovernanceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CompxGovernance app
   */
  state = {
    /**
     * Methods to access global state for the current CompxGovernance app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          deployerAddress: result.deployer_address,
          totalProposals: result.total_proposals,
          totalVotes: result.total_votes,
          totalCurrentVotingPower: result.total_current_voting_power,
        }
      },
      /**
       * Get the current value of the deployer_address key in global state
       */
      deployerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("deployer_address")) as string | undefined },
      /**
       * Get the current value of the total_proposals key in global state
       */
      totalProposals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_proposals")) as bigint | undefined },
      /**
       * Get the current value of the total_votes key in global state
       */
      totalVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_votes")) as bigint | undefined },
      /**
       * Get the current value of the total_current_voting_power key in global state
       */
      totalCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_current_voting_power")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current CompxGovernance app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userCurrentVotingPower: result.user_current_voting_power,
            userContribution: result.user_contribution,
            userVotes: result.user_votes,
            userSpecialVotes: result.user_special_votes,
          }
        },
        /**
         * Get the current value of the user_current_voting_power key in local state
         */
        userCurrentVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_current_voting_power")) as bigint | undefined },
        /**
         * Get the current value of the user_contribution key in local state
         */
        userContribution: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_contribution")) as bigint | undefined },
        /**
         * Get the current value of the user_votes key in local state
         */
        userVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_votes")) as bigint | undefined },
        /**
         * Get the current value of the user_special_votes key in local state
         */
        userSpecialVotes: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("user_special_votes")) as bigint | undefined },
      }
    },
    /**
     * Methods to access box state for the current CompxGovernance app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the proposals map in box state
       */
      proposals: {
        /**
         * Get all current values of the proposals map in box state
         */
        getMap: async (): Promise<Map<ProposalIdType, ProposalDataType>> => { return (await this.appClient.state.box.getMap("proposals")) as Map<ProposalIdType, ProposalDataType> },
        /**
         * Get a current value of the proposals map by key from box state
         */
        value: async (key: ProposalIdType): Promise<ProposalDataType | undefined> => { return await this.appClient.state.box.getMapValue("proposals", key) as ProposalDataType | undefined },
      },
      /**
       * Get values from the votes map in box state
       */
      votes: {
        /**
         * Get all current values of the votes map in box state
         */
        getMap: async (): Promise<Map<ProposalVoteIdType, ProposalVoteDataType>> => { return (await this.appClient.state.box.getMap("votes")) as Map<ProposalVoteIdType, ProposalVoteDataType> },
        /**
         * Get a current value of the votes map by key from box state
         */
        value: async (key: ProposalVoteIdType): Promise<ProposalVoteDataType | undefined> => { return await this.appClient.state.box.getMapValue("votes", key) as ProposalVoteDataType | undefined },
      },
    },
  }

  public newGroup(): CompxGovernanceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createNewProposal(uint64,string,string,uint64,pay)void method call against the CompxGovernance contract
       */
      createNewProposal(params: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeProposalVote((uint64),bool,address,uint64)void method call against the CompxGovernance contract
       */
      makeProposalVote(params: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeProposalVote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a slashUserContribution(address,uint64)void method call against the CompxGovernance contract
       */
      slashUserContribution(params: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.slashUserContribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) method call against the CompxGovernance contract
       */
      getProposalsById(params: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposalsById(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      get optIn() {
        return {
          optInToApplication: (params: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.optInToApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the CompxGovernance contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CompxGovernanceComposer
  }
}
export type CompxGovernanceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNewProposal(uint64,string,string,uint64,pay)void ABI method.
   *
   * Create a new proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProposal(params?: CallParams<CompxGovernanceArgs['obj']['createNewProposal(uint64,string,string,uint64,pay)void'] | CompxGovernanceArgs['tuple']['createNewProposal(uint64,string,string,uint64,pay)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['createNewProposal(uint64,string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the makeProposalVote((uint64),bool,address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeProposalVote(params?: CallParams<CompxGovernanceArgs['obj']['makeProposalVote((uint64),bool,address,uint64)void'] | CompxGovernanceArgs['tuple']['makeProposalVote((uint64),bool,address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['makeProposalVote((uint64),bool,address,uint64)void'] | undefined]>

  /**
   * Calls the slashUserContribution(address,uint64)void ABI method.
   *
   * Add one to the user contribution once it votes on a pool proposal
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  slashUserContribution(params?: CallParams<CompxGovernanceArgs['obj']['slashUserContribution(address,uint64)void'] | CompxGovernanceArgs['tuple']['slashUserContribution(address,uint64)void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['slashUserContribution(address,uint64)void'] | undefined]>

  /**
   * Calls the getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposalsById(params?: CallParams<CompxGovernanceArgs['obj']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | CompxGovernanceArgs['tuple']['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['getProposalsById((uint64))(uint64,string,string,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the CompxGovernance smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(params?: CallParams<CompxGovernanceArgs['obj']['optInToApplication()void'] | CompxGovernanceArgs['tuple']['optInToApplication()void']>): CompxGovernanceComposer<[...TReturns, CompxGovernanceReturns['optInToApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the CompxGovernance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CompxGovernanceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CompxGovernanceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CompxGovernanceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CompxGovernanceComposerResults<TReturns>>
}
export type CompxGovernanceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

